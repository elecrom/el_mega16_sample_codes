
AVRASM ver. 2.1.17  F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm Fri Feb 13 18:36:46 2009

F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1026): warning: Register r5 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1027): warning: Register r4 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1028): warning: Register r7 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1029): warning: Register r8 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1030): warning: Register r10 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1031): warning: Register r12 already defined by the .DEF directive
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1032): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : long, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _iH=R5
                 	.DEF _iL=R4
                 	.DEF _i2c_rv=R7
                 	.DEF _t=R8
                 	.DEF _i1=R10
                 	.DEF _i2=R12
                 	.DEF _j=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 00fe 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 01ce 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0xB7:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
                 _0x0:
00002c 3030
00002d 3030
00002e 3030
00002f 5700      	.DB  0x30,0x30,0x30,0x30,0x30,0x30,0x0,0x57
000030 6972
000031 6574
000032 003a
000033 0a0d      	.DB  0x72,0x69,0x74,0x65,0x3A,0x0,0xD,0xA
000034 7257
000035 7469
000036 3a65
000037 5200      	.DB  0x57,0x72,0x69,0x74,0x65,0x3A,0x0,0x52
000038 6165
000039 2064
00003a 003a
00003b 0a0d      	.DB  0x65,0x61,0x64,0x20,0x3A,0x0,0xD,0xA
00003c 6552
00003d 6461
00003e 003a
00003f 0a0d      	.DB  0x52,0x65,0x61,0x64,0x3A,0x0,0xD,0xA
000040 324c
000041 3339
000042 5f44
000043 2031      	.DB  0x4C,0x32,0x39,0x33,0x44,0x5F,0x31,0x20
000044 6554
000045 7473
000046 2e20
000047 2e2e      	.DB  0x54,0x65,0x73,0x74,0x20,0x2E,0x2E,0x2E
000048 0020
000049 6420
00004a 6e6f
00004b 0065      	.DB  0x20,0x0,0x20,0x64,0x6F,0x6E,0x65,0x0
00004c 0a0d
00004d 324c
00004e 3339
00004f 5f44      	.DB  0xD,0xA,0x4C,0x32,0x39,0x33,0x44,0x5F
000050 2032
000051 6554
000052 7473
000053 2e20      	.DB  0x32,0x20,0x54,0x65,0x73,0x74,0x20,0x2E
000054 2e2e
000055 0020
000056 0a0d
000057 434c      	.DB  0x2E,0x2E,0x20,0x0,0xD,0xA,0x4C,0x43
000058 5f44
000059 6574
00005a 7473
00005b 4d00      	.DB  0x44,0x5F,0x74,0x65,0x73,0x74,0x0,0x4D
00005c 4745
00005d 3141
00005e 0036
00005f 4544      	.DB  0x45,0x47,0x41,0x31,0x36,0x0,0x44,0x45
000060 4556
000061 4f4c
000062 4d50
000063 4e45      	.DB  0x56,0x45,0x4C,0x4F,0x50,0x4D,0x45,0x4E
000064 2054
000065 5242
000066 0044
000067 0a0d      	.DB  0x54,0x20,0x42,0x52,0x44,0x0,0xD,0xA
000068 454c
000069 2044
00006a 6554
00006b 7473      	.DB  0x4C,0x45,0x44,0x20,0x54,0x65,0x73,0x74
00006c 2e20
00006d 2e2e
00006e 0020
00006f 0a0d      	.DB  0x20,0x2E,0x2E,0x2E,0x20,0x0,0xD,0xA
000070 4441
000071 2043
000072 6554
000073 7473      	.DB  0x41,0x44,0x43,0x20,0x54,0x65,0x73,0x74
000074 2e20
000075 2e2e
000076 0d00
000077 430a      	.DB  0x20,0x2E,0x2E,0x2E,0x0,0xD,0xA,0x43
000078 2048
000079 6425
00007a 203a
00007b 3025      	.DB  0x48,0x20,0x25,0x64,0x3A,0x20,0x25,0x30
00007c 6433
00007d 3d20
00007e 203e
00007f 3025      	.DB  0x33,0x64,0x20,0x3D,0x3E,0x20,0x25,0x30
000080 6434
000081 6d20
000082 0056
000083 0a0d      	.DB  0x34,0x64,0x20,0x6D,0x56,0x0,0xD,0xA
000084 0d00
000085 0a0a
000086 2023
000087 4f44      	.DB  0x0,0xD,0xA,0xA,0x23,0x20,0x44,0x4F
000088 454e
000089 002e
00008a 0a0d
00008b 200a      	.DB  0x4E,0x45,0x2E,0x0,0xD,0xA,0xA,0x20
00008c 6f4e
00008d 2077
00008e 7270
00008f 7365      	.DB  0x4E,0x6F,0x77,0x20,0x70,0x72,0x65,0x73
000090 2073
000091 656b
000092 7379
000093 6f20      	.DB  0x73,0x20,0x6B,0x65,0x79,0x73,0x20,0x6F
000094 206e
000095 6572
000096 6f6d
000097 6574      	.DB  0x6E,0x20,0x72,0x65,0x6D,0x6F,0x74,0x65
000098 0a0d
000099 5000
00009a 6572
00009b 7373      	.DB  0xD,0xA,0x0,0x50,0x72,0x65,0x73,0x73
00009c 7220
00009d 6d65
00009e 746f
00009f 2065      	.DB  0x20,0x72,0x65,0x6D,0x6F,0x74,0x65,0x20
0000a0 656b
0000a1 7379
0000a2 0d00
0000a3 0a0a      	.DB  0x6B,0x65,0x79,0x73,0x0,0xD,0xA,0xA
0000a4 654b
0000a5 2079
0000a6 203a
0000a7 6425      	.DB  0x4B,0x65,0x79,0x20,0x3A,0x20,0x25,0x64
0000a8 0020
0000a9 0a0d
0000aa 0a0a
0000ab 654d      	.DB  0x20,0x0,0xD,0xA,0xA,0xA,0x4D,0x65
0000ac 6167
0000ad 3631
0000ae 6420
0000af 7665      	.DB  0x67,0x61,0x31,0x36,0x20,0x64,0x65,0x76
0000b0 6c65
0000b1 706f
0000b2 656d
0000b3 746e      	.DB  0x65,0x6C,0x6F,0x70,0x6D,0x65,0x6E,0x74
0000b4 6220
0000b5 616f
0000b6 6472
0000b7 6620      	.DB  0x20,0x62,0x6F,0x61,0x72,0x64,0x20,0x66
0000b8 726f
0000b9 7020
0000ba 6f72
0000bb 656a      	.DB  0x6F,0x72,0x20,0x70,0x72,0x6F,0x6A,0x65
0000bc 7463
0000bd 702f
0000be 6f72
0000bf 7564      	.DB  0x63,0x74,0x2F,0x70,0x72,0x6F,0x64,0x75
0000c0 7463
0000c1 722f
0000c2 626f
0000c3 746f      	.DB  0x63,0x74,0x2F,0x72,0x6F,0x62,0x6F,0x74
0000c4 6369
0000c5 2073
0000c6 6564
0000c7 6576      	.DB  0x69,0x63,0x73,0x20,0x64,0x65,0x76,0x65
0000c8 6f6c
0000c9 6d70
0000ca 6e65
0000cb 0074      	.DB  0x6C,0x6F,0x70,0x6D,0x65,0x6E,0x74,0x0
0000cc 0d0a
0000cd 434c
0000ce 2044
0000cf 7369      	.DB  0xA,0xD,0x4C,0x43,0x44,0x20,0x69,0x73
0000d0 6120
0000d1 7373
0000d2 6d75
0000d3 6465      	.DB  0x20,0x61,0x73,0x73,0x75,0x6D,0x65,0x64
0000d4 7420
0000d5 206f
0000d6 6562
0000d7 7020      	.DB  0x20,0x74,0x6F,0x20,0x62,0x65,0x20,0x70
0000d8 6572
0000d9 6573
0000da 746e
0000db 002e      	.DB  0x72,0x65,0x73,0x65,0x6E,0x74,0x2E,0x0
0000dc 0d0a
0000dd 434c
0000de 2044
0000df 7369      	.DB  0xA,0xD,0x4C,0x43,0x44,0x20,0x69,0x73
0000e0 6120
0000e1 7373
0000e2 6d75
0000e3 6465      	.DB  0x20,0x61,0x73,0x73,0x75,0x6D,0x65,0x64
0000e4 7420
0000e5 206f
0000e6 6562
0000e7 6120      	.DB  0x20,0x74,0x6F,0x20,0x62,0x65,0x20,0x61
0000e8 7362
0000e9 6e65
0000ea 2e74
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1110): warning: .cseg .db misalignment - padding zero byte
0000eb 0000      	.DB  0x62,0x73,0x65,0x6E,0x74,0x2E,0x0
                 _0x202005F:
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1112): warning: .cseg .db misalignment - padding zero byte
0000ec 0001      	.DB  0x1
                 _0x2020000:
0000ed 4e2d
0000ee 4e41
F:\mega16_kitCD\sample code\mega16_board_test_mega32\m16brd.asm(1114): warning: .cseg .db misalignment - padding zero byte
0000ef 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 _0x2040003:
0000f0 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000f1 0007      	.DW  0x07
0000f2 0260      	.DW  _0x2C
0000f3 0058      	.DW  _0x0*2
                 
0000f4 0004      	.DW  0x04
0000f5 000a      	.DW  0x0A
0000f6 0054      	.DW  _0xB7*2
                 
0000f7 0001      	.DW  0x01
0000f8 026d      	.DW  __seed_G101
0000f9 01d8      	.DW  _0x202005F*2
                 
0000fa 0002      	.DW  0x02
0000fb 0271      	.DW  __base_y_G102
0000fc 01e0      	.DW  _0x2040003*2
                 
                 _0xFFFFFFFF:
0000fd 0000      	.DW  0
                 
                 __RESET:
0000fe 94f8      	CLI
0000ff 27ee      	CLR  R30
000100 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000101 e0f1      	LDI  R31,1
000102 bffb      	OUT  GICR,R31
000103 bfeb      	OUT  GICR,R30
000104 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000105 e1f8      	LDI  R31,0x18
000106 bdf1      	OUT  WDTCR,R31
000107 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000108 e08d      	LDI  R24,(14-2)+1
000109 e0a2      	LDI  R26,2
00010a 27bb      	CLR  R27
                 __CLEAR_REG:
00010b 93ed      	ST   X+,R30
00010c 958a      	DEC  R24
00010d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00010e e080      	LDI  R24,LOW(0x800)
00010f e098      	LDI  R25,HIGH(0x800)
000110 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000111 93ed      	ST   X+,R30
000112 9701      	SBIW R24,1
000113 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000114 eee2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000115 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000116 9185      	LPM  R24,Z+
000117 9195      	LPM  R25,Z+
000118 9700      	SBIW R24,0
000119 f061      	BREQ __GLOBAL_INI_END
00011a 91a5      	LPM  R26,Z+
00011b 91b5      	LPM  R27,Z+
00011c 9005      	LPM  R0,Z+
00011d 9015      	LPM  R1,Z+
00011e 01bf      	MOVW R22,R30
00011f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000120 9005      	LPM  R0,Z+
000121 920d      	ST   X+,R0
000122 9701      	SBIW R24,1
000123 f7e1      	BRNE __GLOBAL_INI_LOOP
000124 01fb      	MOVW R30,R22
000125 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000126 e5ef      	LDI  R30,LOW(0x85F)
000127 bfed      	OUT  SPL,R30
000128 e0e8      	LDI  R30,HIGH(0x85F)
000129 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00012a e6c0      	LDI  R28,LOW(0x260)
00012b e0d2      	LDI  R29,HIGH(0x260)
                 
00012c 940c 0375 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type           : ATmega16
                 ;Program type        : Application
                 ;Clock frequency     : 16.000000 MHz
                 ;Memory model        : Small
                 ;External SRAM size  : 0
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <stdlib.h>
                 ;
                 ;#define	irPORT	PORTC
                 ;#define	irPIN		PINC
                 ;#define	irDDR		DDRC
                 ;#define	irBIT		6
                 ;
                 ;#include "../include/ir.h"
                 
                 	.CSEG
                 _getKeyIR_basic:
00012e 940e 09ec 	CALL __SAVELOCR6
                 ;	b1 -> R17
                 ;	b2 -> R16
                 ;	rec_byte -> R18,R19
                 ;	i -> R21
                +
000130 e020     +LDI R18 , LOW ( 0 )
000131 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000132 98a6      	CBI  0x14,6
000133 9aae      	SBI  0x15,6
                 _0x7:
000134 e0a0      	LDI  R26,0
000135 999e      	SBIC 0x13,6
000136 e0a1      	LDI  R26,1
000137 30a1      	CPI  R26,LOW(0x1)
000138 f3d9      	BREQ _0x7
                 _0xA:
000139 9b9e      	SBIS 0x13,6
00013a cffe      	RJMP _0xA
                 _0xD:
00013b e0a0      	LDI  R26,0
00013c 999e      	SBIC 0x13,6
00013d e0a1      	LDI  R26,1
00013e 30a1      	CPI  R26,LOW(0x1)
00013f f3d9      	BREQ _0xD
                +
000140 eb8c     +LDI R24 , LOW ( 5052 )
000141 e193     +LDI R25 , HIGH ( 5052 )
                +__DELAY_USW_LOOP :
000142 9701     +SBIW R24 , 1
000143 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 5052
000144 e050      	LDI  R21,LOW(0)
                 _0x11:
000145 305c      	CPI  R21,12
000146 f480      	BRSH _0x12
000147 e0e0      	LDI  R30,0
000148 999e      	SBIC 0x13,6
000149 e0e1      	LDI  R30,1
00014a 2f1e      	MOV  R17,R30
                +
00014b e580     +LDI R24 , LOW ( 6736 )
00014c e19a     +LDI R25 , HIGH ( 6736 )
                +__DELAY_USW_LOOP :
00014d 9701     +SBIW R24 , 1
00014e f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 6736
00014f 0f22      	LSL  R18
000150 1f33      	ROL  R19
000151 2fe1      	MOV  R30,R17
000152 e0f0      	LDI  R31,0
                +
000153 2b2e     +OR R18 , R30
000154 2b3f     +OR R19 , R31
                 	__ORWRR 18,19,30,31
000155 5f5f      	SUBI R21,-1
000156 cfee      	RJMP _0x11
                 _0x12:
000157 01f9      	MOVW R30,R18
000158 940e 09f3 	CALL __LOADLOCR6
00015a c071      	RJMP _0x20C0006
                 _getKeyIR:
00015b 931a      	ST   -Y,R17
00015c 930a      	ST   -Y,R16
                 ;	c1 -> R17
                 ;	c2 -> R16
                 _0x14:
00015d dfd0      	RCALL _getKeyIR_basic
00015e 73ef      	ANDI R30,LOW(0x3F)
00015f 70f0      	ANDI R31,HIGH(0x3F)
000160 2f1e      	MOV  R17,R30
000161 dfcc      	RCALL _getKeyIR_basic
000162 73ef      	ANDI R30,LOW(0x3F)
000163 70f0      	ANDI R31,HIGH(0x3F)
000164 2f0e      	MOV  R16,R30
000165 1701      	CP   R16,R17
000166 f7b1      	BRNE _0x14
000167 2fe0      	MOV  R30,R16
000168 9109      	LD   R16,Y+
000169 9119      	LD   R17,Y+
00016a 9508      	RET
                 ;
                 ;// Alphanumeric LCD Module functions
                 ;#asm
                    .equ __lcd_port=0x18 ;PORTB
                 ; 0000 001B #endasm
                 ;#include <lcd.h>
                 ;
                 ;
                 ;//#include "../include/myi2c.c"
                 ;//#include "../include/eeprommyi2c.c"
                 ;// I2C Bus functions
                 ;#asm
                    .equ __i2c_port=0x15 ;PORTC
                    .equ __sda_bit=1
                    .equ __scl_bit=0
                 ; 0000 0026 #endasm
                 ;#include <i2c.h>
                 ;#include   "../include/eeprom.h"
                 ;	add -> Y+4
                 ;	*bAdd -> Y+2
                 ;	addOLD -> R16,R17
                 ;	add -> Y+0
                 ;	add -> Y+0
                 ;	add -> Y+0
                 _readByte:
                 ;	add -> Y+0
00016b 81e8      	LD   R30,Y
00016c 2e4e      	MOV  R4,R30
00016d 940e 0731 	CALL SUBOPT_0x0
                 _0x22:
00016f 2077      	TST  R7
000170 f461      	BRNE _0x24
                 _0x25:
000171 940e 0819 	CALL _i2c_start
000173 30e0      	CPI  R30,0
000174 f3e1      	BREQ _0x25
000175 eae0      	LDI  R30,LOW(160)
000176 93ea      	ST   -Y,R30
000177 940e 084d 	CALL _i2c_write
000179 2e7e      	MOV  R7,R30
00017a e0e1      	LDI  R30,LOW(1)
00017b 15e7      	CP   R30,R7
00017c f791      	BRNE _0x22
                 _0x24:
00017d 940e 073a 	CALL SUBOPT_0x1
00017f 940e 0819 	CALL _i2c_start
000181 eae1      	LDI  R30,LOW(161)
000182 93ea      	ST   -Y,R30
000183 940e 084d 	CALL _i2c_write
000185 e0e0      	LDI  R30,LOW(0)
000186 93ea      	ST   -Y,R30
000187 940e 0832 	CALL _i2c_read
000189 2eae      	MOV  R10,R30
00018a 24bb      	CLR  R11
00018b 940e 0828 	CALL _i2c_stop
00018d 01f5      	MOVW R30,R10
00018e 940c 0678 	JMP  _0x20C0004
                 _writeByte:
                 ;	eB -> Y+2
                 ;	add -> Y+0
000190 940e 0828 	CALL _i2c_stop
000192 8048      	LDD  R4,Y+0
000193 940e 0731 	CALL SUBOPT_0x0
000195 940e 0819 	CALL _i2c_start
000197 eae0      	LDI  R30,LOW(160)
000198 93ea      	ST   -Y,R30
000199 940e 084d 	CALL _i2c_write
00019b 2e7e      	MOV  R7,R30
00019c 940e 073a 	CALL SUBOPT_0x1
00019e 81ea      	LDD  R30,Y+2
00019f 93ea      	ST   -Y,R30
0001a0 940e 084d 	CALL _i2c_write
0001a2 940e 0828 	CALL _i2c_stop
0001a4 e0e5      	LDI  R30,LOW(5)
0001a5 e0f0      	LDI  R31,HIGH(5)
0001a6 940e 0740 	CALL SUBOPT_0x2
0001a8 940c 06d5 	JMP  _0x20C0003
                 ;
                 ;
                 ;
                 ;
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;unsigned int i;
                 ;unsigned char j;
                 ;unsigned char adc_val;
                 ;unsigned char lcdPresent;
                 ;unsigned int adc_volt;
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 003A {
                 _read_adc:
                 ; 0000 003B ADMUX=adc_input|ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
0001aa 81e8      	LD   R30,Y
0001ab 66e0      	ORI  R30,LOW(0x60)
0001ac b9e7      	OUT  0x7,R30
                 ; 0000 003C // Start the AD conversion
                 ; 0000 003D ADCSRA|=0x40;
0001ad 9a36      	SBI  0x6,6
                 ; 0000 003E // Wait for the AD conversion to complete
                 ; 0000 003F while ((ADCSRA & 0x10)==0);
                 _0x29:
0001ae 9b34      	SBIS 0x6,4
0001af cffe      	RJMP _0x29
                 ; 0000 0040 ADCSRA|=0x10;
0001b0 9a34      	SBI  0x6,4
                 ; 0000 0041 return ADCH;
0001b1 b1e5      	IN   R30,0x5
0001b2 940c 071a 	JMP  _0x20C0001
                 ; 0000 0042 }
                 ;
                 ;//_______________________________________________________________________________________
                 ;//# To display given number at given location on LCD
                 ;void display_num(unsigned char nX,unsigned char nY,unsigned int nNum)
                 ; 0000 0047 {
                 _display_num:
                 ; 0000 0048 unsigned char *stnum="000000";
                 ; 0000 0049 
                 ; 0000 004A 	ltoa(nNum,stnum);
0001b4 931a      	ST   -Y,R17
0001b5 930a      	ST   -Y,R16
                 ;	nX -> Y+5
                 ;	nY -> Y+4
                 ;	nNum -> Y+2
                 ;	*stnum -> R16,R17
                +
0001b6 e600     +LDI R16 , LOW ( _0x2C + 0 )
0001b7 e012     +LDI R17 , HIGH ( _0x2C + 0 )
                 	__POINTWRMN 16,17,_0x2C,0
0001b8 81ea      	LDD  R30,Y+2
0001b9 81fb      	LDD  R31,Y+2+1
0001ba 940e 0744 	CALL SUBOPT_0x3
0001bc 931a      	ST   -Y,R17
0001bd 930a      	ST   -Y,R16
0001be 940e 05d7 	CALL _ltoa
                 ; 0000 004B 	lcd_gotoxy(nX,nY);
0001c0 81ed      	LDD  R30,Y+5
0001c1 93ea      	ST   -Y,R30
0001c2 81ed      	LDD  R30,Y+5
0001c3 93ea      	ST   -Y,R30
0001c4 940e 0666 	CALL _lcd_gotoxy
                 ; 0000 004C 	lcd_puts(stnum);
0001c6 931a      	ST   -Y,R17
0001c7 930a      	ST   -Y,R16
0001c8 940e 06b9 	CALL _lcd_puts
                 ; 0000 004D 
                 ; 0000 004E  return;
0001ca 8119      	LDD  R17,Y+1
0001cb 8108      	LDD  R16,Y+0
                 _0x20C0006:
0001cc 9626      	ADIW R28,6
0001cd 9508      	RET
                 ; 0000 004F }
                 
                 	.DSEG
                 _0x2C:
000260           	.BYTE 0x7
                 ;
                 ;//_____________________________________________________________________________________
                 ;// Timer 1 overflow interrupt service routine
                 ;//# This will flash LED on PORTB.7 at a rate of 1Hz.
                 ;//  -Interrupt period 	= Timer Clk period * (65536 - TCNT1 )
                 ;//	 						 	= (1/15625) * (65536 - 57723)
                 ;//							 	= 64uS  * 7813
                 ;//							 	= 500.032s => 0.5 sec
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0059 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
0001ce 93ea      	ST   -Y,R30
0001cf 93fa      	ST   -Y,R31
                 ; 0000 005A 	TCNT1 = 57723;
0001d0 e7eb      	LDI  R30,LOW(57723)
0001d1 eef1      	LDI  R31,HIGH(57723)
0001d2 bdfd      	OUT  0x2C+1,R31
0001d3 bdec      	OUT  0x2C,R30
                 ; 0000 005B 
                 ; 0000 005C 	// Place your code here
                 ; 0000 005D 	PORTB.3 = !PORTB.3;
0001d4 9bc3      	SBIS 0x18,3
0001d5 c002      	RJMP _0x2D
0001d6 98c3      	CBI  0x18,3
0001d7 c001      	RJMP _0x2E
                 _0x2D:
0001d8 9ac3      	SBI  0x18,3
                 _0x2E:
                 ; 0000 005E 
                 ; 0000 005F }
0001d9 91f9      	LD   R31,Y+
0001da 91e9      	LD   R30,Y+
0001db 9518      	RETI
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;void io_test()
                 ; 0000 0064 {
                 ; 0000 0065 unsigned char pa,pb,pc,pd;
                 ; 0000 0066 unsigned char da,db,dc,dd;
                 ; 0000 0067 
                 ; 0000 0068 	//Save the port registers
                 ; 0000 0069    pa = PORTA; pb = PORTB; pc = PORTC; pd = PORTD;
                 ;	pa -> R17
                 ;	pb -> R16
                 ;	pc -> R19
                 ;	pd -> R18
                 ;	da -> R21
                 ;	db -> R20
                 ;	dc -> Y+7
                 ;	dd -> Y+6
                 ; 0000 006A    da = DDRA;	db = DDRB; 	dc = DDRC;	dd = DDRD;
                 ; 0000 006B 
                 ; 0000 006C 
                 ; 0000 006D    DDRC.2 = 0;
                 ; 0000 006E    PORTC.2 = 1;
                 ; 0000 006F    while(PINC.2 == 1)
                 ; 0000 0070    {
                 ; 0000 0071 		//Set all ports to output
                 ; 0000 0072 		PORTA = PORTB = PORTC = PORTD = 0;
                 ; 0000 0073    	DDRA = DDRB = DDRC = DDRD = 0xFF;
                 ; 0000 0074 
                 ; 0000 0075       PORTA = PORTB = PORTC = PORTD = 0xFF;
                 ; 0000 0076       delay_ms(500);
                 ; 0000 0077    	PORTA = PORTB = PORTC = PORTD = 0;
                 ; 0000 0078       delay_ms(500);
                 ; 0000 0079 
                 ; 0000 007A       //Set only PORTC.2 to input with pull up
                 ; 0000 007B       PORTC.2 = 1;
                 ; 0000 007C       DDRC.2 = 0;
                 ; 0000 007D       delay_ms(10);
                 ; 0000 007E 
                 ; 0000 007F 	};
                 ; 0000 0080 
                 ; 0000 0081    //Restore PORT states
                 ; 0000 0082 	PORTA = pa; PORTB = pb; PORTC = pc; PORTD =pd;
                 ; 0000 0083    DDRA = da; DDRB = db; DDRC = dc;	DDRD = dd;
                 ; 0000 0084 }
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;//I2C test routine, with output messages on LCD and UART.
                 ;void i2c_test_withLCD()
                 ; 0000 008A {
                 _i2c_test_withLCD:
                 ; 0000 008B 	//I2C test
                 ; 0000 008C    lcd_clear();
0001dc 940e 067a 	CALL _lcd_clear
                 ; 0000 008D 	lcd_putsf("Write:");
                +
0001de e5ef     +LDI R30 , LOW ( 2 * _0x0 + 7 )
0001df e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 7 )
                 	__POINTW1FN _0x0,7
0001e0 940e 0749 	CALL SUBOPT_0x4
                 ; 0000 008E 	printf("\r\nWrite:");
0001e2 940e 074d 	CALL SUBOPT_0x5
                 ; 0000 008F 	for(i=0;i<5;i++)
                 _0x3B:
0001e4 940e 075c 	CALL SUBOPT_0x6
0001e6 f488      	BRSH _0x3C
                 ; 0000 0090 	{
                 ; 0000 0091       #asm("cli");					//disable all interrupts
0001e7 94f8      	cli
                 ; 0000 0092 		writeByte(i+65,i);
0001e8 940e 0762 	CALL SUBOPT_0x7
0001ea 940e 0767 	CALL SUBOPT_0x8
                 ; 0000 0093 		#asm("sei");         		//enable all interrupts
0001ec 9478      	sei
                 ; 0000 0094 		lcd_putchar(i+65);
0001ed 940e 076f 	CALL SUBOPT_0x9
0001ef 940e 0692 	CALL _lcd_putchar
                 ; 0000 0095 		putchar(i+65);
0001f1 940e 076f 	CALL SUBOPT_0x9
0001f3 940e 0774 	CALL SUBOPT_0xA
                 ; 0000 0096 		delay_ms(300);
                 ; 0000 0097 	}
0001f5 940e 0779 	CALL SUBOPT_0xB
0001f7 cfec      	RJMP _0x3B
                 _0x3C:
                 ; 0000 0098 
                 ; 0000 0099 	delay_ms(1000);
0001f8 940e 0781 	CALL SUBOPT_0xC
                 ; 0000 009A    lcd_clear();
0001fa 940e 067a 	CALL _lcd_clear
                 ; 0000 009B 	delay_ms(500);
0001fc efe4      	LDI  R30,LOW(500)
0001fd e0f1      	LDI  R31,HIGH(500)
0001fe 940e 0740 	CALL SUBOPT_0x2
                 ; 0000 009C 	lcd_putsf("Read :");
                +
000200 e6ef     +LDI R30 , LOW ( 2 * _0x0 + 23 )
000201 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 23 )
                 	__POINTW1FN _0x0,23
000202 940e 0749 	CALL SUBOPT_0x4
                 ; 0000 009D 	printf("\r\nRead:");
000204 940e 0784 	CALL SUBOPT_0xD
                 ; 0000 009E 	for(i=0;i<5;i++)
                 _0x3E:
000206 940e 075c 	CALL SUBOPT_0x6
000208 f468      	BRSH _0x3F
                 ; 0000 009F 	{
                 ; 0000 00A0       #asm("cli");					//disable all interrupts
000209 94f8      	cli
                 ; 0000 00A1 		j = readByte(i);
00020a 940e 0793 	CALL SUBOPT_0xE
                 ; 0000 00A2 		#asm("sei");         		//enable all interrupts
00020c 9478      	sei
                 ; 0000 00A3 		lcd_putchar(j);
00020d 926a      	ST   -Y,R6
00020e 940e 0692 	CALL _lcd_putchar
                 ; 0000 00A4 		putchar(j);
000210 926a      	ST   -Y,R6
000211 940e 0774 	CALL SUBOPT_0xA
                 ; 0000 00A5 		delay_ms(300);
                 ; 0000 00A6 	}
000213 940e 0779 	CALL SUBOPT_0xB
000215 cff0      	RJMP _0x3E
                 _0x3F:
                 ; 0000 00A7 
                 ; 0000 00A8 	delay_ms(3000);
000216 c023      	RJMP _0x20C0005
                 ; 0000 00A9 
                 ; 0000 00AA }
                 ;
                 ;//_____________________________________________________________________________________
                 ;//I2C test routine. Output messages only on UART
                 ;void i2c_test()
                 ; 0000 00AF {
                 _i2c_test:
                 ; 0000 00B0 
                 ; 0000 00B1 	//I2C test
                 ; 0000 00B2 	i2c_init();
000217 940e 0814 	CALL _i2c_init
                 ; 0000 00B3 	i2c_init();
000219 940e 0814 	CALL _i2c_init
                 ; 0000 00B4 	printf("\r\nWrite:");
00021b 940e 074d 	CALL SUBOPT_0x5
                 ; 0000 00B5 	for(i=0;i<5;i++)
                 _0x41:
00021d 940e 075c 	CALL SUBOPT_0x6
00021f f458      	BRSH _0x42
                 ; 0000 00B6 	{
                 ; 0000 00B7 		writeByte(i+65,i);
000220 940e 0762 	CALL SUBOPT_0x7
000222 940e 0767 	CALL SUBOPT_0x8
                 ; 0000 00B8 		putchar(i+65);
000224 940e 076f 	CALL SUBOPT_0x9
000226 940e 0774 	CALL SUBOPT_0xA
                 ; 0000 00B9 		delay_ms(300);
                 ; 0000 00BA 	}
000228 940e 0779 	CALL SUBOPT_0xB
00022a cff2      	RJMP _0x41
                 _0x42:
                 ; 0000 00BB 
                 ; 0000 00BC 	delay_ms(1000);
00022b 940e 0781 	CALL SUBOPT_0xC
                 ; 0000 00BD 	printf("\r\nRead:");
00022d 940e 0784 	CALL SUBOPT_0xD
                 ; 0000 00BE 	for(i=0;i<5;i++)
                 _0x44:
00022f 940e 075c 	CALL SUBOPT_0x6
000231 f440      	BRSH _0x45
                 ; 0000 00BF 	{
                 ; 0000 00C0 		j = readByte(i);
000232 940e 0793 	CALL SUBOPT_0xE
                 ; 0000 00C1 		putchar(j);
000234 926a      	ST   -Y,R6
000235 940e 0774 	CALL SUBOPT_0xA
                 ; 0000 00C2 		delay_ms(300);
                 ; 0000 00C3 	}
000237 940e 0779 	CALL SUBOPT_0xB
000239 cff5      	RJMP _0x44
                 _0x45:
                 ; 0000 00C4 
                 ; 0000 00C5 	delay_ms(3000);
                 _0x20C0005:
00023a ebe8      	LDI  R30,LOW(3000)
00023b e0fb      	LDI  R31,HIGH(3000)
00023c 940e 0740 	CALL SUBOPT_0x2
                 ; 0000 00C6 }
00023e 9508      	RET
                 ;
                 ;//_____________________________________________________________________________________
                 ;//L293D test routine. for L293D connected on PORTD.
                 ;void l293d1_test()
                 ; 0000 00CB {
                 _l293d1_test:
                 ; 0000 00CC 	//#L293D test :
                 ; 0000 00CD 	printf("\r\nL293D_1 Test ... ");
                +
00023f e7ee     +LDI R30 , LOW ( 2 * _0x0 + 38 )
000240 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 38 )
                 	__POINTW1FN _0x0,38
000241 940e 079a 	CALL SUBOPT_0xF
000243 9622      	ADIW R28,2
                 ; 0000 00CE 
                 ; 0000 00CF 	PORTD.4=1;								//start motors..
000244 9a94      	SBI  0x12,4
                 ; 0000 00D0 	PORTD.6=0;
000245 9896      	CBI  0x12,6
                 ; 0000 00D1 	PORTD.5=1;
000246 9a95      	SBI  0x12,5
                 ; 0000 00D2 	PORTD.7=0;
000247 9897      	CBI  0x12,7
                 ; 0000 00D3 	delay_ms(3000);
000248 940e 079f 	CALL SUBOPT_0x10
                 ; 0000 00D4 
                 ; 0000 00D5 	PORTD.4=0;								//reverse direction
00024a 9894      	CBI  0x12,4
                 ; 0000 00D6 	PORTD.6=1;
00024b 9a96      	SBI  0x12,6
                 ; 0000 00D7 	PORTD.5=0;
00024c 9895      	CBI  0x12,5
                 ; 0000 00D8 	PORTD.7=1;
00024d 9a97      	SBI  0x12,7
                 ; 0000 00D9 	delay_ms(3000);
00024e 940e 079f 	CALL SUBOPT_0x10
                 ; 0000 00DA 
                 ; 0000 00DB 	PORTD.4=0;								//stop motors
000250 9894      	CBI  0x12,4
                 ; 0000 00DC 	PORTD.5=0;
000251 9895      	CBI  0x12,5
                 ; 0000 00DD 	PORTD.6=0;
000252 9896      	CBI  0x12,6
                 ; 0000 00DE 	PORTD.7=0;
000253 9897      	CBI  0x12,7
                 ; 0000 00DF 
                 ; 0000 00E0 	printf(" done");
000254 940e 07a2 	CALL SUBOPT_0x11
000256 940c 0678 	JMP  _0x20C0004
                 ; 0000 00E1 }
                 ;
                 ;//_____________________________________________________________________________________
                 ;//L293D test routine.for L293D connected on PORTB.
                 ;void l293d2_test()
                 ; 0000 00E6 {
                 _l293d2_test:
                 ; 0000 00E7 	//#L293D test :
                 ; 0000 00E8 	printf("\r\nL293D_2 Test ... ");
                +
000258 e9e8     +LDI R30 , LOW ( 2 * _0x0 + 64 )
000259 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 64 )
                 	__POINTW1FN _0x0,64
00025a 940e 079a 	CALL SUBOPT_0xF
00025c 9622      	ADIW R28,2
                 ; 0000 00E9 
                 ; 0000 00EA 	DDRB=0x0F;								//set lower nibble of PORTB as output
00025d e0ef      	LDI  R30,LOW(15)
00025e bbe7      	OUT  0x17,R30
                 ; 0000 00EB 	PORTB=0x00;
00025f e0e0      	LDI  R30,LOW(0)
000260 bbe8      	OUT  0x18,R30
                 ; 0000 00EC 
                 ; 0000 00ED 	PORTB.0=1;                       //start motors in one direction
000261 9ac0      	SBI  0x18,0
                 ; 0000 00EE 	PORTB.1=0;
000262 98c1      	CBI  0x18,1
                 ; 0000 00EF 	PORTB.2=1;
000263 9ac2      	SBI  0x18,2
                 ; 0000 00F0 	PORTB.3=0;
000264 98c3      	CBI  0x18,3
                 ; 0000 00F1 	delay_ms(3000);
000265 940e 079f 	CALL SUBOPT_0x10
                 ; 0000 00F2 
                 ; 0000 00F3 	PORTB.0=0;                       //reverse directions
000267 98c0      	CBI  0x18,0
                 ; 0000 00F4 	PORTB.1=1;
000268 9ac1      	SBI  0x18,1
                 ; 0000 00F5 	PORTB.2=0;
000269 98c2      	CBI  0x18,2
                 ; 0000 00F6 	PORTB.3=1;
00026a 9ac3      	SBI  0x18,3
                 ; 0000 00F7 	delay_ms(3000);
00026b 940e 079f 	CALL SUBOPT_0x10
                 ; 0000 00F8 
                 ; 0000 00F9 	PORTB.0=0;                       //stop motors
00026d 98c0      	CBI  0x18,0
                 ; 0000 00FA 	PORTB.1=0;
00026e 98c1      	CBI  0x18,1
                 ; 0000 00FB 	PORTB.2=0;
00026f 98c2      	CBI  0x18,2
                 ; 0000 00FC 	PORTB.3=0;
000270 98c3      	CBI  0x18,3
                 ; 0000 00FD 
                 ; 0000 00FE 	printf(" done");
000271 940e 07a2 	CALL SUBOPT_0x11
000273 940c 0678 	JMP  _0x20C0004
                 ; 0000 00FF }
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;//LCD test routine
                 ;void lcd_test()
                 ; 0000 0105 {
                 _lcd_test:
                 ; 0000 0106 unsigned char j,k;
                 ; 0000 0107 unsigned char rows=2;
                 ; 0000 0108 unsigned char cols=16;
                 ; 0000 0109 
                 ; 0000 010A 	//#LCD TEST		:
                 ; 0000 010B 	printf("\r\nLCD_test");
000275 940e 09ee 	CALL __SAVELOCR4
                 ;	j -> R17
                 ;	k -> R16
                 ;	rows -> R19
                 ;	cols -> R18
000277 e032      	LDI  R19,2
000278 e120      	LDI  R18,16
                +
000279 eaec     +LDI R30 , LOW ( 2 * _0x0 + 84 )
00027a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 84 )
                 	__POINTW1FN _0x0,84
00027b 940e 079a 	CALL SUBOPT_0xF
00027d 9622      	ADIW R28,2
                 ; 0000 010C 	lcd_init(cols);
00027e 932a      	ST   -Y,R18
00027f 940e 06e7 	CALL _lcd_init
                 ; 0000 010D 	lcd_clear();
000281 940e 067a 	CALL _lcd_clear
                 ; 0000 010E 
                 ; 0000 010F 	lcd_gotoxy((cols/2)-3,(rows/2)-1);
000283 2fe2      	MOV  R30,R18
000284 95e6      	LSR  R30
000285 50e3      	SUBI R30,LOW(3)
000286 93ea      	ST   -Y,R30
000287 2fe3      	MOV  R30,R19
000288 95e6      	LSR  R30
000289 50e1      	SUBI R30,LOW(1)
00028a 93ea      	ST   -Y,R30
00028b 940e 0666 	CALL _lcd_gotoxy
                 ; 0000 0110 	lcd_putsf("MEGA16");
                +
00028d ebe7     +LDI R30 , LOW ( 2 * _0x0 + 95 )
00028e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 95 )
                 	__POINTW1FN _0x0,95
00028f 940e 0749 	CALL SUBOPT_0x4
                 ; 0000 0111 	lcd_gotoxy((cols/2)-7,(rows/2));
000291 2fe2      	MOV  R30,R18
000292 95e6      	LSR  R30
000293 50e7      	SUBI R30,LOW(7)
000294 93ea      	ST   -Y,R30
000295 2fe3      	MOV  R30,R19
000296 95e6      	LSR  R30
000297 93ea      	ST   -Y,R30
000298 940e 0666 	CALL _lcd_gotoxy
                 ; 0000 0112 	lcd_putsf("DEVELOPMENT BRD");
                +
00029a ebee     +LDI R30 , LOW ( 2 * _0x0 + 102 )
00029b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 102 )
                 	__POINTW1FN _0x0,102
00029c 940e 0749 	CALL SUBOPT_0x4
                 ; 0000 0113 	delay_ms(1000);
00029e 940e 0781 	CALL SUBOPT_0xC
                 ; 0000 0114 
                 ; 0000 0115 }
0002a0 940e 09f5 	CALL __LOADLOCR4
0002a2 9624      	ADIW R28,4
0002a3 9508      	RET
                 ;
                 ;//_____________________________________________________________________________________
                 ;//Test on board LEDs if LCD is not present
                 ;void led_test()
                 ; 0000 011A {
                 _led_test:
                 ; 0000 011B 	//#LED TEST   :
                 ; 0000 011C 	printf("\r\nLED Test ... ");
                +
0002a4 ecee     +LDI R30 , LOW ( 2 * _0x0 + 118 )
0002a5 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 118 )
                 	__POINTW1FN _0x0,118
0002a6 940e 079a 	CALL SUBOPT_0xF
0002a8 9622      	ADIW R28,2
                 ; 0000 011D 	i = 1;
0002a9 940e 07a5 	CALL SUBOPT_0x12
                 ; 0000 011E 	for(i=1;i<0x0100;)
0002ab 940e 07a5 	CALL SUBOPT_0x12
                 _0x77:
0002ad 940e 07ac 	CALL SUBOPT_0x13
0002af 30a0      	CPI  R26,LOW(0x100)
0002b0 e0e1      	LDI  R30,HIGH(0x100)
0002b1 07be      	CPC  R27,R30
0002b2 f470      	BRSH _0x78
                 ; 0000 011F 	{
                 ; 0000 0120 		PORTB=(unsigned char)i;
0002b3 91e0 0267 	LDS  R30,_i
0002b5 bbe8      	OUT  0x18,R30
                 ; 0000 0121 		delay_ms(200);
0002b6 ece8      	LDI  R30,LOW(200)
0002b7 e0f0      	LDI  R31,HIGH(200)
0002b8 940e 0740 	CALL SUBOPT_0x2
                 ; 0000 0122 		i = i<<1;
0002ba 940e 0762 	CALL SUBOPT_0x7
0002bc 0fee      	LSL  R30
0002bd 1fff      	ROL  R31
0002be 940e 07b1 	CALL SUBOPT_0x14
                 ; 0000 0123 	}
0002c0 cfec      	RJMP _0x77
                 _0x78:
                 ; 0000 0124    PORTB=0x00;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 bbe8      	OUT  0x18,R30
                 ; 0000 0125 	printf(" done");
0002c3 940e 07a2 	CALL SUBOPT_0x11
0002c5 940c 0678 	JMP  _0x20C0004
                 ; 0000 0126 }
                 ;
                 ;//_____________________________________________________________________________________
                 ;//Test the ADC.
                 ;void adc_test()
                 ; 0000 012B {
                 _adc_test:
                 ; 0000 012C 	//#ADC test
                 ; 0000 012D 	printf("\r\nADC Test ...");
                +
0002c7 edee     +LDI R30 , LOW ( 2 * _0x0 + 134 )
0002c8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 134 )
                 	__POINTW1FN _0x0,134
0002c9 940e 079a 	CALL SUBOPT_0xF
0002cb 9622      	ADIW R28,2
                 ; 0000 012E 
                 ; 0000 012F 	//this will read input voltage on each ADC port, 3 times, and will output it.
                 ; 0000 0130 	for(j=0;j<3;j++)
0002cc 2466      	CLR  R6
                 _0x7A:
0002cd e0e3      	LDI  R30,LOW(3)
0002ce 166e      	CP   R6,R30
0002cf f010      	BRLO PC+3
0002d0 940c 031c 	JMP _0x7B
                 ; 0000 0131 	{
                 ; 0000 0132 		for(i=0;i<6;i++)
0002d2 e0e0      	LDI  R30,LOW(0)
0002d3 e0f0      	LDI  R31,HIGH(0)
0002d4 940e 07b1 	CALL SUBOPT_0x14
                 _0x7D:
0002d6 940e 07ac 	CALL SUBOPT_0x13
0002d8 9716      	SBIW R26,6
0002d9 f5b8      	BRSH _0x7E
                 ; 0000 0133 		{
                 ; 0000 0134 			adc_val = read_adc(i);
0002da 91e0 0267 	LDS  R30,_i
0002dc 93ea      	ST   -Y,R30
0002dd decc      	RCALL _read_adc
0002de 93e0 0269 	STS  _adc_val,R30
                 ; 0000 0135 			adc_volt = (adc_val * 195.3)/10;
0002e0 27ff      	CLR  R31
0002e1 2766      	CLR  R22
0002e2 2777      	CLR  R23
0002e3 940e 0927 	CALL __CDF1
                +
0002e5 ecad     +LDI R26 , LOW ( 0x43434CCD )
0002e6 e4bc     +LDI R27 , HIGH ( 0x43434CCD )
0002e7 e483     +LDI R24 , BYTE3 ( 0x43434CCD )
0002e8 e493     +LDI R25 , BYTE4 ( 0x43434CCD )
                 	__GETD2N 0x43434CCD
0002e9 940e 0955 	CALL __MULF12
0002eb 01df      	MOVW R26,R30
0002ec 01cb      	MOVW R24,R22
                +
0002ed e0e0     +LDI R30 , LOW ( 0x41200000 )
0002ee e0f0     +LDI R31 , HIGH ( 0x41200000 )
0002ef e260     +LDI R22 , BYTE3 ( 0x41200000 )
0002f0 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0002f1 940e 09a3 	CALL __DIVF21
0002f3 e6ab      	LDI  R26,LOW(_adc_volt)
0002f4 e0b2      	LDI  R27,HIGH(_adc_volt)
0002f5 940e 08ee 	CALL __CFD1U
0002f7 93ed      	ST   X+,R30
0002f8 93fc      	ST   X,R31
                 ; 0000 0136 			printf("\r\nCH %d: %03d => %04d mV",i,adc_val,adc_volt);
                +
0002f9 eeed     +LDI R30 , LOW ( 2 * _0x0 + 149 )
0002fa e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 149 )
                 	__POINTW1FN _0x0,149
0002fb 940e 07b6 	CALL SUBOPT_0x15
0002fd 91e0 0269 	LDS  R30,_adc_val
0002ff 27ff      	CLR  R31
000300 2766      	CLR  R22
000301 2777      	CLR  R23
000302 940e 08bc 	CALL __PUTPARD1
000304 91e0 026b 	LDS  R30,_adc_volt
000306 91f0 026c 	LDS  R31,_adc_volt+1
000308 940e 0744 	CALL SUBOPT_0x3
00030a e08c      	LDI  R24,12
00030b 940e 05b3 	CALL _printf
00030d 962e      	ADIW R28,14
                 ; 0000 0137 		}
00030e 940e 0779 	CALL SUBOPT_0xB
000310 cfc5      	RJMP _0x7D
                 _0x7E:
                 ; 0000 0138 		delay_ms(500);
000311 efe4      	LDI  R30,LOW(500)
000312 e0f1      	LDI  R31,HIGH(500)
000313 940e 0740 	CALL SUBOPT_0x2
                 ; 0000 0139 		printf("\r\n");
                +
000315 e0e6     +LDI R30 , LOW ( 2 * _0x0 + 174 )
000316 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 174 )
                 	__POINTW1FN _0x0,174
000317 940e 079a 	CALL SUBOPT_0xF
000319 9622      	ADIW R28,2
                 ; 0000 013A 	}
00031a 9463      	INC  R6
00031b cfb1      	RJMP _0x7A
                 _0x7B:
                 ; 0000 013B 
                 ; 0000 013C    printf("\r\n\n# DONE.");
                +
00031c e0e9     +LDI R30 , LOW ( 2 * _0x0 + 177 )
00031d e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 177 )
                 	__POINTW1FN _0x0,177
00031e 940e 079a 	CALL SUBOPT_0xF
000320 940c 0678 	JMP  _0x20C0004
                 ; 0000 013D }
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;//Infrared remote test ..
                 ;//This routine will call above functions based on a keyPress
                 ;void ir_test()
                 ; 0000 0144 {
                 _ir_test:
                 ; 0000 0145 	printf("\r\n\n Now press keys on remote\r\n");
                +
000322 e1e4     +LDI R30 , LOW ( 2 * _0x0 + 188 )
000323 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 188 )
                 	__POINTW1FN _0x0,188
000324 940e 079a 	CALL SUBOPT_0xF
000326 9622      	ADIW R28,2
                 ; 0000 0146 	if(lcdPresent)
000327 91e0 026a 	LDS  R30,_lcdPresent
000329 30e0      	CPI  R30,0
00032a f031      	BREQ _0x7F
                 ; 0000 0147 	{
                 ; 0000 0148 		lcd_clear();
00032b 940e 067a 	CALL _lcd_clear
                 ; 0000 0149 		lcd_putsf("Press remote keys");
                +
00032d e3e3     +LDI R30 , LOW ( 2 * _0x0 + 219 )
00032e e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 219 )
                 	__POINTW1FN _0x0,219
00032f 940e 0749 	CALL SUBOPT_0x4
                 ; 0000 014A 	}
                 ; 0000 014B 
                 ; 0000 014C 	while(1)
                 _0x7F:
                 _0x80:
                 ; 0000 014D 	{
                 ; 0000 014E 		i = getKeyIR();
000331 de29      	RCALL _getKeyIR
000332 e0f0      	LDI  R31,0
000333 940e 07b1 	CALL SUBOPT_0x14
                 ; 0000 014F 		printf("\r\n\nKey : %d ",i);
                +
000335 e4e5     +LDI R30 , LOW ( 2 * _0x0 + 237 )
000336 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 237 )
                 	__POINTW1FN _0x0,237
000337 940e 07b6 	CALL SUBOPT_0x15
000339 e084      	LDI  R24,4
00033a 940e 05b3 	CALL _printf
00033c 9626      	ADIW R28,6
                 ; 0000 0150 		if(lcdPresent)
00033d 91e0 026a 	LDS  R30,_lcdPresent
00033f 30e0      	CPI  R30,0
000340 f051      	BREQ _0x83
                 ; 0000 0151 		{
                 ; 0000 0152 			lcd_clear();
000341 940e 067a 	CALL _lcd_clear
                 ; 0000 0153 			display_num(0,0,i);
000343 e0e0      	LDI  R30,LOW(0)
000344 93ea      	ST   -Y,R30
000345 93ea      	ST   -Y,R30
000346 940e 0762 	CALL SUBOPT_0x7
000348 93fa      	ST   -Y,R31
000349 93ea      	ST   -Y,R30
00034a de69      	RCALL _display_num
                 ; 0000 0154 		}
                 ; 0000 0155 
                 ; 0000 0156 		//Process the keys ...
                 ; 0000 0157 		switch(i)
                 _0x83:
00034b 940e 0762 	CALL SUBOPT_0x7
                 ; 0000 0158 		{
                 ; 0000 0159 			//Key 0: Execute LCD test
                 ; 0000 015A 			case 0:
00034d 9730      	SBIW R30,0
00034e f411      	BRNE _0x87
                 ; 0000 015B 					lcd_test();
00034f df25      	RCALL _lcd_test
                 ; 0000 015C 					break;
000350 c023      	RJMP _0x86
                 ; 0000 015D 
                 ; 0000 015E 			//Key 1: L293D 1 test
                 ; 0000 015F 			case 1:
                 _0x87:
000351 30e1      	CPI  R30,LOW(0x1)
000352 e0a0      	LDI  R26,HIGH(0x1)
000353 07fa      	CPC  R31,R26
000354 f411      	BRNE _0x88
                 ; 0000 0160 					l293d1_test();
000355 dee9      	RCALL _l293d1_test
                 ; 0000 0161 					break;
000356 c01d      	RJMP _0x86
                 ; 0000 0162 
                 ; 0000 0163 			//Key 2: L293D 2 test
                 ; 0000 0164 			case 2:
                 _0x88:
000357 30e2      	CPI  R30,LOW(0x2)
000358 e0a0      	LDI  R26,HIGH(0x2)
000359 07fa      	CPC  R31,R26
00035a f411      	BRNE _0x89
                 ; 0000 0165 					l293d2_test();
00035b defc      	RCALL _l293d2_test
                 ; 0000 0166 					break;
00035c c017      	RJMP _0x86
                 ; 0000 0167 
                 ; 0000 0168 			//Key 3: ADC Test
                 ; 0000 0169 			case 3:
                 _0x89:
00035d 30e3      	CPI  R30,LOW(0x3)
00035e e0a0      	LDI  R26,HIGH(0x3)
00035f 07fa      	CPC  R31,R26
000360 f411      	BRNE _0x8A
                 ; 0000 016A 					adc_test();
000361 df65      	RCALL _adc_test
                 ; 0000 016B 					break;
000362 c011      	RJMP _0x86
                 ; 0000 016C 
                 ; 0000 016D 			//Key 4 : LED test
                 ; 0000 016E 			case 4:
                 _0x8A:
000363 30e4      	CPI  R30,LOW(0x4)
000364 e0a0      	LDI  R26,HIGH(0x4)
000365 07fa      	CPC  R31,R26
000366 f411      	BRNE _0x8B
                 ; 0000 016F 					led_test();
000367 df3c      	RCALL _led_test
                 ; 0000 0170 					break;
000368 c00b      	RJMP _0x86
                 ; 0000 0171 
                 ; 0000 0172 			//Key 5: I2C test without LCD
                 ; 0000 0173 			case 5:
                 _0x8B:
000369 30e5      	CPI  R30,LOW(0x5)
00036a e0a0      	LDI  R26,HIGH(0x5)
00036b 07fa      	CPC  R31,R26
00036c f411      	BRNE _0x8C
                 ; 0000 0174 					i2c_test();
00036d dea9      	RCALL _i2c_test
                 ; 0000 0175 					break;
00036e c005      	RJMP _0x86
                 ; 0000 0176 
                 ; 0000 0177 			//Key 6: I2C test with LCD
                 ; 0000 0178 			case 6:
                 _0x8C:
00036f 30e6      	CPI  R30,LOW(0x6)
000370 e0a0      	LDI  R26,HIGH(0x6)
000371 07fa      	CPC  R31,R26
000372 f409      	BRNE _0x8E
                 ; 0000 0179 					i2c_test_withLCD();
000373 de68      	RCALL _i2c_test_withLCD
                 ; 0000 017A 					break;
                 ; 0000 017B 			default:
                 _0x8E:
                 ; 0000 017C 					break;
                 ; 0000 017D 		}
                 _0x86:
                 ; 0000 017E 	};
000374 cfbc      	RJMP _0x80
                 ; 0000 017F }
                 ;
                 ;
                 ;//_____________________________________________________________________________________
                 ;void main(void)
                 ; 0000 0184 {
                 _main:
                 ; 0000 0185 // Declare your local variables here
                 ; 0000 0186 
                 ; 0000 0187 
                 ; 0000 0188 
                 ; 0000 0189 //disable watchdog
                 ; 0000 018A WDTCR = 0b00011000;
000375 e1e8      	LDI  R30,LOW(24)
000376 bde1      	OUT  0x21,R30
                 ; 0000 018B WDTCR = 0b00010000;
000377 e1e0      	LDI  R30,LOW(16)
000378 bde1      	OUT  0x21,R30
                 ; 0000 018C 
                 ; 0000 018D 
                 ; 0000 018E 
                 ; 0000 018F 
                 ; 0000 0190 // Input/Output Ports initialization
                 ; 0000 0191 // Port A initialization
                 ; 0000 0192 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0193 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0194 PORTA=0x00;
000379 e0e0      	LDI  R30,LOW(0)
00037a bbeb      	OUT  0x1B,R30
                 ; 0000 0195 DDRA=0x00;
00037b bbea      	OUT  0x1A,R30
                 ; 0000 0196 
                 ; 0000 0197 // Port B initialization
                 ; 0000 0198 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0199 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0                                                                            PORTB=0x00;
                 ; 0000 019A DDRB=0xFF;
00037c efef      	LDI  R30,LOW(255)
00037d bbe7      	OUT  0x17,R30
                 ; 0000 019B 
                 ; 0000 019C // Port C initialization
                 ; 0000 019D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 019E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 019F PORTC=0x00;
00037e e0e0      	LDI  R30,LOW(0)
00037f bbe5      	OUT  0x15,R30
                 ; 0000 01A0 DDRC=0x00;
000380 bbe4      	OUT  0x14,R30
                 ; 0000 01A1 
                 ; 0000 01A2 // Port D initialization
                 ; 0000 01A3 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
                 ; 0000 01A4 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
                 ; 0000 01A5 PORTD=0x00;
000381 bbe2      	OUT  0x12,R30
                 ; 0000 01A6 DDRD=0xFC;
000382 efec      	LDI  R30,LOW(252)
000383 bbe1      	OUT  0x11,R30
                 ; 0000 01A7 
                 ; 0000 01A8 // Timer/Counter 0 initialization
                 ; 0000 01A9 // Clock source: System Clock
                 ; 0000 01AA // Clock value: Timer 0 Stopped
                 ; 0000 01AB // Mode: Normal top=FFh
                 ; 0000 01AC // OC0 output: Disconnected
                 ; 0000 01AD TCCR0=0x00;
000384 e0e0      	LDI  R30,LOW(0)
000385 bfe3      	OUT  0x33,R30
                 ; 0000 01AE TCNT0=0x00;
000386 bfe2      	OUT  0x32,R30
                 ; 0000 01AF OCR0=0x00;
000387 bfec      	OUT  0x3C,R30
                 ; 0000 01B0 
                 ; 0000 01B1 
                 ; 0000 01B2 // Timer/Counter 1 initialization
                 ; 0000 01B3 // Clock source: System Clock
                 ; 0000 01B4 // Clock value: 15.625 kHz
                 ; 0000 01B5 // Mode: Normal top=FFFFh
                 ; 0000 01B6 // OC1A output: Discon.
                 ; 0000 01B7 // OC1B output: Discon.
                 ; 0000 01B8 // Noise Canceler: Off
                 ; 0000 01B9 // Input Capture on Falling Edge
                 ; 0000 01BA // Timer 1 Overflow Interrupt: On
                 ; 0000 01BB // Input Capture Interrupt: Off
                 ; 0000 01BC // Compare A Match Interrupt: Off
                 ; 0000 01BD // Compare B Match Interrupt: Off
                 ; 0000 01BE TCCR1A=0x00;
000388 bdef      	OUT  0x2F,R30
                 ; 0000 01BF TCCR1B=0x05;
000389 e0e5      	LDI  R30,LOW(5)
00038a bdee      	OUT  0x2E,R30
                 ; 0000 01C0 TCNT1H=0x00;
00038b e0e0      	LDI  R30,LOW(0)
00038c bded      	OUT  0x2D,R30
                 ; 0000 01C1 TCNT1L=0x00;
00038d bdec      	OUT  0x2C,R30
                 ; 0000 01C2 ICR1H=0x00;
00038e bde7      	OUT  0x27,R30
                 ; 0000 01C3 ICR1L=0x00;
00038f bde6      	OUT  0x26,R30
                 ; 0000 01C4 OCR1AH=0x00;
000390 bdeb      	OUT  0x2B,R30
                 ; 0000 01C5 OCR1AL=0x00;
000391 bdea      	OUT  0x2A,R30
                 ; 0000 01C6 OCR1BH=0x00;
000392 bde9      	OUT  0x29,R30
                 ; 0000 01C7 OCR1BL=0x00;
000393 bde8      	OUT  0x28,R30
                 ; 0000 01C8 
                 ; 0000 01C9 // Timer/Counter 2 initialization
                 ; 0000 01CA // Clock source: System Clock
                 ; 0000 01CB // Clock value: Timer 2 Stopped
                 ; 0000 01CC // Mode: Normal top=FFh
                 ; 0000 01CD // OC2 output: Disconnected
                 ; 0000 01CE ASSR=0x00;
000394 bde2      	OUT  0x22,R30
                 ; 0000 01CF TCCR2=0x00;
000395 bde5      	OUT  0x25,R30
                 ; 0000 01D0 TCNT2=0x00;
000396 bde4      	OUT  0x24,R30
                 ; 0000 01D1 OCR2=0x00;
000397 bde3      	OUT  0x23,R30
                 ; 0000 01D2 
                 ; 0000 01D3 // External Interrupt(s) initialization
                 ; 0000 01D4 // INT0: Off
                 ; 0000 01D5 // INT1: Off
                 ; 0000 01D6 // INT2: Off
                 ; 0000 01D7 MCUCR=0x00;
000398 bfe5      	OUT  0x35,R30
                 ; 0000 01D8 MCUCSR=0x00;
000399 bfe4      	OUT  0x34,R30
                 ; 0000 01D9 
                 ; 0000 01DA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 01DB TIMSK=0x04;
00039a e0e4      	LDI  R30,LOW(4)
00039b bfe9      	OUT  0x39,R30
                 ; 0000 01DC 
                 ; 0000 01DD // USART initialization
                 ; 0000 01DE // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 01DF // USART Receiver: On
                 ; 0000 01E0 // USART Transmitter: On
                 ; 0000 01E1 // USART Mode: Asynchronous
                 ; 0000 01E2 // USART Baud rate: 56000
                 ; 0000 01E3 UCSRA=0x00;
00039c e0e0      	LDI  R30,LOW(0)
00039d b9eb      	OUT  0xB,R30
                 ; 0000 01E4 UCSRB=0x18;
00039e e1e8      	LDI  R30,LOW(24)
00039f b9ea      	OUT  0xA,R30
                 ; 0000 01E5 UCSRC=0x86;
0003a0 e8e6      	LDI  R30,LOW(134)
0003a1 bde0      	OUT  0x20,R30
                 ; 0000 01E6 UBRRH=0x00;
0003a2 e0e0      	LDI  R30,LOW(0)
0003a3 bde0      	OUT  0x20,R30
                 ; 0000 01E7 UBRRL=0x11;
0003a4 e1e1      	LDI  R30,LOW(17)
0003a5 b9e9      	OUT  0x9,R30
                 ; 0000 01E8 
                 ; 0000 01E9 
                 ; 0000 01EA 
                 ; 0000 01EB // Analog Comparator initialization
                 ; 0000 01EC // Analog Comparator: Off
                 ; 0000 01ED // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 01EE ACSR=0x80;
0003a6 e8e0      	LDI  R30,LOW(128)
0003a7 b9e8      	OUT  0x8,R30
                 ; 0000 01EF SFIOR=0x00;
0003a8 e0e0      	LDI  R30,LOW(0)
0003a9 bfe0      	OUT  0x30,R30
                 ; 0000 01F0 
                 ; 0000 01F1 // ADC initialization
                 ; 0000 01F2 // ADC Clock frequency: 250.000 kHz
                 ; 0000 01F3 // ADC Voltage Reference: AVCC pin
                 ; 0000 01F4 // ADC Auto Trigger Source: None
                 ; 0000 01F5 // Only the 8 most significant bits of
                 ; 0000 01F6 // the AD conversion result are used
                 ; 0000 01F7 ADMUX=ADC_VREF_TYPE;
0003aa e6e0      	LDI  R30,LOW(96)
0003ab b9e7      	OUT  0x7,R30
                 ; 0000 01F8 ADCSRA=0x86;
0003ac e8e6      	LDI  R30,LOW(134)
0003ad b9e6      	OUT  0x6,R30
                 ; 0000 01F9 
                 ; 0000 01FA //Initialize I2C bus
                 ; 0000 01FB i2c_init();
0003ae 940e 0814 	CALL _i2c_init
                 ; 0000 01FC 
                 ; 0000 01FD // Global enable interrupts
                 ; 0000 01FE #asm("sei")
0003b0 9478      	sei
                 ; 0000 01FF 
                 ; 0000 0200 
                 ; 0000 0201 while (1)
                 ; 0000 0202       {
                 ; 0000 0203 
                 ; 0000 0204 		//#MAX 232 TEST :
                 ; 0000 0205 		printf("\r\n\n\nMega16 development board for project/product/robotics development");
                +
0003b1 e5e2     +LDI R30 , LOW ( 2 * _0x0 + 250 )
0003b2 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 250 )
                 	__POINTW1FN _0x0,250
0003b3 940e 079a 	CALL SUBOPT_0xF
0003b5 9622      	ADIW R28,2
                 ; 0000 0206 
                 ; 0000 0207 
                 ; 0000 0208 		//#Wait for SW0(PC.2) press for LCD detection. If user presses the SW0 within 3 seconds then
                 ; 0000 0209 		//LCD is assumed to be present and LCD test routines will be run and visual feebback will
                 ; 0000 020A 		//be displayed on LCD. If not, then LCD is assumed to be absent.
                 ; 0000 020B 		i=0;
0003b6 e0e0      	LDI  R30,LOW(0)
0003b7 e0f0      	LDI  R31,HIGH(0)
0003b8 940e 07b1 	CALL SUBOPT_0x14
                 ; 0000 020C 		DDRC.2=0; 				//set 2nd bit of PC as input bit
0003ba 98a2      	CBI  0x14,2
                 ; 0000 020D 		PORTC.2=1;				//turn on internal pull-up for that bit
0003bb 9aaa      	SBI  0x15,2
                 ; 0000 020E 		while(i<3000)
                 _0x96:
0003bc 940e 07ac 	CALL SUBOPT_0x13
0003be 3ba8      	CPI  R26,LOW(0xBB8)
0003bf e0eb      	LDI  R30,HIGH(0xBB8)
0003c0 07be      	CPC  R27,R30
0003c1 f480      	BRSH _0x98
                 ; 0000 020F 		{
                 ; 0000 0210 			if(PINC.2==0)
0003c2 999a      	SBIC 0x13,2
0003c3 c004      	RJMP _0x99
                 ; 0000 0211 			{
                 ; 0000 0212 				lcdPresent = 1;
0003c4 e0e1      	LDI  R30,LOW(1)
0003c5 93e0 026a 	STS  _lcdPresent,R30
                 ; 0000 0213 				break;
0003c7 c00a      	RJMP _0x98
                 ; 0000 0214 			}
                 ; 0000 0215 			else
                 _0x99:
                 ; 0000 0216 				lcdPresent = 0;
0003c8 e0e0      	LDI  R30,LOW(0)
0003c9 93e0 026a 	STS  _lcdPresent,R30
                 ; 0000 0217 
                 ; 0000 0218 			i++;
0003cb 940e 0779 	CALL SUBOPT_0xB
                 ; 0000 0219 			delay_ms(1);
0003cd e0e1      	LDI  R30,LOW(1)
0003ce e0f0      	LDI  R31,HIGH(1)
0003cf 940e 0740 	CALL SUBOPT_0x2
                 ; 0000 021A 		};
0003d1 cfea      	RJMP _0x96
                 _0x98:
                 ; 0000 021B 
                 ; 0000 021C       if(lcdPresent==1)
0003d2 91a0 026a 	LDS  R26,_lcdPresent
0003d4 30a1      	CPI  R26,LOW(0x1)
0003d5 f419      	BRNE _0x9B
                 ; 0000 021D 			printf("\n\rLCD is assumed to be present.");
                +
0003d6 e9e8     +LDI R30 , LOW ( 2 * _0x0 + 320 )
0003d7 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 320 )
                 	__POINTW1FN _0x0,320
0003d8 c002      	RJMP _0xB5
                 ; 0000 021E 		else
                 _0x9B:
                 ; 0000 021F 			printf("\n\rLCD is assumed to be absent.");
                +
0003d9 ebe8     +LDI R30 , LOW ( 2 * _0x0 + 352 )
0003da e0f1     +LDI R31 , HIGH ( 2 * _0x0 + 352 )
                 	__POINTW1FN _0x0,352
                 _0xB5:
0003db 93fa      	ST   -Y,R31
0003dc 93ea      	ST   -Y,R30
0003dd e080      	LDI  R24,0
0003de 940e 05b3 	CALL _printf
0003e0 9622      	ADIW R28,2
                 ; 0000 0220 
                 ; 0000 0221 
                 ; 0000 0222 		//# If LCD is present ... initialize the LCD and display message and execute test routines
                 ; 0000 0223 		if(lcdPresent==1)
0003e1 91a0 026a 	LDS  R26,_lcdPresent
0003e3 30a1      	CPI  R26,LOW(0x1)
0003e4 f499      	BRNE _0x9D
                 ; 0000 0224 		{
                 ; 0000 0225        	//Initialize and test LCD
                 ; 0000 0226 			lcd_test();
0003e5 de8f      	RCALL _lcd_test
                 ; 0000 0227 
                 ; 0000 0228 			//EEPROM test
                 ; 0000 0229          while(PINC.2==0){delay_ms(100);};
                 _0x9E:
0003e6 999a      	SBIC 0x13,2
0003e7 c003      	RJMP _0xA0
0003e8 940e 07ba 	CALL SUBOPT_0x16
0003ea cffb      	RJMP _0x9E
                 _0xA0:
                 ; 0000 022A          i2c_test_withLCD();
0003eb ddf0      	RCALL _i2c_test_withLCD
                 ; 0000 022B 
                 ; 0000 022C          //Wait for SW0 press - Test the L293D
                 ; 0000 022D          while(PINC.2==0){delay_ms(100);};
                 _0xA1:
0003ec 999a      	SBIC 0x13,2
0003ed c003      	RJMP _0xA3
0003ee 940e 07ba 	CALL SUBOPT_0x16
0003f0 cffb      	RJMP _0xA1
                 _0xA3:
                 ; 0000 022E 			l293d1_test();
0003f1 de4d      	RCALL _l293d1_test
                 ; 0000 022F 
                 ; 0000 0230 			//Test the ADC
                 ; 0000 0231          while(PINC.2==0){delay_ms(100);};
                 _0xA4:
0003f2 999a      	SBIC 0x13,2
0003f3 c003      	RJMP _0xA6
0003f4 940e 07ba 	CALL SUBOPT_0x16
0003f6 cffb      	RJMP _0xA4
                 _0xA6:
                 ; 0000 0232 			adc_test();
0003f7 c013      	RJMP _0xB6
                 ; 0000 0233 
                 ; 0000 0234 			//Now wait for key press on IR remote. And execute test routines according to remote key press.
                 ; 0000 0235 			ir_test();
                 ; 0000 0236 		}
                 ; 0000 0237 
                 ; 0000 0238 		//# If LCD is absent we can also test 2nd L293D which is connected on PORTB.
                 ; 0000 0239 		else
                 _0x9D:
                 ; 0000 023A 		{
                 ; 0000 023B        	//LED test
                 ; 0000 023C          led_test();
0003f8 deab      	RCALL _led_test
                 ; 0000 023D 
                 ; 0000 023E 			//EEPROM test
                 ; 0000 023F          while(PINC.2==0){delay_ms(100);};
                 _0xA8:
0003f9 999a      	SBIC 0x13,2
0003fa c003      	RJMP _0xAA
0003fb 940e 07ba 	CALL SUBOPT_0x16
0003fd cffb      	RJMP _0xA8
                 _0xAA:
                 ; 0000 0240          i2c_test();
0003fe de18      	RCALL _i2c_test
                 ; 0000 0241 
                 ; 0000 0242          //Wait for SW0 press - Test the L293D
                 ; 0000 0243          while(PINC.2==0){delay_ms(100);};
                 _0xAB:
0003ff 999a      	SBIC 0x13,2
000400 c003      	RJMP _0xAD
000401 940e 07ba 	CALL SUBOPT_0x16
000403 cffb      	RJMP _0xAB
                 _0xAD:
                 ; 0000 0244 			l293d1_test();
000404 de3a      	RCALL _l293d1_test
                 ; 0000 0245          l293d2_test();
000405 de52      	RCALL _l293d2_test
                 ; 0000 0246 
                 ; 0000 0247 			//Test the ADC
                 ; 0000 0248          while(PINC.2==0){delay_ms(100);};
                 _0xAE:
000406 999a      	SBIC 0x13,2
000407 c003      	RJMP _0xB0
000408 940e 07ba 	CALL SUBOPT_0x16
00040a cffb      	RJMP _0xAE
                 _0xB0:
                 ; 0000 0249 			adc_test();
                 _0xB6:
00040b debb      	RCALL _adc_test
                 ; 0000 024A 
                 ; 0000 024B 			//Now wait for key press on IR remote. And execute test routines according to remote key press.
                 ; 0000 024C 			ir_test();
00040c df15      	RCALL _ir_test
                 ; 0000 024D 		}
                 ; 0000 024E 
                 ; 0000 024F 		while(1);
                 _0xB1:
00040d cfff      	RJMP _0xB1
                 ; 0000 0250 
                 ; 0000 0251       };
                 ; 0000 0252 }
                 _0xB4:
00040e cfff      	RJMP _0xB4
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
00040f 9b5d           sbis usr,udre
000410 cffe           rjmp _putchar
000411 81e8           ld   r30,y
000412 b9ec           out  udr,r30
000413 940c 071a 	JMP  _0x20C0001
                 __put_G100:
000415 931a      	ST   -Y,R17
000416 930a      	ST   -Y,R16
000417 81ac      	LDD  R26,Y+4
000418 81bd      	LDD  R27,Y+4+1
000419 940e 08b2 	CALL __GETW1P
00041b 9730      	SBIW R30,0
00041c f0d9      	BREQ _0x2000010
00041d 81aa      	LDD  R26,Y+2
00041e 81bb      	LDD  R27,Y+2+1
00041f 940e 08b2 	CALL __GETW1P
000421 018f      	MOVW R16,R30
000422 9730      	SBIW R30,0
000423 f049      	BREQ _0x2000012
                +
000424 3002     +CPI R16 , LOW ( 2 )
000425 e0e0     +LDI R30 , HIGH ( 2 )
000426 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000427 f078      	BRLO _0x2000013
000428 01f8      	MOVW R30,R16
000429 9731      	SBIW R30,1
00042a 018f      	MOVW R16,R30
00042b 93ed      	ST   X+,R30
00042c 93fc      	ST   X,R31
                 _0x2000012:
00042d 81ac      	LDD  R26,Y+4
00042e 81bd      	LDD  R27,Y+4+1
00042f 91ed      	LD   R30,X+
000430 91fd      	LD   R31,X+
000431 9631      	ADIW R30,1
000432 93fe      	ST   -X,R31
000433 93ee      	ST   -X,R30
000434 9731      	SBIW R30,1
000435 81ae      	LDD  R26,Y+6
000436 83a0      	STD  Z+0,R26
                 _0x2000013:
000437 c003      	RJMP _0x2000014
                 _0x2000010:
000438 81ee      	LDD  R30,Y+6
000439 93ea      	ST   -Y,R30
00043a dfd4      	RCALL _putchar
                 _0x2000014:
00043b 8119      	LDD  R17,Y+1
00043c 8108      	LDD  R16,Y+0
00043d 9627      	ADIW R28,7
00043e 9508      	RET
                 __print_G100:
00043f 972b      	SBIW R28,11
000440 940e 09ec 	CALL __SAVELOCR6
000442 e010      	LDI  R17,0
                 _0x2000015:
000443 89ef      	LDD  R30,Y+23
000444 8df8      	LDD  R31,Y+23+1
000445 9631      	ADIW R30,1
000446 8bef      	STD  Y+23,R30
000447 8ff8      	STD  Y+23+1,R31
000448 9731      	SBIW R30,1
000449 91e4      	LPM  R30,Z
00044a 2f2e      	MOV  R18,R30
00044b 30e0      	CPI  R30,0
00044c f411      	BRNE PC+3
00044d 940c 05af 	JMP _0x2000017
00044f 2fe1      	MOV  R30,R17
000450 30e0      	CPI  R30,0
000451 f439      	BRNE _0x200001B
000452 3225      	CPI  R18,37
000453 f411      	BRNE _0x200001C
000454 e011      	LDI  R17,LOW(1)
000455 c002      	RJMP _0x200001D
                 _0x200001C:
000456 940e 07bd 	CALL SUBOPT_0x17
                 _0x200001D:
000458 c155      	RJMP _0x200001A
                 _0x200001B:
000459 30e1      	CPI  R30,LOW(0x1)
00045a f4a9      	BRNE _0x200001E
00045b 3225      	CPI  R18,37
00045c f419      	BRNE _0x200001F
00045d 940e 07bd 	CALL SUBOPT_0x17
00045f c14d      	RJMP _0x20000C2
                 _0x200001F:
000460 e012      	LDI  R17,LOW(2)
000461 e040      	LDI  R20,LOW(0)
000462 e000      	LDI  R16,LOW(0)
000463 322d      	CPI  R18,45
000464 f411      	BRNE _0x2000020
000465 e001      	LDI  R16,LOW(1)
000466 c147      	RJMP _0x200001A
                 _0x2000020:
000467 322b      	CPI  R18,43
000468 f411      	BRNE _0x2000021
000469 e24b      	LDI  R20,LOW(43)
00046a c143      	RJMP _0x200001A
                 _0x2000021:
00046b 3220      	CPI  R18,32
00046c f411      	BRNE _0x2000022
00046d e240      	LDI  R20,LOW(32)
00046e c13f      	RJMP _0x200001A
                 _0x2000022:
00046f c002      	RJMP _0x2000023
                 _0x200001E:
000470 30e2      	CPI  R30,LOW(0x2)
000471 f439      	BRNE _0x2000024
                 _0x2000023:
000472 e050      	LDI  R21,LOW(0)
000473 e013      	LDI  R17,LOW(3)
000474 3320      	CPI  R18,48
000475 f411      	BRNE _0x2000025
000476 6800      	ORI  R16,LOW(128)
000477 c136      	RJMP _0x200001A
                 _0x2000025:
000478 c002      	RJMP _0x2000026
                 _0x2000024:
000479 30e3      	CPI  R30,LOW(0x3)
00047a f4a1      	BRNE _0x2000027
                 _0x2000026:
00047b 3320      	CPI  R18,48
00047c f010      	BRLO _0x2000029
00047d 332a      	CPI  R18,58
00047e f008      	BRLO _0x200002A
                 _0x2000029:
00047f c009      	RJMP _0x2000028
                 _0x200002A:
000480 2fa5      	MOV  R26,R21
000481 e0ea      	LDI  R30,LOW(10)
000482 9fea      	MUL  R30,R26
000483 01f0      	MOVW R30,R0
000484 2f5e      	MOV  R21,R30
000485 2fe2      	MOV  R30,R18
000486 53e0      	SUBI R30,LOW(48)
000487 0f5e      	ADD  R21,R30
000488 c125      	RJMP _0x200001A
                 _0x2000028:
000489 362c      	CPI  R18,108
00048a f419      	BRNE _0x200002B
00048b 6002      	ORI  R16,LOW(2)
00048c e015      	LDI  R17,LOW(5)
00048d c120      	RJMP _0x200001A
                 _0x200002B:
00048e c004      	RJMP _0x200002C
                 _0x2000027:
00048f 30e5      	CPI  R30,LOW(0x5)
000490 f011      	BREQ PC+3
000491 940c 05ae 	JMP _0x200001A
                 _0x200002C:
000493 2fe2      	MOV  R30,R18
000494 36e3      	CPI  R30,LOW(0x63)
000495 f449      	BRNE _0x2000031
000496 940e 07c8 	CALL SUBOPT_0x18
000498 89ed      	LDD  R30,Y+21
000499 89fe      	LDD  R31,Y+21+1
00049a 81a4      	LDD  R26,Z+4
00049b 93aa      	ST   -Y,R26
00049c 940e 07ce 	CALL SUBOPT_0x19
00049e c10e      	RJMP _0x2000032
                 _0x2000031:
00049f 37e3      	CPI  R30,LOW(0x73)
0004a0 f441      	BRNE _0x2000034
0004a1 940e 07c8 	CALL SUBOPT_0x18
0004a3 940e 07d8 	CALL SUBOPT_0x1A
0004a5 940e 071c 	CALL _strlen
0004a7 2f1e      	MOV  R17,R30
0004a8 c00a      	RJMP _0x2000035
                 _0x2000034:
0004a9 37e0      	CPI  R30,LOW(0x70)
0004aa f469      	BRNE _0x2000037
0004ab 940e 07c8 	CALL SUBOPT_0x18
0004ad 940e 07d8 	CALL SUBOPT_0x1A
0004af 940e 0726 	CALL _strlenf
0004b1 2f1e      	MOV  R17,R30
0004b2 6008      	ORI  R16,LOW(8)
                 _0x2000035:
0004b3 770f      	ANDI R16,LOW(127)
0004b4 e0e0      	LDI  R30,LOW(0)
0004b5 8be8      	STD  Y+16,R30
0004b6 e030      	LDI  R19,LOW(0)
0004b7 c06f      	RJMP _0x2000038
                 _0x2000037:
0004b8 36e4      	CPI  R30,LOW(0x64)
0004b9 f011      	BREQ _0x200003B
0004ba 36e9      	CPI  R30,LOW(0x69)
0004bb f411      	BRNE _0x200003C
                 _0x200003B:
0004bc 6004      	ORI  R16,LOW(4)
0004bd c002      	RJMP _0x200003D
                 _0x200003C:
0004be 37e5      	CPI  R30,LOW(0x75)
0004bf f4a1      	BRNE _0x200003E
                 _0x200003D:
0004c0 e0ea      	LDI  R30,LOW(10)
0004c1 8be8      	STD  Y+16,R30
0004c2 ff01      	SBRS R16,1
0004c3 c008      	RJMP _0x200003F
                +
0004c4 e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0004c5 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0004c6 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0004c7 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0004c8 940e 07e2 	CALL SUBOPT_0x1B
0004ca e01a      	LDI  R17,LOW(10)
0004cb c023      	RJMP _0x2000040
                 _0x200003F:
                +
0004cc e1e0     +LDI R30 , LOW ( 0x2710 )
0004cd e2f7     +LDI R31 , HIGH ( 0x2710 )
0004ce e060     +LDI R22 , BYTE3 ( 0x2710 )
0004cf e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0004d0 940e 07e2 	CALL SUBOPT_0x1B
0004d2 e015      	LDI  R17,LOW(5)
0004d3 c01b      	RJMP _0x2000040
                 _0x200003E:
0004d4 35e8      	CPI  R30,LOW(0x58)
0004d5 f411      	BRNE _0x2000042
0004d6 6008      	ORI  R16,LOW(8)
0004d7 c004      	RJMP _0x2000043
                 _0x2000042:
0004d8 37e8      	CPI  R30,LOW(0x78)
0004d9 f011      	BREQ PC+3
0004da 940c 05ad 	JMP _0x2000076
                 _0x2000043:
0004dc e1e0      	LDI  R30,LOW(16)
0004dd 8be8      	STD  Y+16,R30
0004de ff01      	SBRS R16,1
0004df c008      	RJMP _0x2000045
                +
0004e0 e0e0     +LDI R30 , LOW ( 0x10000000 )
0004e1 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0004e2 e060     +LDI R22 , BYTE3 ( 0x10000000 )
0004e3 e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0004e4 940e 07e2 	CALL SUBOPT_0x1B
0004e6 e018      	LDI  R17,LOW(8)
0004e7 c007      	RJMP _0x2000040
                 _0x2000045:
                +
0004e8 e0e0     +LDI R30 , LOW ( 0x1000 )
0004e9 e1f0     +LDI R31 , HIGH ( 0x1000 )
0004ea e060     +LDI R22 , BYTE3 ( 0x1000 )
0004eb e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0004ec 940e 07e2 	CALL SUBOPT_0x1B
0004ee e014      	LDI  R17,LOW(4)
                 _0x2000040:
0004ef ff01      	SBRS R16,1
0004f0 c008      	RJMP _0x2000046
0004f1 940e 07c8 	CALL SUBOPT_0x18
0004f3 89ad      	LDD  R26,Y+21
0004f4 89be      	LDD  R27,Y+21+1
0004f5 9614      	ADIW R26,4
0004f6 940e 08b6 	CALL __GETD1P
0004f8 c015      	RJMP _0x20000C3
                 _0x2000046:
0004f9 ff02      	SBRS R16,2
0004fa c00a      	RJMP _0x2000048
0004fb 940e 07c8 	CALL SUBOPT_0x18
0004fd 89ad      	LDD  R26,Y+21
0004fe 89be      	LDD  R27,Y+21+1
0004ff 9614      	ADIW R26,4
000500 940e 08b2 	CALL __GETW1P
000502 940e 0884 	CALL __CWD1
000504 c009      	RJMP _0x20000C3
                 _0x2000048:
000505 940e 07c8 	CALL SUBOPT_0x18
000507 89ad      	LDD  R26,Y+21
000508 89be      	LDD  R27,Y+21+1
000509 9614      	ADIW R26,4
00050a 940e 08b2 	CALL __GETW1P
00050c 2766      	CLR  R22
00050d 2777      	CLR  R23
                 _0x20000C3:
                +
00050e 87ec     +STD Y + 12 , R30
00050f 87fd     +STD Y + 12 + 1 , R31
000510 876e     +STD Y + 12 + 2 , R22
000511 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000512 ff02      	SBRS R16,2
000513 c013      	RJMP _0x200004A
000514 85af      	LDD  R26,Y+15
000515 23aa      	TST  R26
000516 f45a      	BRPL _0x200004B
                +
000517 85ec     +LDD R30 , Y + 12
000518 85fd     +LDD R31 , Y + 12 + 1
000519 856e     +LDD R22 , Y + 12 + 2
00051a 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00051b 940e 0876 	CALL __ANEGD1
                +
00051d 87ec     +STD Y + 12 , R30
00051e 87fd     +STD Y + 12 + 1 , R31
00051f 876e     +STD Y + 12 + 2 , R22
000520 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000521 e24d      	LDI  R20,LOW(45)
                 _0x200004B:
000522 3040      	CPI  R20,0
000523 f011      	BREQ _0x200004C
000524 5f1f      	SUBI R17,-LOW(1)
000525 c001      	RJMP _0x200004D
                 _0x200004C:
000526 7f0b      	ANDI R16,LOW(251)
                 _0x200004D:
                 _0x200004A:
                 _0x2000038:
000527 fd00      	SBRC R16,0
000528 c011      	RJMP _0x200004E
                 _0x200004F:
000529 1715      	CP   R17,R21
00052a f478      	BRSH _0x2000051
00052b ff07      	SBRS R16,7
00052c c008      	RJMP _0x2000052
00052d ff02      	SBRS R16,2
00052e c004      	RJMP _0x2000053
00052f 7f0b      	ANDI R16,LOW(251)
000530 2f24      	MOV  R18,R20
000531 5011      	SUBI R17,LOW(1)
000532 c001      	RJMP _0x2000054
                 _0x2000053:
000533 e320      	LDI  R18,LOW(48)
                 _0x2000054:
000534 c001      	RJMP _0x2000055
                 _0x2000052:
000535 e220      	LDI  R18,LOW(32)
                 _0x2000055:
000536 940e 07bd 	CALL SUBOPT_0x17
000538 5051      	SUBI R21,LOW(1)
000539 cfef      	RJMP _0x200004F
                 _0x2000051:
                 _0x200004E:
00053a 2f31      	MOV  R19,R17
00053b 89e8      	LDD  R30,Y+16
00053c 30e0      	CPI  R30,0
00053d f4d1      	BRNE _0x2000056
                 _0x2000057:
00053e 3030      	CPI  R19,0
00053f f0b9      	BREQ _0x2000059
000540 ff03      	SBRS R16,3
000541 c008      	RJMP _0x200005A
000542 81ee      	LDD  R30,Y+6
000543 81ff      	LDD  R31,Y+6+1
000544 9631      	ADIW R30,1
000545 83ee      	STD  Y+6,R30
000546 83ff      	STD  Y+6+1,R31
000547 9731      	SBIW R30,1
000548 91e4      	LPM  R30,Z
000549 c005      	RJMP _0x20000C4
                 _0x200005A:
00054a 81ae      	LDD  R26,Y+6
00054b 81bf      	LDD  R27,Y+6+1
00054c 91ed      	LD   R30,X+
00054d 83ae      	STD  Y+6,R26
00054e 83bf      	STD  Y+6+1,R27
                 _0x20000C4:
00054f 93ea      	ST   -Y,R30
000550 940e 07ce 	CALL SUBOPT_0x19
000552 3050      	CPI  R21,0
000553 f009      	BREQ _0x200005C
000554 5051      	SUBI R21,LOW(1)
                 _0x200005C:
000555 5031      	SUBI R19,LOW(1)
000556 cfe7      	RJMP _0x2000057
                 _0x2000059:
000557 c04b      	RJMP _0x200005D
                 _0x2000056:
                 _0x200005F:
000558 940e 07e7 	CALL SUBOPT_0x1C
00055a 940e 0889 	CALL __DIVD21U
00055c 2f2e      	MOV  R18,R30
00055d 302a      	CPI  R18,10
00055e f030      	BRLO _0x2000061
00055f ff03      	SBRS R16,3
000560 c002      	RJMP _0x2000062
000561 5c29      	SUBI R18,-LOW(55)
000562 c001      	RJMP _0x2000063
                 _0x2000062:
000563 5a29      	SUBI R18,-LOW(87)
                 _0x2000063:
000564 c001      	RJMP _0x2000064
                 _0x2000061:
000565 5d20      	SUBI R18,-LOW(48)
                 _0x2000064:
000566 fd04      	SBRC R16,4
000567 c01b      	RJMP _0x2000066
000568 3321      	CPI  R18,49
000569 f428      	BRSH _0x2000068
00056a 940e 07f0 	CALL SUBOPT_0x1D
00056c 940e 07f5 	CALL SUBOPT_0x1E
00056e f409      	BRNE _0x2000067
                 _0x2000068:
00056f c009      	RJMP _0x200006A
                 _0x2000067:
000570 1753      	CP   R21,R19
000571 f010      	BRLO _0x200006C
000572 ff00      	SBRS R16,0
000573 c001      	RJMP _0x200006D
                 _0x200006C:
000574 c013      	RJMP _0x200006B
                 _0x200006D:
000575 e220      	LDI  R18,LOW(32)
000576 ff07      	SBRS R16,7
000577 c00b      	RJMP _0x200006E
000578 e320      	LDI  R18,LOW(48)
                 _0x200006A:
000579 6100      	ORI  R16,LOW(16)
00057a ff02      	SBRS R16,2
00057b c007      	RJMP _0x200006F
00057c 7f0b      	ANDI R16,LOW(251)
00057d 934a      	ST   -Y,R20
00057e 940e 07ce 	CALL SUBOPT_0x19
000580 3050      	CPI  R21,0
000581 f009      	BREQ _0x2000070
000582 5051      	SUBI R21,LOW(1)
                 _0x2000070:
                 _0x200006F:
                 _0x200006E:
                 _0x2000066:
000583 940e 07bd 	CALL SUBOPT_0x17
000585 3050      	CPI  R21,0
000586 f009      	BREQ _0x2000071
000587 5051      	SUBI R21,LOW(1)
                 _0x2000071:
                 _0x200006B:
000588 5031      	SUBI R19,LOW(1)
000589 940e 07e7 	CALL SUBOPT_0x1C
00058b 940e 08ae 	CALL __MODD21U
                +
00058d 87ec     +STD Y + 12 , R30
00058e 87fd     +STD Y + 12 + 1 , R31
00058f 876e     +STD Y + 12 + 2 , R22
000590 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
000591 89e8      	LDD  R30,Y+16
000592 940e 07f0 	CALL SUBOPT_0x1D
000594 27ff      	CLR  R31
000595 2766      	CLR  R22
000596 2777      	CLR  R23
000597 940e 0889 	CALL __DIVD21U
000599 940e 07e2 	CALL SUBOPT_0x1B
                +
00059b 85e8     +LDD R30 , Y + 8
00059c 85f9     +LDD R31 , Y + 8 + 1
00059d 856a     +LDD R22 , Y + 8 + 2
00059e 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
00059f 940e 09e8 	CALL __CPD10
0005a1 f009      	BREQ _0x2000060
0005a2 cfb5      	RJMP _0x200005F
                 _0x2000060:
                 _0x200005D:
0005a3 ff00      	SBRS R16,0
0005a4 c008      	RJMP _0x2000072
                 _0x2000073:
0005a5 3050      	CPI  R21,0
0005a6 f031      	BREQ _0x2000075
0005a7 5051      	SUBI R21,LOW(1)
0005a8 e2e0      	LDI  R30,LOW(32)
0005a9 93ea      	ST   -Y,R30
0005aa 940e 07ce 	CALL SUBOPT_0x19
0005ac cff8      	RJMP _0x2000073
                 _0x2000075:
                 _0x2000072:
                 _0x2000076:
                 _0x2000032:
                 _0x20000C2:
0005ad e010      	LDI  R17,LOW(0)
                 _0x200001A:
0005ae ce94      	RJMP _0x2000015
                 _0x2000017:
0005af 940e 09f3 	CALL __LOADLOCR6
0005b1 9669      	ADIW R28,25
0005b2 9508      	RET
                 _printf:
0005b3 92ff      	PUSH R15
0005b4 2ef8      	MOV  R15,R24
0005b5 9722      	SBIW R28,2
0005b6 931a      	ST   -Y,R17
0005b7 930a      	ST   -Y,R16
0005b8 01de      	MOVW R26,R28
0005b9 940e 0872 	CALL __ADDW2R15
0005bb 018d      	MOVW R16,R26
0005bc e0e0      	LDI  R30,0
0005bd 83ea      	STD  Y+2,R30
0005be 83eb      	STD  Y+2+1,R30
0005bf 01de      	MOVW R26,R28
0005c0 9614      	ADIW R26,4
0005c1 940e 0872 	CALL __ADDW2R15
0005c3 940e 08b2 	CALL __GETW1P
0005c5 93fa      	ST   -Y,R31
0005c6 93ea      	ST   -Y,R30
0005c7 931a      	ST   -Y,R17
0005c8 930a      	ST   -Y,R16
0005c9 01fe      	MOVW R30,R28
0005ca 9636      	ADIW R30,6
0005cb 93fa      	ST   -Y,R31
0005cc 93ea      	ST   -Y,R30
0005cd e0e0      	LDI  R30,LOW(0)
0005ce e0f0      	LDI  R31,HIGH(0)
0005cf 93fa      	ST   -Y,R31
0005d0 93ea      	ST   -Y,R30
0005d1 de6d      	RCALL __print_G100
0005d2 8119      	LDD  R17,Y+1
0005d3 8108      	LDD  R16,Y+0
0005d4 9624      	ADIW R28,4
0005d5 90ff      	POP  R15
0005d6 9508      	RET
                 
                 	.CSEG
                 _ltoa:
0005d7 9724      	SBIW R28,4
0005d8 931a      	ST   -Y,R17
0005d9 930a      	ST   -Y,R16
                +
0005da e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0005db ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0005dc e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0005dd e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
                +
0005de 83ea     +STD Y + 2 , R30
0005df 83fb     +STD Y + 2 + 1 , R31
0005e0 836c     +STD Y + 2 + 2 , R22
0005e1 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
0005e2 e000      	LDI  R16,LOW(0)
0005e3 85ab      	LDD  R26,Y+11
0005e4 23aa      	TST  R26
0005e5 f462      	BRPL _0x2020003
                +
0005e6 85e8     +LDD R30 , Y + 8
0005e7 85f9     +LDD R31 , Y + 8 + 1
0005e8 856a     +LDD R22 , Y + 8 + 2
0005e9 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
0005ea 940e 0876 	CALL __ANEGD1
0005ec 940e 07e2 	CALL SUBOPT_0x1B
0005ee 940e 07fd 	CALL SUBOPT_0x1F
0005f0 e2ed      	LDI  R30,LOW(45)
0005f1 93ec      	ST   X,R30
                 _0x2020003:
                 _0x2020005:
0005f2 940e 0804 	CALL SUBOPT_0x20
0005f4 940e 0889 	CALL __DIVD21U
0005f6 2f1e      	MOV  R17,R30
0005f7 3010      	CPI  R17,0
0005f8 f449      	BRNE _0x2020008
0005f9 3000      	CPI  R16,0
0005fa f439      	BRNE _0x2020008
                +
0005fb 81aa     +LDD R26 , Y + 2
0005fc 81bb     +LDD R27 , Y + 2 + 1
0005fd 818c     +LDD R24 , Y + 2 + 2
0005fe 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
0005ff 940e 07f5 	CALL SUBOPT_0x1E
000601 f431      	BRNE _0x2020007
                 _0x2020008:
000602 940e 07fd 	CALL SUBOPT_0x1F
000604 2fe1      	MOV  R30,R17
000605 5de0      	SUBI R30,-LOW(48)
000606 93ec      	ST   X,R30
000607 e001      	LDI  R16,LOW(1)
                 _0x2020007:
000608 940e 0804 	CALL SUBOPT_0x20
00060a 940e 08ae 	CALL __MODD21U
00060c 940e 07e2 	CALL SUBOPT_0x1B
                +
00060e 81aa     +LDD R26 , Y + 2
00060f 81bb     +LDD R27 , Y + 2 + 1
000610 818c     +LDD R24 , Y + 2 + 2
000611 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
                +
000612 e0ea     +LDI R30 , LOW ( 0xA )
000613 e0f0     +LDI R31 , HIGH ( 0xA )
000614 e060     +LDI R22 , BYTE3 ( 0xA )
000615 e070     +LDI R23 , BYTE4 ( 0xA )
                 	__GETD1N 0xA
000616 940e 0889 	CALL __DIVD21U
                +
000618 83ea     +STD Y + 2 , R30
000619 83fb     +STD Y + 2 + 1 , R31
00061a 836c     +STD Y + 2 + 2 , R22
00061b 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00061c 940e 09e8 	CALL __CPD10
00061e f699      	BRNE _0x2020005
00061f 81ae      	LDD  R26,Y+6
000620 81bf      	LDD  R27,Y+6+1
000621 e0e0      	LDI  R30,LOW(0)
000622 93ec      	ST   X,R30
000623 8119      	LDD  R17,Y+1
000624 8108      	LDD  R16,Y+0
000625 962c      	ADIW R28,12
000626 9508      	RET
                 
                 	.DSEG
                 
                 	.CSEG
                     .equ __lcd_direction=__lcd_port-1
                     .equ __lcd_pin=__lcd_port-2
                     .equ __lcd_rs=0
                     .equ __lcd_rd=1
                     .equ __lcd_enable=2
                     .equ __lcd_busy_flag=7
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_delay_G102:
000627 e0ff          ldi   r31,15
                 __lcd_delay0:
000628 95fa          dec   r31
000629 f7f1          brne  __lcd_delay0
00062a 9508      	RET
                 __lcd_ready:
00062b b3a7          in    r26,__lcd_direction
00062c 70af          andi  r26,0xf                 ;set as input
00062d bba7          out   __lcd_direction,r26
00062e 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00062f 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
                 __lcd_busy:
000630 dff6      	RCALL __lcd_delay_G102
000631 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000632 dff4      	RCALL __lcd_delay_G102
000633 b3a6          in    r26,__lcd_pin
000634 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000635 dff1      	RCALL __lcd_delay_G102
000636 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000637 dfef      	RCALL __lcd_delay_G102
000638 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000639 fda7          sbrc  r26,__lcd_busy_flag
00063a cff5          rjmp  __lcd_busy
00063b 9508      	RET
                 __lcd_write_nibble_G102:
00063c 7fa0          andi  r26,0xf0
00063d 2bab          or    r26,r27
00063e bba8          out   __lcd_port,r26          ;write
00063f 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000640 940e 0627 	CALL __lcd_delay_G102
000642 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000643 940e 0627 	CALL __lcd_delay_G102
000645 9508      	RET
                 __lcd_write_data:
000646 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
000647 b3a7          in    r26,__lcd_direction
000648 6fa7          ori   r26,0xf0 | (1<<__lcd_rs) | (1<<__lcd_rd) | (1<<__lcd_enable) ;set as output
000649 bba7          out   __lcd_direction,r26
00064a b3b8          in    r27,__lcd_port
00064b 70bf          andi  r27,0xf
00064c 81a8          ld    r26,y
00064d dfee      	RCALL __lcd_write_nibble_G102
00064e 81a8          ld    r26,y
00064f 95a2          swap  r26
000650 dfeb      	RCALL __lcd_write_nibble_G102
000651 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
000652 940c 071a 	JMP  _0x20C0001
                 __lcd_read_nibble_G102:
000654 9ac2          sbi   __lcd_port,__lcd_enable ;EN=1
000655 940e 0627 	CALL __lcd_delay_G102
000657 b3e6          in    r30,__lcd_pin           ;read
000658 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
000659 940e 0627 	CALL __lcd_delay_G102
00065b 7fe0          andi  r30,0xf0
00065c 9508      	RET
                 _lcd_read_byte0_G102:
00065d 940e 0627 	CALL __lcd_delay_G102
00065f dff4      	RCALL __lcd_read_nibble_G102
000660 2fae          mov   r26,r30
000661 dff2      	RCALL __lcd_read_nibble_G102
000662 98c1          cbi   __lcd_port,__lcd_rd     ;RD=0
000663 95e2          swap  r30
000664 2bea          or    r30,r26
000665 9508      	RET
                 _lcd_gotoxy:
000666 940e 062b 	CALL __lcd_ready
000668 81e8      	LD   R30,Y
000669 e0f0      	LDI  R31,0
00066a 58ef      	SUBI R30,LOW(-__base_y_G102)
00066b 4ffd      	SBCI R31,HIGH(-__base_y_G102)
00066c 81e0      	LD   R30,Z
00066d 81a9      	LDD  R26,Y+1
00066e 0fea      	ADD  R30,R26
00066f 93ea      	ST   -Y,R30
000670 940e 0646 	CALL __lcd_write_data
000672 81e9      	LDD  R30,Y+1
000673 93e0 0275 	STS  __lcd_x,R30
000675 81e8      	LD   R30,Y
000676 93e0 0276 	STS  __lcd_y,R30
                 _0x20C0004:
000678 9622      	ADIW R28,2
000679 9508      	RET
                 _lcd_clear:
00067a 940e 062b 	CALL __lcd_ready
00067c e0e2      	LDI  R30,LOW(2)
00067d 93ea      	ST   -Y,R30
00067e 940e 0646 	CALL __lcd_write_data
000680 940e 062b 	CALL __lcd_ready
000682 e0ec      	LDI  R30,LOW(12)
000683 93ea      	ST   -Y,R30
000684 940e 0646 	CALL __lcd_write_data
000686 940e 062b 	CALL __lcd_ready
000688 e0e1      	LDI  R30,LOW(1)
000689 93ea      	ST   -Y,R30
00068a 940e 0646 	CALL __lcd_write_data
00068c e0e0      	LDI  R30,LOW(0)
00068d 93e0 0276 	STS  __lcd_y,R30
00068f 93e0 0275 	STS  __lcd_x,R30
000691 9508      	RET
                 _lcd_putchar:
000692 93ef          push r30
000693 93ff          push r31
000694 81a8          ld   r26,y
000695 9468          set
000696 30aa          cpi  r26,10
000697 f061          breq __lcd_putchar1
000698 94e8          clt
000699 91e0 0275 	LDS  R30,__lcd_x
00069b 5fef      	SUBI R30,-LOW(1)
00069c 93e0 0275 	STS  __lcd_x,R30
00069e 91e0 0277 	LDS  R30,__lcd_maxx
0006a0 91a0 0275 	LDS  R26,__lcd_x
0006a2 17ea      	CP   R30,R26
0006a3 f460      	BRSH _0x2040004
                 	__lcd_putchar1:
0006a4 91e0 0276 	LDS  R30,__lcd_y
0006a6 5fef      	SUBI R30,-LOW(1)
0006a7 93e0 0276 	STS  __lcd_y,R30
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa 93ea      	ST   -Y,R30
0006ab 91e0 0276 	LDS  R30,__lcd_y
0006ad 93ea      	ST   -Y,R30
0006ae dfb7      	RCALL _lcd_gotoxy
0006af f02e      	brts __lcd_putchar0
                 _0x2040004:
0006b0 df7a          rcall __lcd_ready
0006b1 9ac0          sbi  __lcd_port,__lcd_rs ;RS=1
0006b2 81a8          ld   r26,y
0006b3 93aa          st   -y,r26
0006b4 df91          rcall __lcd_write_data
                 __lcd_putchar0:
0006b5 91ff          pop  r31
0006b6 91ef          pop  r30
0006b7 940c 071a 	JMP  _0x20C0001
                 _lcd_puts:
0006b9 931a      	ST   -Y,R17
                 _0x2040005:
0006ba 81a9      	LDD  R26,Y+1
0006bb 81ba      	LDD  R27,Y+1+1
0006bc 91ed      	LD   R30,X+
0006bd 83a9      	STD  Y+1,R26
0006be 83ba      	STD  Y+1+1,R27
0006bf 2f1e      	MOV  R17,R30
0006c0 30e0      	CPI  R30,0
0006c1 f019      	BREQ _0x2040007
0006c2 931a      	ST   -Y,R17
0006c3 dfce      	RCALL _lcd_putchar
0006c4 cff5      	RJMP _0x2040005
                 _0x2040007:
0006c5 c00e      	RJMP _0x20C0002
                 _lcd_putsf:
0006c6 931a      	ST   -Y,R17
                 _0x2040008:
0006c7 81e9      	LDD  R30,Y+1
0006c8 81fa      	LDD  R31,Y+1+1
0006c9 9631      	ADIW R30,1
0006ca 83e9      	STD  Y+1,R30
0006cb 83fa      	STD  Y+1+1,R31
0006cc 9731      	SBIW R30,1
0006cd 91e4      	LPM  R30,Z
0006ce 2f1e      	MOV  R17,R30
0006cf 30e0      	CPI  R30,0
0006d0 f019      	BREQ _0x204000A
0006d1 931a      	ST   -Y,R17
0006d2 dfbf      	RCALL _lcd_putchar
0006d3 cff3      	RJMP _0x2040008
                 _0x204000A:
                 _0x20C0002:
0006d4 8118      	LDD  R17,Y+0
                 _0x20C0003:
0006d5 9623      	ADIW R28,3
0006d6 9508      	RET
                 __long_delay_G102:
0006d7 27aa          clr   r26
0006d8 27bb          clr   r27
                 __long_delay0:
0006d9 9711          sbiw  r26,1         ;2 cycles
0006da f7f1          brne  __long_delay0 ;2 cycles
0006db 9508      	RET
                 __lcd_init_write_G102:
0006dc 98c1          cbi  __lcd_port,__lcd_rd 	  ;RD=0
0006dd b3a7          in    r26,__lcd_direction
0006de 6fa7          ori   r26,0xf7                ;set as output
0006df bba7          out   __lcd_direction,r26
0006e0 b3b8          in    r27,__lcd_port
0006e1 70bf          andi  r27,0xf
0006e2 81a8          ld    r26,y
0006e3 940e 063c 	CALL __lcd_write_nibble_G102
0006e5 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
0006e6 c033      	RJMP _0x20C0001
                 _lcd_init:
0006e7 98c2          cbi   __lcd_port,__lcd_enable ;EN=0
0006e8 98c0          cbi   __lcd_port,__lcd_rs     ;RS=0
0006e9 81e8      	LD   R30,Y
0006ea 93e0 0277 	STS  __lcd_maxx,R30
0006ec 58e0      	SUBI R30,-LOW(128)
                +
0006ed 93e0 0273+STS __base_y_G102 + 2 , R30
                 	__PUTB1MN __base_y_G102,2
0006ef 81e8      	LD   R30,Y
0006f0 54e0      	SUBI R30,-LOW(192)
                +
0006f1 93e0 0274+STS __base_y_G102 + 3 , R30
                 	__PUTB1MN __base_y_G102,3
0006f3 940e 0809 	CALL SUBOPT_0x21
0006f5 940e 0809 	CALL SUBOPT_0x21
0006f7 940e 0809 	CALL SUBOPT_0x21
0006f9 dfdd      	RCALL __long_delay_G102
0006fa e2e0      	LDI  R30,LOW(32)
0006fb 93ea      	ST   -Y,R30
0006fc dfdf      	RCALL __lcd_init_write_G102
0006fd dfd9      	RCALL __long_delay_G102
0006fe e2e8      	LDI  R30,LOW(40)
0006ff 940e 080f 	CALL SUBOPT_0x22
000701 e0e4      	LDI  R30,LOW(4)
000702 940e 080f 	CALL SUBOPT_0x22
000704 e8e5      	LDI  R30,LOW(133)
000705 940e 080f 	CALL SUBOPT_0x22
000707 b3a7          in    r26,__lcd_direction
000708 70af          andi  r26,0xf                 ;set as input
000709 bba7          out   __lcd_direction,r26
00070a 9ac1          sbi   __lcd_port,__lcd_rd     ;RD=1
00070b 940e 065d 	CALL _lcd_read_byte0_G102
00070d 30e5      	CPI  R30,LOW(0x5)
00070e f011      	BREQ _0x204000B
00070f e0e0      	LDI  R30,LOW(0)
000710 c009      	RJMP _0x20C0001
                 _0x204000B:
000711 940e 062b 	CALL __lcd_ready
000713 e0e6      	LDI  R30,LOW(6)
000714 93ea      	ST   -Y,R30
000715 940e 0646 	CALL __lcd_write_data
000717 940e 067a 	CALL _lcd_clear
000719 e0e1      	LDI  R30,LOW(1)
                 _0x20C0001:
00071a 9621      	ADIW R28,1
00071b 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
00071c 91a9          ld   r26,y+
00071d 91b9          ld   r27,y+
00071e 27ee          clr  r30
00071f 27ff          clr  r31
                 strlen0:
000720 916d          ld   r22,x+
000721 2366          tst  r22
000722 f011          breq strlen1
000723 9631          adiw r30,1
000724 cffb          rjmp strlen0
                 strlen1:
000725 9508          ret
                 _strlenf:
000726 27aa          clr  r26
000727 27bb          clr  r27
000728 91e9          ld   r30,y+
000729 91f9          ld   r31,y+
                 strlenf0:
00072a 9005          lpm  r0,z+
00072b 2000          tst  r0
00072c f011          breq strlenf1
00072d 9611          adiw r26,1
00072e cffb          rjmp strlenf0
                 strlenf1:
00072f 01fd          movw r30,r26
000730 9508          ret
                 
                 	.CSEG
                 
                 	.DSEG
                 _i:
000267           	.BYTE 0x2
                 _adc_val:
000269           	.BYTE 0x1
                 _lcdPresent:
00026a           	.BYTE 0x1
                 _adc_volt:
00026b           	.BYTE 0x2
                 __seed_G101:
00026d           	.BYTE 0x4
                 __base_y_G102:
000271           	.BYTE 0x4
                 __lcd_x:
000275           	.BYTE 0x1
                 __lcd_y:
000276           	.BYTE 0x1
                 __lcd_maxx:
000277           	.BYTE 0x1
                 _p_S1040024:
000278           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000731 81e8      	LD   R30,Y
000732 81f9      	LDD  R31,Y+1
000733 70e0      	ANDI R30,LOW(0xFF00)
000734 014f      	MOVW R8,R30
000735 2c89      	MOV  R8,R9
000736 2499      	CLR  R9
000737 2c58      	MOV  R5,R8
000738 2477      	CLR  R7
000739 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00073a 925a      	ST   -Y,R5
00073b 940e 084d 	CALL _i2c_write
00073d 924a      	ST   -Y,R4
00073e 940c 084d 	JMP  _i2c_write
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 23 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x2:
000740 93fa      	ST   -Y,R31
000741 93ea      	ST   -Y,R30
000742 940c 0866 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000744 2766      	CLR  R22
000745 2777      	CLR  R23
000746 940e 08bc 	CALL __PUTPARD1
000748 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000749 93fa      	ST   -Y,R31
00074a 93ea      	ST   -Y,R30
00074b 940c 06c6 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
                +
00074d e6e6     +LDI R30 , LOW ( 2 * _0x0 + 14 )
00074e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 14 )
                 	__POINTW1FN _0x0,14
00074f 93fa      	ST   -Y,R31
000750 93ea      	ST   -Y,R30
000751 e080      	LDI  R24,0
000752 940e 05b3 	CALL _printf
000754 9622      	ADIW R28,2
000755 e0e0      	LDI  R30,LOW(0)
000756 e0f0      	LDI  R31,HIGH(0)
000757 93e0 0267 	STS  _i,R30
000759 93f0 0268 	STS  _i+1,R31
00075b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
00075c 91a0 0267 	LDS  R26,_i
00075e 91b0 0268 	LDS  R27,_i+1
000760 9715      	SBIW R26,5
000761 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x7:
000762 91e0 0267 	LDS  R30,_i
000764 91f0 0268 	LDS  R31,_i+1
000766 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000767 5bef      	SUBI R30,LOW(-65)
000768 4fff      	SBCI R31,HIGH(-65)
000769 93ea      	ST   -Y,R30
00076a dff7      	RCALL SUBOPT_0x7
00076b 93fa      	ST   -Y,R31
00076c 93ea      	ST   -Y,R30
00076d 940c 0190 	JMP  _writeByte
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00076f dff2      	RCALL SUBOPT_0x7
000770 5bef      	SUBI R30,LOW(-65)
000771 4fff      	SBCI R31,HIGH(-65)
000772 93ea      	ST   -Y,R30
000773 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000774 940e 040f 	CALL _putchar
000776 e2ec      	LDI  R30,LOW(300)
000777 e0f1      	LDI  R31,HIGH(300)
000778 cfc7      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xB:
000779 e6a7      	LDI  R26,LOW(_i)
00077a e0b2      	LDI  R27,HIGH(_i)
00077b 91ed      	LD   R30,X+
00077c 91fd      	LD   R31,X+
00077d 9631      	ADIW R30,1
00077e 93fe      	ST   -X,R31
00077f 93ee      	ST   -X,R30
000780 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
000781 eee8      	LDI  R30,LOW(1000)
000782 e0f3      	LDI  R31,HIGH(1000)
000783 cfbc      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xD:
                +
000784 e7e6     +LDI R30 , LOW ( 2 * _0x0 + 30 )
000785 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 30 )
                 	__POINTW1FN _0x0,30
000786 93fa      	ST   -Y,R31
000787 93ea      	ST   -Y,R30
000788 e080      	LDI  R24,0
000789 940e 05b3 	CALL _printf
00078b 9622      	ADIW R28,2
00078c e0e0      	LDI  R30,LOW(0)
00078d e0f0      	LDI  R31,HIGH(0)
00078e 93e0 0267 	STS  _i,R30
000790 93f0 0268 	STS  _i+1,R31
000792 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
000793 dfce      	RCALL SUBOPT_0x7
000794 93fa      	ST   -Y,R31
000795 93ea      	ST   -Y,R30
000796 940e 016b 	CALL _readByte
000798 2e6e      	MOV  R6,R30
000799 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:30 WORDS
                 SUBOPT_0xF:
00079a 93fa      	ST   -Y,R31
00079b 93ea      	ST   -Y,R30
00079c e080      	LDI  R24,0
00079d 940c 05b3 	JMP  _printf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00079f ebe8      	LDI  R30,LOW(3000)
0007a0 e0fb      	LDI  R31,HIGH(3000)
0007a1 cf9e      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
                +
0007a2 e9e2     +LDI R30 , LOW ( 2 * _0x0 + 58 )
0007a3 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + 58 )
                 	__POINTW1FN _0x0,58
0007a4 cff5      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0007a5 e0e1      	LDI  R30,LOW(1)
0007a6 e0f0      	LDI  R31,HIGH(1)
0007a7 93e0 0267 	STS  _i,R30
0007a9 93f0 0268 	STS  _i+1,R31
0007ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
0007ac 91a0 0267 	LDS  R26,_i
0007ae 91b0 0268 	LDS  R27,_i+1
0007b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
0007b1 93e0 0267 	STS  _i,R30
0007b3 93f0 0268 	STS  _i+1,R31
0007b5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0007b6 93fa      	ST   -Y,R31
0007b7 93ea      	ST   -Y,R30
0007b8 dfa9      	RCALL SUBOPT_0x7
0007b9 cf8a      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x16:
0007ba e6e4      	LDI  R30,LOW(100)
0007bb e0f0      	LDI  R31,HIGH(100)
0007bc cf83      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x17:
0007bd 932a      	ST   -Y,R18
0007be 89ec      	LDD  R30,Y+20
0007bf 89fd      	LDD  R31,Y+20+1
0007c0 93fa      	ST   -Y,R31
0007c1 93ea      	ST   -Y,R30
0007c2 01fe      	MOVW R30,R28
0007c3 9674      	ADIW R30,20
0007c4 93fa      	ST   -Y,R31
0007c5 93ea      	ST   -Y,R30
0007c6 940c 0415 	JMP  __put_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x18:
0007c8 89ed      	LDD  R30,Y+21
0007c9 89fe      	LDD  R31,Y+21+1
0007ca 9734      	SBIW R30,4
0007cb 8bed      	STD  Y+21,R30
0007cc 8bfe      	STD  Y+21+1,R31
0007cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x19:
0007ce 89ec      	LDD  R30,Y+20
0007cf 89fd      	LDD  R31,Y+20+1
0007d0 93fa      	ST   -Y,R31
0007d1 93ea      	ST   -Y,R30
0007d2 01fe      	MOVW R30,R28
0007d3 9674      	ADIW R30,20
0007d4 93fa      	ST   -Y,R31
0007d5 93ea      	ST   -Y,R30
0007d6 940c 0415 	JMP  __put_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1A:
0007d8 89ad      	LDD  R26,Y+21
0007d9 89be      	LDD  R27,Y+21+1
0007da 9614      	ADIW R26,4
0007db 940e 08b2 	CALL __GETW1P
0007dd 83ee      	STD  Y+6,R30
0007de 83ff      	STD  Y+6+1,R31
0007df 93fa      	ST   -Y,R31
0007e0 93ea      	ST   -Y,R30
0007e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1B:
                +
0007e2 87e8     +STD Y + 8 , R30
0007e3 87f9     +STD Y + 8 + 1 , R31
0007e4 876a     +STD Y + 8 + 2 , R22
0007e5 877b     +STD Y + 8 + 3 , R23
                 	__PUTD1S 8
0007e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1C:
                +
0007e7 85e8     +LDD R30 , Y + 8
0007e8 85f9     +LDD R31 , Y + 8 + 1
0007e9 856a     +LDD R22 , Y + 8 + 2
0007ea 857b     +LDD R23 , Y + 8 + 3
                 	__GETD1S 8
                +
0007eb 85ac     +LDD R26 , Y + 12
0007ec 85bd     +LDD R27 , Y + 12 + 1
0007ed 858e     +LDD R24 , Y + 12 + 2
0007ee 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
0007ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1D:
                +
0007f0 85a8     +LDD R26 , Y + 8
0007f1 85b9     +LDD R27 , Y + 8 + 1
0007f2 858a     +LDD R24 , Y + 8 + 2
0007f3 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0007f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1E:
                +
0007f5 30a1     +CPI R26 , LOW ( 0x1 )
0007f6 e0e0     +LDI R30 , HIGH ( 0x1 )
0007f7 07be     +CPC R27 , R30
0007f8 e0e0     +LDI R30 , BYTE3 ( 0x1 )
0007f9 078e     +CPC R24 , R30
0007fa e0e0     +LDI R30 , BYTE4 ( 0x1 )
0007fb 079e     +CPC R25 , R30
                 	__CPD2N 0x1
0007fc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
0007fd 81ae      	LDD  R26,Y+6
0007fe 81bf      	LDD  R27,Y+6+1
0007ff 9611      	ADIW R26,1
000800 83ae      	STD  Y+6,R26
000801 83bf      	STD  Y+6+1,R27
000802 9711      	SBIW R26,1
000803 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x20:
                +
000804 81ea     +LDD R30 , Y + 2
000805 81fb     +LDD R31 , Y + 2 + 1
000806 816c     +LDD R22 , Y + 2 + 2
000807 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
000808 cfe7      	RJMP SUBOPT_0x1D
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x21:
000809 940e 06d7 	CALL __long_delay_G102
00080b e3e0      	LDI  R30,LOW(48)
00080c 93ea      	ST   -Y,R30
00080d 940c 06dc 	JMP  __lcd_init_write_G102
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x22:
00080f 93ea      	ST   -Y,R30
000810 940e 0646 	CALL __lcd_write_data
000812 940c 06d7 	JMP  __long_delay_G102
                 
                 
                 	.CSEG
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
000814 98a8      	cbi  __i2c_port,__scl_bit
000815 98a9      	cbi  __i2c_port,__sda_bit
000816 9aa0      	sbi  __i2c_dir,__scl_bit
000817 98a1      	cbi  __i2c_dir,__sda_bit
000818 c015      	rjmp __i2c_delay2
                 _i2c_start:
000819 98a1      	cbi  __i2c_dir,__sda_bit
00081a 98a0      	cbi  __i2c_dir,__scl_bit
00081b 27ee      	clr  r30
00081c 0000      	nop
00081d 9b99      	sbis __i2c_pin,__sda_bit
00081e 9508      	ret
00081f 9b98      	sbis __i2c_pin,__scl_bit
000820 9508      	ret
000821 d004      	rcall __i2c_delay1
000822 9aa1      	sbi  __i2c_dir,__sda_bit
000823 d002      	rcall __i2c_delay1
000824 9aa0      	sbi  __i2c_dir,__scl_bit
000825 e0e1      	ldi  r30,1
                 __i2c_delay1:
000826 e16b      	ldi  r22,27
000827 c007      	rjmp __i2c_delay2l
                 _i2c_stop:
000828 9aa1      	sbi  __i2c_dir,__sda_bit
000829 9aa0      	sbi  __i2c_dir,__scl_bit
00082a d003      	rcall __i2c_delay2
00082b 98a0      	cbi  __i2c_dir,__scl_bit
00082c dff9      	rcall __i2c_delay1
00082d 98a1      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
00082e e365      	ldi  r22,53
                 __i2c_delay2l:
00082f 956a      	dec  r22
000830 f7f1      	brne __i2c_delay2l
000831 9508      	ret
                 _i2c_read:
000832 e078      	ldi  r23,8
                 __i2c_read0:
000833 98a0      	cbi  __i2c_dir,__scl_bit
000834 dff1      	rcall __i2c_delay1
                 __i2c_read3:
000835 9b98      	sbis __i2c_pin,__scl_bit
000836 cffe      	rjmp __i2c_read3
000837 dfee      	rcall __i2c_delay1
000838 9488      	clc
000839 9999      	sbic __i2c_pin,__sda_bit
00083a 9408      	sec
00083b 9aa0      	sbi  __i2c_dir,__scl_bit
00083c dff1      	rcall __i2c_delay2
00083d 1fee      	rol  r30
00083e 957a      	dec  r23
00083f f799      	brne __i2c_read0
000840 9179      	ld   r23,y+
000841 2377      	tst  r23
000842 f411      	brne __i2c_read1
000843 98a1      	cbi  __i2c_dir,__sda_bit
000844 c001      	rjmp __i2c_read2
                 __i2c_read1:
000845 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
000846 dfdf      	rcall __i2c_delay1
000847 98a0      	cbi  __i2c_dir,__scl_bit
000848 dfe5      	rcall __i2c_delay2
000849 9aa0      	sbi  __i2c_dir,__scl_bit
00084a dfdb      	rcall __i2c_delay1
00084b 98a1      	cbi  __i2c_dir,__sda_bit
00084c cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
00084d 91e9      	ld   r30,y+
00084e e078      	ldi  r23,8
                 __i2c_write0:
00084f 0fee      	lsl  r30
000850 f410      	brcc __i2c_write1
000851 98a1      	cbi  __i2c_dir,__sda_bit
000852 c001      	rjmp __i2c_write2
                 __i2c_write1:
000853 9aa1      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
000854 dfd9      	rcall __i2c_delay2
000855 98a0      	cbi  __i2c_dir,__scl_bit
000856 dfcf      	rcall __i2c_delay1
                 __i2c_write3:
000857 9b98      	sbis __i2c_pin,__scl_bit
000858 cffe      	rjmp __i2c_write3
000859 dfcc      	rcall __i2c_delay1
00085a 9aa0      	sbi  __i2c_dir,__scl_bit
00085b 957a      	dec  r23
00085c f791      	brne __i2c_write0
00085d 98a1      	cbi  __i2c_dir,__sda_bit
00085e dfc7      	rcall __i2c_delay1
00085f 98a0      	cbi  __i2c_dir,__scl_bit
000860 dfcd      	rcall __i2c_delay2
000861 e0e1      	ldi  r30,1
000862 9999      	sbic __i2c_pin,__sda_bit
000863 27ee      	clr  r30
000864 9aa0      	sbi  __i2c_dir,__scl_bit
000865 9508      	ret
                 
                 _delay_ms:
000866 91e9      	ld   r30,y+
000867 91f9      	ld   r31,y+
000868 9630      	adiw r30,0
000869 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00086a ea80     +LDI R24 , LOW ( 0xFA0 )
00086b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00086c 9701     +SBIW R24 , 1
00086d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00086e 95a8      	wdr
00086f 9731      	sbiw r30,1
000870 f7c9      	brne __delay_ms0
                 __delay_ms1:
000871 9508      	ret
                 
                 __ADDW2R15:
000872 2400      	CLR  R0
000873 0daf      	ADD  R26,R15
000874 1db0      	ADC  R27,R0
000875 9508      	RET
                 
                 __ANEGD1:
000876 95f0      	COM  R31
000877 9560      	COM  R22
000878 9570      	COM  R23
000879 95e1      	NEG  R30
00087a 4fff      	SBCI R31,-1
00087b 4f6f      	SBCI R22,-1
00087c 4f7f      	SBCI R23,-1
00087d 9508      	RET
                 
                 __CBD1:
00087e 2ffe      	MOV  R31,R30
00087f 0fff      	ADD  R31,R31
000880 0bff      	SBC  R31,R31
000881 2f6f      	MOV  R22,R31
000882 2f7f      	MOV  R23,R31
000883 9508      	RET
                 
                 __CWD1:
000884 2f6f      	MOV  R22,R31
000885 0f66      	ADD  R22,R22
000886 0b66      	SBC  R22,R22
000887 2f76      	MOV  R23,R22
000888 9508      	RET
                 
                 __DIVD21U:
000889 933f      	PUSH R19
00088a 934f      	PUSH R20
00088b 935f      	PUSH R21
00088c 2400      	CLR  R0
00088d 2411      	CLR  R1
00088e 2744      	CLR  R20
00088f 2755      	CLR  R21
000890 e230      	LDI  R19,32
                 __DIVD21U1:
000891 0faa      	LSL  R26
000892 1fbb      	ROL  R27
000893 1f88      	ROL  R24
000894 1f99      	ROL  R25
000895 1c00      	ROL  R0
000896 1c11      	ROL  R1
000897 1f44      	ROL  R20
000898 1f55      	ROL  R21
000899 1a0e      	SUB  R0,R30
00089a 0a1f      	SBC  R1,R31
00089b 0b46      	SBC  R20,R22
00089c 0b57      	SBC  R21,R23
00089d f428      	BRCC __DIVD21U2
00089e 0e0e      	ADD  R0,R30
00089f 1e1f      	ADC  R1,R31
0008a0 1f46      	ADC  R20,R22
0008a1 1f57      	ADC  R21,R23
0008a2 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0008a3 60a1      	SBR  R26,1
                 __DIVD21U3:
0008a4 953a      	DEC  R19
0008a5 f759      	BRNE __DIVD21U1
0008a6 01fd      	MOVW R30,R26
0008a7 01bc      	MOVW R22,R24
0008a8 01d0      	MOVW R26,R0
0008a9 01ca      	MOVW R24,R20
0008aa 915f      	POP  R21
0008ab 914f      	POP  R20
0008ac 913f      	POP  R19
0008ad 9508      	RET
                 
                 __MODD21U:
0008ae dfda      	RCALL __DIVD21U
0008af 01fd      	MOVW R30,R26
0008b0 01bc      	MOVW R22,R24
0008b1 9508      	RET
                 
                 __GETW1P:
0008b2 91ed      	LD   R30,X+
0008b3 91fc      	LD   R31,X
0008b4 9711      	SBIW R26,1
0008b5 9508      	RET
                 
                 __GETD1P:
0008b6 91ed      	LD   R30,X+
0008b7 91fd      	LD   R31,X+
0008b8 916d      	LD   R22,X+
0008b9 917c      	LD   R23,X
0008ba 9713      	SBIW R26,3
0008bb 9508      	RET
                 
                 __PUTPARD1:
0008bc 937a      	ST   -Y,R23
0008bd 936a      	ST   -Y,R22
0008be 93fa      	ST   -Y,R31
0008bf 93ea      	ST   -Y,R30
0008c0 9508      	RET
                 
                 __ROUND_REPACK:
0008c1 2355      	TST  R21
0008c2 f442      	BRPL __REPACK
0008c3 3850      	CPI  R21,0x80
0008c4 f411      	BRNE __ROUND_REPACK0
0008c5 ffe0      	SBRS R30,0
0008c6 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0008c7 9631      	ADIW R30,1
0008c8 1f69      	ADC  R22,R25
0008c9 1f79      	ADC  R23,R25
0008ca f06b      	BRVS __REPACK1
                 
                 __REPACK:
0008cb e850      	LDI  R21,0x80
0008cc 2757      	EOR  R21,R23
0008cd f411      	BRNE __REPACK0
0008ce 935f      	PUSH R21
0008cf c073      	RJMP __ZERORES
                 __REPACK0:
0008d0 3f5f      	CPI  R21,0xFF
0008d1 f031      	BREQ __REPACK1
0008d2 0f66      	LSL  R22
0008d3 0c00      	LSL  R0
0008d4 9557      	ROR  R21
0008d5 9567      	ROR  R22
0008d6 2f75      	MOV  R23,R21
0008d7 9508      	RET
                 __REPACK1:
0008d8 935f      	PUSH R21
0008d9 2000      	TST  R0
0008da f00a      	BRMI __REPACK2
0008db c073      	RJMP __MAXRES
                 __REPACK2:
0008dc c06c      	RJMP __MINRES
                 
                 __UNPACK:
0008dd e850      	LDI  R21,0x80
0008de 2e19      	MOV  R1,R25
0008df 2215      	AND  R1,R21
0008e0 0f88      	LSL  R24
0008e1 1f99      	ROL  R25
0008e2 2795      	EOR  R25,R21
0008e3 0f55      	LSL  R21
0008e4 9587      	ROR  R24
                 
                 __UNPACK1:
0008e5 e850      	LDI  R21,0x80
0008e6 2e07      	MOV  R0,R23
0008e7 2205      	AND  R0,R21
0008e8 0f66      	LSL  R22
0008e9 1f77      	ROL  R23
0008ea 2775      	EOR  R23,R21
0008eb 0f55      	LSL  R21
0008ec 9567      	ROR  R22
0008ed 9508      	RET
                 
                 __CFD1U:
0008ee 9468      	SET
0008ef c001      	RJMP __CFD1U0
                 __CFD1:
0008f0 94e8      	CLT
                 __CFD1U0:
0008f1 935f      	PUSH R21
0008f2 dff2      	RCALL __UNPACK1
0008f3 3870      	CPI  R23,0x80
0008f4 f018      	BRLO __CFD10
0008f5 3f7f      	CPI  R23,0xFF
0008f6 f408      	BRCC __CFD10
0008f7 c04b      	RJMP __ZERORES
                 __CFD10:
0008f8 e156      	LDI  R21,22
0008f9 1b57      	SUB  R21,R23
0008fa f4aa      	BRPL __CFD11
0008fb 9551      	NEG  R21
0008fc 3058      	CPI  R21,8
0008fd f40e      	BRTC __CFD19
0008fe 3059      	CPI  R21,9
                 __CFD19:
0008ff f030      	BRLO __CFD17
000900 efef      	SER  R30
000901 efff      	SER  R31
000902 ef6f      	SER  R22
000903 e77f      	LDI  R23,0x7F
000904 f977      	BLD  R23,7
000905 c01a      	RJMP __CFD15
                 __CFD17:
000906 2777      	CLR  R23
000907 2355      	TST  R21
000908 f0b9      	BREQ __CFD15
                 __CFD18:
000909 0fee      	LSL  R30
00090a 1fff      	ROL  R31
00090b 1f66      	ROL  R22
00090c 1f77      	ROL  R23
00090d 955a      	DEC  R21
00090e f7d1      	BRNE __CFD18
00090f c010      	RJMP __CFD15
                 __CFD11:
000910 2777      	CLR  R23
                 __CFD12:
000911 3058      	CPI  R21,8
000912 f028      	BRLO __CFD13
000913 2fef      	MOV  R30,R31
000914 2ff6      	MOV  R31,R22
000915 2f67      	MOV  R22,R23
000916 5058      	SUBI R21,8
000917 cff9      	RJMP __CFD12
                 __CFD13:
000918 2355      	TST  R21
000919 f031      	BREQ __CFD15
                 __CFD14:
00091a 9576      	LSR  R23
00091b 9567      	ROR  R22
00091c 95f7      	ROR  R31
00091d 95e7      	ROR  R30
00091e 955a      	DEC  R21
00091f f7d1      	BRNE __CFD14
                 __CFD15:
000920 2000      	TST  R0
000921 f40a      	BRPL __CFD16
000922 df53      	RCALL __ANEGD1
                 __CFD16:
000923 915f      	POP  R21
000924 9508      	RET
                 
                 __CDF1U:
000925 9468      	SET
000926 c001      	RJMP __CDF1U0
                 __CDF1:
000927 94e8      	CLT
                 __CDF1U0:
000928 9730      	SBIW R30,0
000929 4060      	SBCI R22,0
00092a 4070      	SBCI R23,0
00092b f0b1      	BREQ __CDF10
00092c 2400      	CLR  R0
00092d f026      	BRTS __CDF11
00092e 2377      	TST  R23
00092f f412      	BRPL __CDF11
000930 9400      	COM  R0
000931 df44      	RCALL __ANEGD1
                 __CDF11:
000932 2e17      	MOV  R1,R23
000933 e17e      	LDI  R23,30
000934 2011      	TST  R1
                 __CDF12:
000935 f032      	BRMI __CDF13
000936 957a      	DEC  R23
000937 0fee      	LSL  R30
000938 1fff      	ROL  R31
000939 1f66      	ROL  R22
00093a 1c11      	ROL  R1
00093b cff9      	RJMP __CDF12
                 __CDF13:
00093c 2fef      	MOV  R30,R31
00093d 2ff6      	MOV  R31,R22
00093e 2d61      	MOV  R22,R1
00093f 935f      	PUSH R21
000940 df8a      	RCALL __REPACK
000941 915f      	POP  R21
                 __CDF10:
000942 9508      	RET
                 
                 __ZERORES:
000943 27ee      	CLR  R30
000944 27ff      	CLR  R31
000945 2766      	CLR  R22
000946 2777      	CLR  R23
000947 915f      	POP  R21
000948 9508      	RET
                 
                 __MINRES:
000949 efef      	SER  R30
00094a efff      	SER  R31
00094b e76f      	LDI  R22,0x7F
00094c ef7f      	SER  R23
00094d 915f      	POP  R21
00094e 9508      	RET
                 
                 __MAXRES:
00094f efef      	SER  R30
000950 efff      	SER  R31
000951 e76f      	LDI  R22,0x7F
000952 e77f      	LDI  R23,0x7F
000953 915f      	POP  R21
000954 9508      	RET
                 
                 __MULF12:
000955 935f      	PUSH R21
000956 df86      	RCALL __UNPACK
000957 3870      	CPI  R23,0x80
000958 f351      	BREQ __ZERORES
000959 3890      	CPI  R25,0x80
00095a f341      	BREQ __ZERORES
00095b 2401      	EOR  R0,R1
00095c 9408      	SEC
00095d 1f79      	ADC  R23,R25
00095e f423      	BRVC __MULF124
00095f f31c      	BRLT __ZERORES
                 __MULF125:
000960 2000      	TST  R0
000961 f33a      	BRMI __MINRES
000962 cfec      	RJMP __MAXRES
                 __MULF124:
000963 920f      	PUSH R0
000964 931f      	PUSH R17
000965 932f      	PUSH R18
000966 933f      	PUSH R19
000967 934f      	PUSH R20
000968 2711      	CLR  R17
000969 2722      	CLR  R18
00096a 2799      	CLR  R25
00096b 9f68      	MUL  R22,R24
00096c 01a0      	MOVW R20,R0
00096d 9f8f      	MUL  R24,R31
00096e 2d30      	MOV  R19,R0
00096f 0d41      	ADD  R20,R1
000970 1f59      	ADC  R21,R25
000971 9f6b      	MUL  R22,R27
000972 0d30      	ADD  R19,R0
000973 1d41      	ADC  R20,R1
000974 1f59      	ADC  R21,R25
000975 9f8e      	MUL  R24,R30
000976 d027      	RCALL __MULF126
000977 9fbf      	MUL  R27,R31
000978 d025      	RCALL __MULF126
000979 9f6a      	MUL  R22,R26
00097a d023      	RCALL __MULF126
00097b 9fbe      	MUL  R27,R30
00097c d01d      	RCALL __MULF127
00097d 9faf      	MUL  R26,R31
00097e d01b      	RCALL __MULF127
00097f 9fae      	MUL  R26,R30
000980 0d11      	ADD  R17,R1
000981 1f29      	ADC  R18,R25
000982 1f39      	ADC  R19,R25
000983 1f49      	ADC  R20,R25
000984 1f59      	ADC  R21,R25
000985 2fe3      	MOV  R30,R19
000986 2ff4      	MOV  R31,R20
000987 2f65      	MOV  R22,R21
000988 2f52      	MOV  R21,R18
000989 914f      	POP  R20
00098a 913f      	POP  R19
00098b 912f      	POP  R18
00098c 911f      	POP  R17
00098d 900f      	POP  R0
00098e 2366      	TST  R22
00098f f02a      	BRMI __MULF122
000990 0f55      	LSL  R21
000991 1fee      	ROL  R30
000992 1fff      	ROL  R31
000993 1f66      	ROL  R22
000994 c002      	RJMP __MULF123
                 __MULF122:
000995 9573      	INC  R23
000996 f24b      	BRVS __MULF125
                 __MULF123:
000997 df29      	RCALL __ROUND_REPACK
000998 915f      	POP  R21
000999 9508      	RET
                 
                 __MULF127:
00099a 0d10      	ADD  R17,R0
00099b 1d21      	ADC  R18,R1
00099c 1f39      	ADC  R19,R25
00099d c002      	RJMP __MULF128
                 __MULF126:
00099e 0d20      	ADD  R18,R0
00099f 1d31      	ADC  R19,R1
                 __MULF128:
0009a0 1f49      	ADC  R20,R25
0009a1 1f59      	ADC  R21,R25
0009a2 9508      	RET
                 
                 __DIVF21:
0009a3 935f      	PUSH R21
0009a4 df38      	RCALL __UNPACK
0009a5 3870      	CPI  R23,0x80
0009a6 f421      	BRNE __DIVF210
0009a7 2011      	TST  R1
                 __DIVF211:
0009a8 f40a      	BRPL __DIVF219
0009a9 cf9f      	RJMP __MINRES
                 __DIVF219:
0009aa cfa4      	RJMP __MAXRES
                 __DIVF210:
0009ab 3890      	CPI  R25,0x80
0009ac f409      	BRNE __DIVF218
                 __DIVF217:
0009ad cf95      	RJMP __ZERORES
                 __DIVF218:
0009ae 2401      	EOR  R0,R1
0009af 9408      	SEC
0009b0 0b97      	SBC  R25,R23
0009b1 f41b      	BRVC __DIVF216
0009b2 f3d4      	BRLT __DIVF217
0009b3 2000      	TST  R0
0009b4 cff3      	RJMP __DIVF211
                 __DIVF216:
0009b5 2f79      	MOV  R23,R25
0009b6 931f      	PUSH R17
0009b7 932f      	PUSH R18
0009b8 933f      	PUSH R19
0009b9 934f      	PUSH R20
0009ba 2411      	CLR  R1
0009bb 2711      	CLR  R17
0009bc 2722      	CLR  R18
0009bd 2733      	CLR  R19
0009be 2744      	CLR  R20
0009bf 2755      	CLR  R21
0009c0 e290      	LDI  R25,32
                 __DIVF212:
0009c1 17ae      	CP   R26,R30
0009c2 07bf      	CPC  R27,R31
0009c3 0786      	CPC  R24,R22
0009c4 0741      	CPC  R20,R17
0009c5 f030      	BRLO __DIVF213
0009c6 1bae      	SUB  R26,R30
0009c7 0bbf      	SBC  R27,R31
0009c8 0b86      	SBC  R24,R22
0009c9 0b41      	SBC  R20,R17
0009ca 9408      	SEC
0009cb c001      	RJMP __DIVF214
                 __DIVF213:
0009cc 9488      	CLC
                 __DIVF214:
0009cd 1f55      	ROL  R21
0009ce 1f22      	ROL  R18
0009cf 1f33      	ROL  R19
0009d0 1c11      	ROL  R1
0009d1 1faa      	ROL  R26
0009d2 1fbb      	ROL  R27
0009d3 1f88      	ROL  R24
0009d4 1f44      	ROL  R20
0009d5 959a      	DEC  R25
0009d6 f751      	BRNE __DIVF212
0009d7 01f9      	MOVW R30,R18
0009d8 2d61      	MOV  R22,R1
0009d9 914f      	POP  R20
0009da 913f      	POP  R19
0009db 912f      	POP  R18
0009dc 911f      	POP  R17
0009dd 2366      	TST  R22
0009de f032      	BRMI __DIVF215
0009df 0f55      	LSL  R21
0009e0 1fee      	ROL  R30
0009e1 1fff      	ROL  R31
0009e2 1f66      	ROL  R22
0009e3 957a      	DEC  R23
0009e4 f243      	BRVS __DIVF217
                 __DIVF215:
0009e5 dedb      	RCALL __ROUND_REPACK
0009e6 915f      	POP  R21
0009e7 9508      	RET
                 
                 __CPD10:
0009e8 9730      	SBIW R30,0
0009e9 4060      	SBCI R22,0
0009ea 4070      	SBCI R23,0
0009eb 9508      	RET
                 
                 __SAVELOCR6:
0009ec 935a      	ST   -Y,R21
                 __SAVELOCR5:
0009ed 934a      	ST   -Y,R20
                 __SAVELOCR4:
0009ee 933a      	ST   -Y,R19
                 __SAVELOCR3:
0009ef 932a      	ST   -Y,R18
                 __SAVELOCR2:
0009f0 931a      	ST   -Y,R17
0009f1 930a      	ST   -Y,R16
0009f2 9508      	RET
                 
                 __LOADLOCR6:
0009f3 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0009f4 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0009f5 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0009f6 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0009f7 8119      	LDD  R17,Y+1
0009f8 8108      	LD   R16,Y
0009f9 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  32 r1 :  22 r2 :   0 r3 :   0 r4 :   3 r5 :   2 r6 :   7 r7 :   5 
r8 :   3 r9 :   2 r10:   2 r11:   1 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  54 r17:  58 r18:  46 r19:  30 r20:  30 r21:  75 r22:  75 r23:  69 
r24:  39 r25:  34 r26: 125 r27:  44 r28:  31 r29:   1 r30: 468 r31: 168 
x  :  27 y  : 279 z  :  14 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
adc   :  19 add   :  11 adiw  :  40 and   :   2 andi  :  15 asr   :   0 
bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 
break :   0 breq  :  31 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :  10 brlt  :   2 brmi  :   5 brne  :  57 brpl  :   7 
brsh  :  11 brtc  :   1 brts  :   2 brvc  :   2 brvs  :   3 bset  :   0 
bst   :   0 call  : 211 cbi   :  44 cbr   :   0 clc   :   2 clh   :   0 
cli   :   3 cln   :   0 clr   :  48 cls   :   0 clt   :   3 clv   :   0 
clz   :   0 com   :   4 cp    :   7 cpc   :  15 cpi   :  67 cpse  :   0 
dec   :  11 des   :   0 eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   9 inc   :   2 jmp   :  45 ld    :  40 
ldd   : 102 ldi   : 259 lds   :  20 lpm   :  14 lsl   :  14 lsr   :   5 
mov   :  55 movw  :  27 mul   :  10 muls  :   0 mulsu :   0 neg   :   2 
nop   :   1 or    :   4 ori   :   9 out   :  59 pop   :  22 push  :  21 
rcall :  72 ret   :  66 reti  :   1 rjmp  : 137 rol   :  32 ror   :   7 
sbc   :   9 sbci  :  10 sbi   :  33 sbic  :  12 sbis  :   8 sbiw  :  27 
sbr   :   1 sbrc  :   3 sbrs  :  14 sec   :   4 seh   :   0 sei   :   3 
sen   :   0 ser   :   8 ses   :   0 set   :   3 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    : 121 std   :  46 sts   :  20 sub   :   3 
subi  :  26 swap  :   2 tst   :  18 wdr   :   1 
Instructions used: 77 out of 112 (68.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0013f4   4684    424   5108   32768  15.6%
[.dseg] 0x000060 0x00027a      0     26     26    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
