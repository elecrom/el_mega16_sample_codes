;/*****************************************************
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External SRAM size  : 0
;Data Stack size     : 256
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <stdlib.h>
;
;#define	irPORT	PORTC
;#define	irPIN		PINC
;#define	irDDR		DDRC
;#define	irBIT		6
;
;#include "../include/ir.h"

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;	b1 -> R17
;	b2 -> R16
;	rec_byte -> R18,R19
;	i -> R21
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;	c1 -> R17
;	c2 -> R16
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;
;// Alphanumeric LCD Module functions
;#asm
;PCODE: $0000005C VOL: 0
   .equ __lcd_port=0x18 ;PORTB
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 001B #endasm
;#include <lcd.h>
;
;
;//#include "../include/myi2c.c"
;//#include "../include/eeprommyi2c.c"
;// I2C Bus functions
;#asm
;PCODE: $0000005F VOL: 0
   .equ __i2c_port=0x15 ;PORTC
;PCODE: $00000060 VOL: 0
   .equ __sda_bit=1
;PCODE: $00000061 VOL: 0
   .equ __scl_bit=0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0026 #endasm
;#include <i2c.h>
;#include   "../include/eeprom.h"
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;	add -> Y+4
;	*bAdd -> Y+2
;	addOLD -> R16,R17
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;	add -> Y+0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;	add -> Y+0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;	add -> Y+0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;	add -> Y+0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;	eB -> Y+2
;	add -> Y+0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;
;
;
;
;#define ADC_VREF_TYPE 0x60
;
;unsigned int i;
;unsigned char j;
;unsigned char adc_val;
;unsigned char lcdPresent;
;unsigned int adc_volt;
;
;
;//_____________________________________________________________________________________
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 003A {
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 003B ADMUX=adc_input|ADC_VREF_TYPE;
;	adc_input -> Y+0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 003C // Start the AD conversion
; 0000 003D ADCSRA|=0x40;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 003E // Wait for the AD conversion to complete
; 0000 003F while ((ADCSRA & 0x10)==0);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0040 ADCSRA|=0x10;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0041 return ADCH;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0042 }
;PCODE: $0000018F VOL: 0
;
;//_______________________________________________________________________________________
;//# To display given number at given location on LCD
;void display_num(unsigned char nX,unsigned char nY,unsigned int nNum)
; 0000 0047 {
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0048 unsigned char *stnum="000000";
; 0000 0049 
; 0000 004A 	ltoa(nNum,stnum);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;	nX -> Y+5
;	nY -> Y+4
;	nNum -> Y+2
;	*stnum -> R16,R17
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 004B 	lcd_gotoxy(nX,nY);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 004C 	lcd_puts(stnum);
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 004D 
; 0000 004E  return;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 004F }
;PCODE: $000001A9 VOL: 0

	.DSEG
_0x2C:
	.BYTE 0x7
;
;//_____________________________________________________________________________________
;// Timer 1 overflow interrupt service routine
;//# This will flash LED on PORTB.7 at a rate of 1Hz.
;//  -Interrupt period 	= Timer Clk period * (65536 - TCNT1 )
;//	 						 	= (1/15625) * (65536 - 57723)
;//							 	= 64uS  * 7813
;//							 	= 500.032s => 0.5 sec
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0059 {

	.CSEG
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 005A 	TCNT1 = 57723;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 005B 
; 0000 005C 	// Place your code here
; 0000 005D 	PORTB.3 = !PORTB.3;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 005E 
; 0000 005F }
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;
;
;//_____________________________________________________________________________________
;void io_test()
; 0000 0064 {
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0065 unsigned char pa,pb,pc,pd;
; 0000 0066 unsigned char da,db,dc,dd;
; 0000 0067 
; 0000 0068 	//Save the port registers
; 0000 0069    pa = PORTA; pb = PORTB; pc = PORTC; pd = PORTD;
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;	pa -> R17
;	pb -> R16
;	pc -> R19
;	pd -> R18
;	da -> R21
;	db -> R20
;	dc -> Y+7
;	dd -> Y+6
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 006A    da = DDRA;	db = DDRB; 	dc = DDRC;	dd = DDRD;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 006B 
; 0000 006C 
; 0000 006D    DDRC.2 = 0;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 006E    PORTC.2 = 1;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 006F    while(PINC.2 == 1)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 0070    {
; 0000 0071 		//Set all ports to output
; 0000 0072 		PORTA = PORTB = PORTC = PORTD = 0;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0073    	DDRA = DDRB = DDRC = DDRD = 0xFF;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 0074 
; 0000 0075       PORTA = PORTB = PORTC = PORTD = 0xFF;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0076       delay_ms(500);
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0077    	PORTA = PORTB = PORTC = PORTD = 0;
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0078       delay_ms(500);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 0079 
; 0000 007A       //Set only PORTC.2 to input with pull up
; 0000 007B       PORTC.2 = 1;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 007C       DDRC.2 = 0;
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 007D       delay_ms(10);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 007E 
; 0000 007F 	};
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0080 
; 0000 0081    //Restore PORT states
; 0000 0082 	PORTA = pa; PORTB = pb; PORTC = pc; PORTD =pd;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0083    DDRA = da; DDRB = db; DDRC = dc;	DDRD = dd;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0084 }
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;
;
;//_____________________________________________________________________________________
;//I2C test routine, with output messages on LCD and UART.
;void i2c_test_withLCD()
; 0000 008A {
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 008B 	//I2C test
; 0000 008C    lcd_clear();
;PCODE: $00000211 VOL: 0
; 0000 008D 	lcd_putsf("Write:");
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 008E 	printf("\r\nWrite:");
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 008F 	for(i=0;i<5;i++)
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0090 	{
; 0000 0091       #asm("cli");					//disable all interrupts
;PCODE: $00000228 VOL: 0
	cli
;PCODE: $00000229 VOL: 0
; 0000 0092 		writeByte(i+65,i);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0093 		#asm("sei");         		//enable all interrupts
;PCODE: $00000230 VOL: 0
	sei
;PCODE: $00000231 VOL: 0
; 0000 0094 		lcd_putchar(i+65);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0095 		putchar(i+65);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0096 		delay_ms(300);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 0097 	}
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0098 
; 0000 0099 	delay_ms(1000);
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 009A    lcd_clear();
;PCODE: $00000247 VOL: 0
; 0000 009B 	delay_ms(500);
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 009C 	lcd_putsf("Read :");
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 009D 	printf("\r\nRead:");
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 009E 	for(i=0;i<5;i++)
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 009F 	{
; 0000 00A0       #asm("cli");					//disable all interrupts
;PCODE: $00000261 VOL: 0
	cli
;PCODE: $00000262 VOL: 0
; 0000 00A1 		j = readByte(i);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 00A2 		#asm("sei");         		//enable all interrupts
;PCODE: $00000267 VOL: 0
	sei
;PCODE: $00000268 VOL: 0
; 0000 00A3 		lcd_putchar(j);
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 00A4 		putchar(j);
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 00A5 		delay_ms(300);
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 00A6 	}
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 00A7 
; 0000 00A8 	delay_ms(3000);
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 00A9 
; 0000 00AA }
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;
;//_____________________________________________________________________________________
;//I2C test routine. Output messages only on UART
;void i2c_test()
; 0000 00AF {
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00B0 
; 0000 00B1 	//I2C test
; 0000 00B2 	i2c_init();
;PCODE: $0000027E VOL: 0
; 0000 00B3 	i2c_init();
;PCODE: $0000027F VOL: 0
; 0000 00B4 	printf("\r\nWrite:");
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
; 0000 00B5 	for(i=0;i<5;i++)
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 00B6 	{
; 0000 00B7 		writeByte(i+65,i);
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 00B8 		putchar(i+65);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 00B9 		delay_ms(300);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 00BA 	}
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 00BB 
; 0000 00BC 	delay_ms(1000);
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00BD 	printf("\r\nRead:");
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 00BE 	for(i=0;i<5;i++)
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 00BF 	{
; 0000 00C0 		j = readByte(i);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 00C1 		putchar(j);
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 00C2 		delay_ms(300);
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 00C3 	}
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 00C4 
; 0000 00C5 	delay_ms(3000);
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 00C6 }
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;
;//_____________________________________________________________________________________
;//L293D test routine. for L293D connected on PORTD.
;void l293d1_test()
; 0000 00CB {
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 00CC 	//#L293D test :
; 0000 00CD 	printf("\r\nL293D_1 Test ... ");
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 00CE 
; 0000 00CF 	PORTD.4=1;								//start motors..
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 00D0 	PORTD.6=0;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 00D1 	PORTD.5=1;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 00D2 	PORTD.7=0;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 00D3 	delay_ms(3000);
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 00D4 
; 0000 00D5 	PORTD.4=0;								//reverse direction
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 00D6 	PORTD.6=1;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 00D7 	PORTD.5=0;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 00D8 	PORTD.7=1;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 00D9 	delay_ms(3000);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 00DA 
; 0000 00DB 	PORTD.4=0;								//stop motors
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
; 0000 00DC 	PORTD.5=0;
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 00DD 	PORTD.6=0;
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 00DE 	PORTD.7=0;
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 00DF 
; 0000 00E0 	printf(" done");
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 00E1 }
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;
;//_____________________________________________________________________________________
;//L293D test routine.for L293D connected on PORTB.
;void l293d2_test()
; 0000 00E6 {
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 00E7 	//#L293D test :
; 0000 00E8 	printf("\r\nL293D_2 Test ... ");
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 00E9 
; 0000 00EA 	DDRB=0x0F;								//set lower nibble of PORTB as output
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0000 00EB 	PORTB=0x00;
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 00EC 
; 0000 00ED 	PORTB.0=1;                       //start motors in one direction
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 00EE 	PORTB.1=0;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0000 00EF 	PORTB.2=1;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 00F0 	PORTB.3=0;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 00F1 	delay_ms(3000);
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 00F2 
; 0000 00F3 	PORTB.0=0;                       //reverse directions
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 00F4 	PORTB.1=1;
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
; 0000 00F5 	PORTB.2=0;
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 00F6 	PORTB.3=1;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0000 00F7 	delay_ms(3000);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
; 0000 00F8 
; 0000 00F9 	PORTB.0=0;                       //stop motors
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 00FA 	PORTB.1=0;
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 00FB 	PORTB.2=0;
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 00FC 	PORTB.3=0;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
; 0000 00FD 
; 0000 00FE 	printf(" done");
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 00FF }
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;
;
;//_____________________________________________________________________________________
;//LCD test routine
;void lcd_test()
; 0000 0105 {
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
; 0000 0106 unsigned char j,k;
; 0000 0107 unsigned char rows=2;
; 0000 0108 unsigned char cols=16;
; 0000 0109 
; 0000 010A 	//#LCD TEST		:
; 0000 010B 	printf("\r\nLCD_test");
;PCODE: $00000336 VOL: 0
;	j -> R17
;	k -> R16
;	rows -> R19
;	cols -> R18
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
; 0000 010C 	lcd_init(cols);
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 010D 	lcd_clear();
;PCODE: $00000344 VOL: 0
; 0000 010E 
; 0000 010F 	lcd_gotoxy((cols/2)-3,(rows/2)-1);
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0110 	lcd_putsf("MEGA16");
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 0111 	lcd_gotoxy((cols/2)-7,(rows/2));
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 0112 	lcd_putsf("DEVELOPMENT BRD");
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 0113 	delay_ms(1000);
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 0114 
; 0000 0115 }
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;
;//_____________________________________________________________________________________
;//Test on board LEDs if LCD is not present
;void led_test()
; 0000 011A {
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
; 0000 011B 	//#LED TEST   :
; 0000 011C 	printf("\r\nLED Test ... ");
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
; 0000 011D 	i = 1;
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
; 0000 011E 	for(i=1;i<0x0100;)
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 011F 	{
; 0000 0120 		PORTB=(unsigned char)i;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0121 		delay_ms(200);
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 0122 		i = i<<1;
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 0123 	}
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 0124    PORTB=0x00;
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
; 0000 0125 	printf(" done");
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 0126 }
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;
;//_____________________________________________________________________________________
;//Test the ADC.
;void adc_test()
; 0000 012B {
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 012C 	//#ADC test
; 0000 012D 	printf("\r\nADC Test ...");
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 012E 
; 0000 012F 	//this will read input voltage on each ADC port, 3 times, and will output it.
; 0000 0130 	for(j=0;j<3;j++)
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 0131 	{
; 0000 0132 		for(i=0;i<6;i++)
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0133 		{
; 0000 0134 			adc_val = read_adc(i);
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
; 0000 0135 			adc_volt = (adc_val * 195.3)/10;
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
; 0000 0136 			printf("\r\nCH %d: %03d => %04d mV",i,adc_val,adc_volt);
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0137 		}
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
; 0000 0138 		delay_ms(500);
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0139 		printf("\r\n");
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
; 0000 013A 	}
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 013B 
; 0000 013C    printf("\r\n\n# DONE.");
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
; 0000 013D }
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;
;
;//_____________________________________________________________________________________
;//Infrared remote test ..
;//This routine will call above functions based on a keyPress
;void ir_test()
; 0000 0144 {
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 0145 	printf("\r\n\n Now press keys on remote\r\n");
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
; 0000 0146 	if(lcdPresent)
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
; 0000 0147 	{
; 0000 0148 		lcd_clear();
;PCODE: $000003F0 VOL: 0
; 0000 0149 		lcd_putsf("Press remote keys");
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
; 0000 014A 	}
; 0000 014B 
; 0000 014C 	while(1)
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
; 0000 014D 	{
; 0000 014E 		i = getKeyIR();
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 014F 		printf("\r\n\nKey : %d ",i);
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 0150 		if(lcdPresent)
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 0151 		{
; 0000 0152 			lcd_clear();
;PCODE: $00000407 VOL: 0
; 0000 0153 			display_num(0,0,i);
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
; 0000 0154 		}
; 0000 0155 
; 0000 0156 		//Process the keys ...
; 0000 0157 		switch(i)
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
; 0000 0158 		{
; 0000 0159 			//Key 0: Execute LCD test
; 0000 015A 			case 0:
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
; 0000 015B 					lcd_test();
;PCODE: $00000413 VOL: 0
; 0000 015C 					break;
;PCODE: $00000414 VOL: 0
; 0000 015D 
; 0000 015E 			//Key 1: L293D 1 test
; 0000 015F 			case 1:
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
; 0000 0160 					l293d1_test();
;PCODE: $00000418 VOL: 0
; 0000 0161 					break;
;PCODE: $00000419 VOL: 0
; 0000 0162 
; 0000 0163 			//Key 2: L293D 2 test
; 0000 0164 			case 2:
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 0165 					l293d2_test();
;PCODE: $0000041D VOL: 0
; 0000 0166 					break;
;PCODE: $0000041E VOL: 0
; 0000 0167 
; 0000 0168 			//Key 3: ADC Test
; 0000 0169 			case 3:
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
; 0000 016A 					adc_test();
;PCODE: $00000422 VOL: 0
; 0000 016B 					break;
;PCODE: $00000423 VOL: 0
; 0000 016C 
; 0000 016D 			//Key 4 : LED test
; 0000 016E 			case 4:
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 016F 					led_test();
;PCODE: $00000427 VOL: 0
; 0000 0170 					break;
;PCODE: $00000428 VOL: 0
; 0000 0171 
; 0000 0172 			//Key 5: I2C test without LCD
; 0000 0173 			case 5:
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 0174 					i2c_test();
;PCODE: $0000042C VOL: 0
; 0000 0175 					break;
;PCODE: $0000042D VOL: 0
; 0000 0176 
; 0000 0177 			//Key 6: I2C test with LCD
; 0000 0178 			case 6:
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 0179 					i2c_test_withLCD();
;PCODE: $00000431 VOL: 0
; 0000 017A 					break;
;PCODE: $00000432 VOL: 0
; 0000 017B 			default:
;PCODE: $00000433 VOL: 0
; 0000 017C 					break;
;PCODE: $00000434 VOL: 0
; 0000 017D 		}
;PCODE: $00000435 VOL: 0
; 0000 017E 	};
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
; 0000 017F }
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;
;
;//_____________________________________________________________________________________
;void main(void)
; 0000 0184 {
;PCODE: $0000043A VOL: 0
; 0000 0185 // Declare your local variables here
; 0000 0186 
; 0000 0187 
; 0000 0188 
; 0000 0189 //disable watchdog
; 0000 018A WDTCR = 0b00011000;
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
; 0000 018B WDTCR = 0b00010000;
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
; 0000 018C 
; 0000 018D 
; 0000 018E 
; 0000 018F 
; 0000 0190 // Input/Output Ports initialization
; 0000 0191 // Port A initialization
; 0000 0192 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0193 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0194 PORTA=0x00;
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
; 0000 0195 DDRA=0x00;
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0196 
; 0000 0197 // Port B initialization
; 0000 0198 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0199 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0                                                                            PORTB=0x00;
; 0000 019A DDRB=0xFF;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 019B 
; 0000 019C // Port C initialization
; 0000 019D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 019E // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 019F PORTC=0x00;
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 01A0 DDRC=0x00;
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 01A1 
; 0000 01A2 // Port D initialization
; 0000 01A3 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 01A4 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=T State1=T State0=T
; 0000 01A5 PORTD=0x00;
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 01A6 DDRD=0xFC;
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
; 0000 01A7 
; 0000 01A8 // Timer/Counter 0 initialization
; 0000 01A9 // Clock source: System Clock
; 0000 01AA // Clock value: Timer 0 Stopped
; 0000 01AB // Mode: Normal top=FFh
; 0000 01AC // OC0 output: Disconnected
; 0000 01AD TCCR0=0x00;
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
; 0000 01AE TCNT0=0x00;
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 01AF OCR0=0x00;
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 01B0 
; 0000 01B1 
; 0000 01B2 // Timer/Counter 1 initialization
; 0000 01B3 // Clock source: System Clock
; 0000 01B4 // Clock value: 15.625 kHz
; 0000 01B5 // Mode: Normal top=FFFFh
; 0000 01B6 // OC1A output: Discon.
; 0000 01B7 // OC1B output: Discon.
; 0000 01B8 // Noise Canceler: Off
; 0000 01B9 // Input Capture on Falling Edge
; 0000 01BA // Timer 1 Overflow Interrupt: On
; 0000 01BB // Input Capture Interrupt: Off
; 0000 01BC // Compare A Match Interrupt: Off
; 0000 01BD // Compare B Match Interrupt: Off
; 0000 01BE TCCR1A=0x00;
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
; 0000 01BF TCCR1B=0x05;
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 01C0 TCNT1H=0x00;
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
; 0000 01C1 TCNT1L=0x00;
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 01C2 ICR1H=0x00;
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 01C3 ICR1L=0x00;
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 01C4 OCR1AH=0x00;
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
; 0000 01C5 OCR1AL=0x00;
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 01C6 OCR1BH=0x00;
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
; 0000 01C7 OCR1BL=0x00;
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 01C8 
; 0000 01C9 // Timer/Counter 2 initialization
; 0000 01CA // Clock source: System Clock
; 0000 01CB // Clock value: Timer 2 Stopped
; 0000 01CC // Mode: Normal top=FFh
; 0000 01CD // OC2 output: Disconnected
; 0000 01CE ASSR=0x00;
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
; 0000 01CF TCCR2=0x00;
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
; 0000 01D0 TCNT2=0x00;
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
; 0000 01D1 OCR2=0x00;
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 01D2 
; 0000 01D3 // External Interrupt(s) initialization
; 0000 01D4 // INT0: Off
; 0000 01D5 // INT1: Off
; 0000 01D6 // INT2: Off
; 0000 01D7 MCUCR=0x00;
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 01D8 MCUCSR=0x00;
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
; 0000 01D9 
; 0000 01DA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01DB TIMSK=0x04;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01DC 
; 0000 01DD // USART initialization
; 0000 01DE // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01DF // USART Receiver: On
; 0000 01E0 // USART Transmitter: On
; 0000 01E1 // USART Mode: Asynchronous
; 0000 01E2 // USART Baud rate: 56000
; 0000 01E3 UCSRA=0x00;
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 01E4 UCSRB=0x18;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
; 0000 01E5 UCSRC=0x86;
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 01E6 UBRRH=0x00;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
; 0000 01E7 UBRRL=0x11;
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 01E8 
; 0000 01E9 
; 0000 01EA 
; 0000 01EB // Analog Comparator initialization
; 0000 01EC // Analog Comparator: Off
; 0000 01ED // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01EE ACSR=0x80;
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 01EF SFIOR=0x00;
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
; 0000 01F0 
; 0000 01F1 // ADC initialization
; 0000 01F2 // ADC Clock frequency: 250.000 kHz
; 0000 01F3 // ADC Voltage Reference: AVCC pin
; 0000 01F4 // ADC Auto Trigger Source: None
; 0000 01F5 // Only the 8 most significant bits of
; 0000 01F6 // the AD conversion result are used
; 0000 01F7 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 01F8 ADCSRA=0x86;
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
; 0000 01F9 
; 0000 01FA //Initialize I2C bus
; 0000 01FB i2c_init();
;PCODE: $00000487 VOL: 0
; 0000 01FC 
; 0000 01FD // Global enable interrupts
; 0000 01FE #asm("sei")
;PCODE: $00000488 VOL: 0
	sei
;PCODE: $00000489 VOL: 0
; 0000 01FF 
; 0000 0200 
; 0000 0201 while (1)
;PCODE: $0000048A VOL: 0
; 0000 0202       {
; 0000 0203 
; 0000 0204 		//#MAX 232 TEST :
; 0000 0205 		printf("\r\n\n\nMega16 development board for project/product/robotics development");
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0206 
; 0000 0207 
; 0000 0208 		//#Wait for SW0(PC.2) press for LCD detection. If user presses the SW0 within 3 seconds then
; 0000 0209 		//LCD is assumed to be present and LCD test routines will be run and visual feebback will
; 0000 020A 		//be displayed on LCD. If not, then LCD is assumed to be absent.
; 0000 020B 		i=0;
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
; 0000 020C 		DDRC.2=0; 				//set 2nd bit of PC as input bit
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 020D 		PORTC.2=1;				//turn on internal pull-up for that bit
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 020E 		while(i<3000)
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 020F 		{
; 0000 0210 			if(PINC.2==0)
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
; 0000 0211 			{
; 0000 0212 				lcdPresent = 1;
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
; 0000 0213 				break;
;PCODE: $000004A1 VOL: 0
; 0000 0214 			}
; 0000 0215 			else
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 0216 				lcdPresent = 0;
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0000 0217 
; 0000 0218 			i++;
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
; 0000 0219 			delay_ms(1);
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 021A 		};
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
; 0000 021B 
; 0000 021C       if(lcdPresent==1)
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
; 0000 021D 			printf("\n\rLCD is assumed to be present.");
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 021E 		else
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 021F 			printf("\n\rLCD is assumed to be absent.");
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
;PCODE: $000004C2 VOL: 0
; 0000 0220 
; 0000 0221 
; 0000 0222 		//# If LCD is present ... initialize the LCD and display message and execute test routines
; 0000 0223 		if(lcdPresent==1)
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
; 0000 0224 		{
; 0000 0225        	//Initialize and test LCD
; 0000 0226 			lcd_test();
;PCODE: $000004C7 VOL: 0
; 0000 0227 
; 0000 0228 			//EEPROM test
; 0000 0229          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 022A          i2c_test_withLCD();
;PCODE: $000004D1 VOL: 0
; 0000 022B 
; 0000 022C          //Wait for SW0 press - Test the L293D
; 0000 022D          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 022E 			l293d1_test();
;PCODE: $000004DB VOL: 0
; 0000 022F 
; 0000 0230 			//Test the ADC
; 0000 0231          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0232 			adc_test();
;PCODE: $000004E5 VOL: 0
; 0000 0233 
; 0000 0234 			//Now wait for key press on IR remote. And execute test routines according to remote key press.
; 0000 0235 			ir_test();
;PCODE: $000004E6 VOL: 0
; 0000 0236 		}
; 0000 0237 
; 0000 0238 		//# If LCD is absent we can also test 2nd L293D which is connected on PORTB.
; 0000 0239 		else
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 023A 		{
; 0000 023B        	//LED test
; 0000 023C          led_test();
;PCODE: $000004E9 VOL: 0
; 0000 023D 
; 0000 023E 			//EEPROM test
; 0000 023F          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 0240          i2c_test();
;PCODE: $000004F3 VOL: 0
; 0000 0241 
; 0000 0242          //Wait for SW0 press - Test the L293D
; 0000 0243          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0244 			l293d1_test();
;PCODE: $000004FD VOL: 0
; 0000 0245          l293d2_test();
;PCODE: $000004FE VOL: 0
; 0000 0246 
; 0000 0247 			//Test the ADC
; 0000 0248          while(PINC.2==0){delay_ms(100);};
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 0249 			adc_test();
;PCODE: $00000508 VOL: 0
; 0000 024A 
; 0000 024B 			//Now wait for key press on IR remote. And execute test routines according to remote key press.
; 0000 024C 			ir_test();
;PCODE: $00000509 VOL: 0
; 0000 024D 		}
;PCODE: $0000050A VOL: 0
; 0000 024E 
; 0000 024F 		while(1);
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 0250 
; 0000 0251       };
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 0252 }
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
