
AVRASM ver. 2.1.17  F:\mega16_kitCD\sample code\simple_line_follower\nr.asm Tue Oct 07 22:28:59 2008

F:\mega16_kitCD\sample code\simple_line_follower\nr.asm(1026): warning: Register r5 already defined by the .DEF directive
F:\mega16_kitCD\sample code\simple_line_follower\nr.asm(1027): warning: Register r4 already defined by the .DEF directive
F:\mega16_kitCD\sample code\simple_line_follower\nr.asm(1028): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adcch=R5
                 	.DEF _tmp=R4
                 	.DEF _dir=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 002a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0048 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 __RESET:
00002a 94f8      	CLI
00002b 27ee      	CLR  R30
00002c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00002d e0f1      	LDI  R31,1
00002e bffb      	OUT  GICR,R31
00002f bfeb      	OUT  GICR,R30
000030 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000031 e1f8      	LDI  R31,0x18
000032 bdf1      	OUT  WDTCR,R31
000033 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000034 e08d      	LDI  R24,(14-2)+1
000035 e0a2      	LDI  R26,2
000036 27bb      	CLR  R27
                 __CLEAR_REG:
000037 93ed      	ST   X+,R30
000038 958a      	DEC  R24
000039 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003a e080      	LDI  R24,LOW(0x400)
00003b e094      	LDI  R25,HIGH(0x400)
00003c e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00003d 93ed      	ST   X+,R30
00003e 9701      	SBIW R24,1
00003f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;STACK POINTER INITIALIZATION
000040 e5ef      	LDI  R30,LOW(0x45F)
000041 bfed      	OUT  SPL,R30
000042 e0e4      	LDI  R30,HIGH(0x45F)
000043 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000044 e6c0      	LDI  R28,LOW(0x160)
000045 e0d1      	LDI  R29,HIGH(0x160)
                 
000046 940c 00c0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type           : ATmega16
                 ;Program type        : Application
                 ;Clock frequency     : 16.000000 MHz
                 ;Memory model        : Small
                 ;External SRAM size  : 0
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;#define	LM_ON		PORTD.6=0;PORTD.4=1;
                 ;#define	RM_ON		PORTD.5=0;PORTD.7=1;
                 ;
                 ;#define	LM_OFF	PORTD.6=0;PORTD.4=0;
                 ;#define	RM_OFF	PORTD.5=0;PORTD.7=0;
                 ;
                 ;
                 ;unsigned char sensors[4];
                 ;unsigned char adcch;
                 ;unsigned char tmp;
                 ;unsigned char dir;
                 ;
                 ;#define	LEFT	0
                 ;#define	RIGHT	1
                 ;
                 ;
                 ;#define	THRE	100
                 ;
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include<delay.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0024 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
000048 93aa      	ST   -Y,R26
000049 93ea      	ST   -Y,R30
00004a 93fa      	ST   -Y,R31
00004b b7ef      	IN   R30,SREG
00004c 93ea      	ST   -Y,R30
                 ; 0000 0025 // Place your code here
                 ; 0000 0026 TCNT0=128;
00004d e8e0      	LDI  R30,LOW(128)
00004e bfe2      	OUT  0x32,R30
                 ; 0000 0027 
                 ; 0000 0028 	//Read the result
                 ; 0000 0029 	ADCSRA|=0x10;
00004f 9a34      	SBI  0x6,4
                 ; 0000 002A 	tmp = ADCH;
000050 b045      	IN   R4,5
                 ; 0000 002B 
                 ; 0000 002C 	//compare
                 ; 0000 002D 	if(tmp>THRE)
000051 e6e4      	LDI  R30,LOW(100)
000052 15e4      	CP   R30,R4
000053 f418      	BRSH _0x3
                 ; 0000 002E 		sensors[adcch]=1;
000054 d0a8      	RCALL SUBOPT_0x0
000055 e0a1      	LDI  R26,LOW(1)
000056 c002      	RJMP _0x49
                 ; 0000 002F 	else
                 _0x3:
                 ; 0000 0030 		sensors[adcch]=0;
000057 d0a5      	RCALL SUBOPT_0x0
000058 e0a0      	LDI  R26,LOW(0)
                 _0x49:
000059 83a0      	STD  Z+0,R26
                 ; 0000 0031 
                 ; 0000 0032 	//point to next
                 ; 0000 0033 	adcch++;
00005a 9453      	INC  R5
                 ; 0000 0034 	if(adcch>3)
00005b e0e3      	LDI  R30,LOW(3)
00005c 15e5      	CP   R30,R5
00005d f408      	BRSH _0x5
                 ; 0000 0035 		adcch=0;
00005e 2455      	CLR  R5
                 ; 0000 0036 
                 ; 0000 0037 	//start next conversion
                 ; 0000 0038 	ADMUX=adcch|ADC_VREF_TYPE;
                 _0x5:
00005f 2de5      	MOV  R30,R5
000060 66e0      	ORI  R30,LOW(0x60)
000061 b9e7      	OUT  0x7,R30
                 ; 0000 0039 	// Start the AD conversion
                 ; 0000 003A 	ADCSRA|=0x40;
000062 9a36      	SBI  0x6,6
                 ; 0000 003B 
                 ; 0000 003C 	PORTB = sensors[0] | (sensors[1]<<1) | (sensors[2]<<2) | (sensors[3]<<3);
                +
000063 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
000065 0fee      	LSL  R30
000066 91a0 0160 	LDS  R26,_sensors
000068 2bea      	OR   R30,R26
000069 2fae      	MOV  R26,R30
                +
00006a 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
00006c 0fee      	LSL  R30
00006d 0fee      	LSL  R30
00006e 2bea      	OR   R30,R26
00006f 2fae      	MOV  R26,R30
                +
000070 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
000072 0fee      	LSL  R30
000073 0fee      	LSL  R30
000074 0fee      	LSL  R30
000075 2bea      	OR   R30,R26
000076 bbe8      	OUT  0x18,R30
                 ; 0000 003D 
                 ; 0000 003E }
000077 91e9      	LD   R30,Y+
000078 bfef      	OUT  SREG,R30
000079 91f9      	LD   R31,Y+
00007a 91e9      	LD   R30,Y+
00007b 91a9      	LD   R26,Y+
00007c 9518      	RETI
                 ;
                 ;
                 ;// Declare your global variables here
                 ;void follow_track()
                 ; 0000 0043 {
                 _follow_track:
                 ; 0000 0044 	if(sensors[1]==1 && sensors[2]==1)
                +
00007d 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
00007f 30e1      	CPI  R30,LOW(0x1)
000080 f421      	BRNE _0x7
                +
000081 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
000083 30e1      	CPI  R30,LOW(0x1)
000084 f009      	BREQ _0x8
                 _0x7:
000085 c003      	RJMP _0x6
                 _0x8:
                 ; 0000 0045 	{
                 ; 0000 0046 		LM_ON;
000086 9896      	CBI  0x12,6
000087 9a94      	SBI  0x12,4
                 ; 0000 0047 		RM_ON;
000088 c034      	RJMP _0x4A
                 ; 0000 0048 	}
                 ; 0000 0049 	else if(sensors[1]==0 && sensors[2]==1)
                 _0x6:
                +
000089 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
00008b 30e0      	CPI  R30,0
00008c f421      	BRNE _0x13
                +
00008d 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
00008f 30e1      	CPI  R30,LOW(0x1)
000090 f009      	BREQ _0x14
                 _0x13:
000091 c006      	RJMP _0x12
                 _0x14:
                 ; 0000 004A 	{
                 ; 0000 004B 		LM_ON;
000092 9896      	CBI  0x12,6
000093 9a94      	SBI  0x12,4
                 ; 0000 004C 		RM_OFF;
000094 9895      	CBI  0x12,5
000095 9897      	CBI  0x12,7
                 ; 0000 004D 		dir=LEFT;
000096 2477      	CLR  R7
                 ; 0000 004E 	}
                 ; 0000 004F 	else if(sensors[1]==1 && sensors[2]==0)
000097 c027      	RJMP _0x1D
                 _0x12:
                +
000098 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
00009a 30e1      	CPI  R30,LOW(0x1)
00009b f421      	BRNE _0x1F
                +
00009c 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
00009e 30e0      	CPI  R30,0
00009f f009      	BREQ _0x20
                 _0x1F:
0000a0 c007      	RJMP _0x1E
                 _0x20:
                 ; 0000 0050 	{
                 ; 0000 0051 		LM_OFF;
0000a1 9896      	CBI  0x12,6
0000a2 9894      	CBI  0x12,4
                 ; 0000 0052 		RM_ON;
0000a3 9895      	CBI  0x12,5
0000a4 9a97      	SBI  0x12,7
                 ; 0000 0053 		dir=RIGHT;
0000a5 e0e1      	LDI  R30,LOW(1)
0000a6 2e7e      	MOV  R7,R30
                 ; 0000 0054 	}
                 ; 0000 0055 	else if(sensors[1]==0 && sensors[2]==0)
0000a7 c017      	RJMP _0x29
                 _0x1E:
                +
0000a8 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
0000aa 30e0      	CPI  R30,0
0000ab f421      	BRNE _0x2B
                +
0000ac 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
0000ae 30e0      	CPI  R30,0
0000af f009      	BREQ _0x2C
                 _0x2B:
0000b0 c00e      	RJMP _0x2A
                 _0x2C:
                 ; 0000 0056 	{
                 ; 0000 0057 		if(dir==LEFT)
0000b1 2077      	TST  R7
0000b2 f429      	BRNE _0x2D
                 ; 0000 0058 		{
                 ; 0000 0059 			LM_ON;
0000b3 9896      	CBI  0x12,6
0000b4 9a94      	SBI  0x12,4
                 ; 0000 005A 			RM_OFF;
0000b5 9895      	CBI  0x12,5
0000b6 9897      	CBI  0x12,7
                 ; 0000 005B 		}
                 ; 0000 005C 		else if(dir==RIGHT)
0000b7 c007      	RJMP _0x36
                 _0x2D:
0000b8 e0e1      	LDI  R30,LOW(1)
0000b9 15e7      	CP   R30,R7
0000ba f421      	BRNE _0x37
                 ; 0000 005D 		{
                 ; 0000 005E 			LM_OFF;
0000bb 9896      	CBI  0x12,6
0000bc 9894      	CBI  0x12,4
                 ; 0000 005F 			RM_ON;
                 _0x4A:
0000bd 9895      	CBI  0x12,5
0000be 9a97      	SBI  0x12,7
                 ; 0000 0060 		}
                 ; 0000 0061 	}
                 _0x37:
                 _0x36:
                 ; 0000 0062 }
                 _0x2A:
                 _0x29:
                 _0x1D:
0000bf 9508      	RET
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0066 {
                 _main:
                 ; 0000 0067 // Declare your local variables here
                 ; 0000 0068 
                 ; 0000 0069 // Input/Output Ports initialization
                 ; 0000 006A // Port A initialization
                 ; 0000 006B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 006C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 006D PORTA=0x00;
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bbeb      	OUT  0x1B,R30
                 ; 0000 006E DDRA=0x00;
0000c2 bbea      	OUT  0x1A,R30
                 ; 0000 006F 
                 ; 0000 0070 // Port B initialization
                 ; 0000 0071 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 0072 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 0073 PORTB=0x55;
0000c3 e5e5      	LDI  R30,LOW(85)
0000c4 bbe8      	OUT  0x18,R30
                 ; 0000 0074 DDRB=0xFF;
0000c5 efef      	LDI  R30,LOW(255)
0000c6 bbe7      	OUT  0x17,R30
                 ; 0000 0075 
                 ; 0000 0076 // Port C initialization
                 ; 0000 0077 //All pull up inputs
                 ; 0000 0078 PORTC=0xFF;
0000c7 bbe5      	OUT  0x15,R30
                 ; 0000 0079 DDRC =0x00;
0000c8 e0e0      	LDI  R30,LOW(0)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 007A 
                 ; 0000 007B // Port D initialization
                 ; 0000 007C PORTD=0x00;
0000ca bbe2      	OUT  0x12,R30
                 ; 0000 007D DDRD=0xFF;
0000cb efef      	LDI  R30,LOW(255)
0000cc bbe1      	OUT  0x11,R30
                 ; 0000 007E 
                 ; 0000 007F // Timer/Counter 0 initialization
                 ; 0000 0080 // Clock source: System Clock
                 ; 0000 0081 // Clock value: 250.000 kHz
                 ; 0000 0082 // Mode: Normal top=FFh
                 ; 0000 0083 // OC0 output: Disconnected
                 ; 0000 0084 TCCR0=0x03;
0000cd e0e3      	LDI  R30,LOW(3)
0000ce bfe3      	OUT  0x33,R30
                 ; 0000 0085 TCNT0=0x00;
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 bfe2      	OUT  0x32,R30
                 ; 0000 0086 OCR0=0x00;
0000d1 bfec      	OUT  0x3C,R30
                 ; 0000 0087 
                 ; 0000 0088 // Timer/Counter 1 initialization
                 ; 0000 0089 // Clock source: System Clock
                 ; 0000 008A // Clock value: Timer 1 Stopped
                 ; 0000 008B // Mode: Normal top=FFFFh
                 ; 0000 008C // OC1A output: Discon.
                 ; 0000 008D // OC1B output: Discon.
                 ; 0000 008E // Noise Canceler: Off
                 ; 0000 008F // Input Capture on Falling Edge
                 ; 0000 0090 // Timer 1 Overflow Interrupt: Off
                 ; 0000 0091 // Input Capture Interrupt: Off
                 ; 0000 0092 // Compare A Match Interrupt: Off
                 ; 0000 0093 // Compare B Match Interrupt: Off
                 ; 0000 0094 TCCR1A=0x00;
0000d2 bdef      	OUT  0x2F,R30
                 ; 0000 0095 TCCR1B=0x00;
0000d3 bdee      	OUT  0x2E,R30
                 ; 0000 0096 TCNT1H=0x00;
0000d4 bded      	OUT  0x2D,R30
                 ; 0000 0097 TCNT1L=0x00;
0000d5 bdec      	OUT  0x2C,R30
                 ; 0000 0098 ICR1H=0x00;
0000d6 bde7      	OUT  0x27,R30
                 ; 0000 0099 ICR1L=0x00;
0000d7 bde6      	OUT  0x26,R30
                 ; 0000 009A OCR1AH=0x00;
0000d8 bdeb      	OUT  0x2B,R30
                 ; 0000 009B OCR1AL=0x00;
0000d9 bdea      	OUT  0x2A,R30
                 ; 0000 009C OCR1BH=0x00;
0000da bde9      	OUT  0x29,R30
                 ; 0000 009D OCR1BL=0x00;
0000db bde8      	OUT  0x28,R30
                 ; 0000 009E 
                 ; 0000 009F // Timer/Counter 2 initialization
                 ; 0000 00A0 // Clock source: System Clock
                 ; 0000 00A1 // Clock value: Timer 2 Stopped
                 ; 0000 00A2 // Mode: Normal top=FFh
                 ; 0000 00A3 // OC2 output: Disconnected
                 ; 0000 00A4 ASSR=0x00;
0000dc bde2      	OUT  0x22,R30
                 ; 0000 00A5 TCCR2=0x00;
0000dd bde5      	OUT  0x25,R30
                 ; 0000 00A6 TCNT2=0x00;
0000de bde4      	OUT  0x24,R30
                 ; 0000 00A7 OCR2=0x00;
0000df bde3      	OUT  0x23,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // External Interrupt(s) initialization
                 ; 0000 00AA // INT0: Off
                 ; 0000 00AB // INT1: Off
                 ; 0000 00AC // INT2: Off
                 ; 0000 00AD MCUCR=0x00;
0000e0 bfe5      	OUT  0x35,R30
                 ; 0000 00AE MCUCSR=0x00;
0000e1 bfe4      	OUT  0x34,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00B1 TIMSK=0x01;
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 bfe9      	OUT  0x39,R30
                 ; 0000 00B2 
                 ; 0000 00B3 // Analog Comparator initialization
                 ; 0000 00B4 // Analog Comparator: Off
                 ; 0000 00B5 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00B6 ACSR=0x80;
0000e4 e8e0      	LDI  R30,LOW(128)
0000e5 b9e8      	OUT  0x8,R30
                 ; 0000 00B7 SFIOR=0x00;
0000e6 e0e0      	LDI  R30,LOW(0)
0000e7 bfe0      	OUT  0x30,R30
                 ; 0000 00B8 
                 ; 0000 00B9 // ADC initialization
                 ; 0000 00BA // ADC Clock frequency: 250.000 kHz
                 ; 0000 00BB // ADC Voltage Reference: AVCC pin
                 ; 0000 00BC // ADC Auto Trigger Source: None
                 ; 0000 00BD // Only the 8 most significant bits of
                 ; 0000 00BE // the AD conversion result are used
                 ; 0000 00BF ADMUX=ADC_VREF_TYPE;
0000e8 e6e0      	LDI  R30,LOW(96)
0000e9 b9e7      	OUT  0x7,R30
                 ; 0000 00C0 ADCSRA=0x86;
0000ea e8e6      	LDI  R30,LOW(134)
0000eb b9e6      	OUT  0x6,R30
                 ; 0000 00C1 
                 ; 0000 00C2 
                 ; 0000 00C3 adcch=0;
0000ec 2455      	CLR  R5
                 ; 0000 00C4 
                 ; 0000 00C5 // Global enable interrupts
                 ; 0000 00C6 while(PINC.2==1);delay_ms(500);
                 _0x40:
0000ed e0a0      	LDI  R26,0
0000ee 999a      	SBIC 0x13,2
0000ef e0a1      	LDI  R26,1
0000f0 30a1      	CPI  R26,LOW(0x1)
0000f1 f3d9      	BREQ _0x40
0000f2 efe4      	LDI  R30,LOW(500)
0000f3 e0f1      	LDI  R31,HIGH(500)
0000f4 93fa      	ST   -Y,R31
0000f5 93ea      	ST   -Y,R30
0000f6 940e 0102 	CALL _delay_ms
                 ; 0000 00C7 
                 ; 0000 00C8 #asm("sei")
0000f8 9478      	sei
                 ; 0000 00C9 
                 ; 0000 00CA //enable L293D
                 ; 0000 00CB PORTD.3=1;
0000f9 9a93      	SBI  0x12,3
                 ; 0000 00CC 
                 ; 0000 00CD while (1)
                 _0x45:
                 ; 0000 00CE       {
                 ; 0000 00CF       	// Place your code here
                 ; 0000 00D0 			follow_track();
0000fa df82      	RCALL _follow_track
                 ; 0000 00D1       };
0000fb cffe      	RJMP _0x45
                 ; 0000 00D2 }
                 _0x48:
0000fc cfff      	RJMP _0x48
                 
                 	.DSEG
                 _sensors:
000160           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0000fd 2de5      	MOV  R30,R5
0000fe e0f0      	LDI  R31,0
0000ff 5ae0      	SUBI R30,LOW(-_sensors)
000100 4ffe      	SBCI R31,HIGH(-_sensors)
000101 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000102 91e9      	ld   r30,y+
000103 91f9      	ld   r31,y+
000104 9630      	adiw r30,0
000105 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000106 ea80     +LDI R24 , LOW ( 0xFA0 )
000107 e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000108 9701     +SBIW R24 , 1
000109 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00010a 95a8      	wdr
00010b 9731      	sbiw r30,1
00010c f7c9      	brne __delay_ms0
                 __delay_ms1:
00010d 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   0 r1 :   0 r2 :   0 r3 :   0 r4 :   2 r5 :   6 r6 :   0 r7 :   4 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:  16 r27:   1 r28:   1 r29:   1 r30: 112 r31:  11 
x  :   2 y  :  12 z  :   1 
Registers used: 14 out of 35 (40.0%)

ATmega16 instruction use summary:
adc   :   0 add   :   0 adiw  :   1 and   :   0 andi  :   0 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   6 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 brne  :  10 brpl  :   0 
brsh  :   2 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :   1 cbi   :  13 cbr   :   0 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :   5 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   3 cpc   :   0 cpi   :   9 cpse  :   0 
dec   :   1 des   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   2 inc   :   1 jmp   :  22 ld    :   6 
ldd   :   0 ldi   :  37 lds   :  12 lpm   :   0 lsl   :   6 lsr   :   0 
mov   :   5 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 
nop   :   0 or    :   3 ori   :   1 out   :  44 pop   :   0 push  :   0 
rcall :   3 ret   :   3 reti  :   1 rjmp  :  11 rol   :   0 ror   :   0 
sbc   :   0 sbci  :   1 sbi   :   8 sbic  :   1 sbis  :   0 sbiw  :   3 
sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 
sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    :   8 std   :   1 sts   :   0 sub   :   0 
subi  :   1 swap  :   0 tst   :   1 wdr   :   1 
Instructions used: 36 out of 112 (32.1%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00021c    540      0    540   16384   3.3%
[.dseg] 0x000060 0x000164      0      4      4    1024   0.4%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 3 warnings
