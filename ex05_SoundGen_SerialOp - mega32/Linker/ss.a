;/*****************************************************
;Chip type           : ATmega16
;Program type        : Application
;Clock frequency     : 16.000000 MHz
;Memory model        : Small
;External SRAM size  : 0
;Data Stack size     : 256
;
;What does this program do ?
;###########################
;
;- Generates sound using the CTC mode of timer 1.
;- By changing the OCR1A value, we can generate square
;  waves of different frequencies.
;- Output is available on PD5(OC1A) pin.
;- Connect this pin to on speaker using external
;  wire to listen the sound.
;- Press SW1 or SW2 to start melody.
;- Program all prints the frequency being generated on
;  serial interface.
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <delay.h>
;
;
;
;//Frequency definitions :
;
;//Mandra
;#define n_Sa    131
;#define n_kRe   139
;#define n_Re    147
;#define n_Ga    156
;#define n_kGa   165
;#define n_Ma    175
;#define n_tMa   185
;#define n_Pa    196
;#define n_kDh   208
;#define n_Dh    220
;#define n_kNi   233
;#define n_Ni    247
;
;//Madhya
;#define m_Sa    261
;#define m_kRe   277
;#define m_Re    294
;#define m_Ga    311
;#define m_kGa   329
;#define m_Ma    349
;#define m_tMa   370
;#define m_Pa    392
;#define m_kDh   415
;#define m_Dh    440
;#define m_kNi   466
;#define m_Ni    494
;
;//Taar
;#define t_Sa    523
;#define t_kRe   554
;#define t_Re    587
;#define t_Ga    622
;#define t_kGa   659
;#define t_Ma    698
;#define t_tMa   740
;#define t_Pa    784
;#define t_kDh   831
;#define t_Dh    880
;#define t_kNi   932
;#define t_Ni    988
;
;//Frequency definitions : WESTERN
;
;//Mandra
;#define c0      131
;//#define n_kRe   139
;#define d0      147
;#define e0      156
;//#define n_kGa   165
;#define f0      175
;//#define n_tMa   185
;#define g0      196
;//#define n_kDh   208
;#define a0      220
;//#define n_kNi   233
;#define b0      247
;
;
;//Madhya
;#define c1      261
;//#define m_kRe   277
;#define d1      294
;#define e1      329//             311
;//#define m_kGa   329
;#define f1      349
;//#define m_tMa   370
;#define g1      392
;//#define m_kDh   415
;#define a1      440
;//#define m_kNi   466
;#define b1      494
;
;//Taar
;#define c2      523
;//#define t_kRe   554
;#define d2      587
;#define e2      622
;//#define t_kGa   659
;#define f2      698
;//#define t_tMa   740
;#define g2      784
;//#define t_kDh   831
;#define a2      880
;//#define t_kNi   932
;#define b2      988
;
;
;flash unsigned int mel_1[10]={m_Sa,m_Re,m_Ga,m_Ma,m_Pa,m_Dh,m_Ni,t_Sa};
;flash unsigned int bhairavi[16]={m_Sa,m_kRe,m_kGa,m_Ma,m_Pa,m_kDh,m_kNi,t_Sa,
;                            t_Sa,m_kNi,m_kDh,m_Pa,m_Ma,m_kGa,m_kRe,m_Sa};
;
;flash unsigned int saregama[15]={m_Sa,m_Re,m_Ga,m_Ma,m_Pa,m_Dh,m_Ni,t_Sa,
;											m_Ni,m_Dh,m_Pa,m_Ma,m_Ga,m_Re,m_Sa};
;
;
;flash unsigned int twinkle[42]={c1,c1,g1,g1,a1,a1,g1,f1,f1,e1,e1,d1,d1,c1,g1,g1,
;                          f1,f1,e1,e1,d1,g1,g1,f1,f1,e1,e1,d1,c1,c1,g1,g1,
;                          a1,a1,g1,f1,f1,e1,e1,d1,d1,c1};
;
;unsigned char cnt;
;
;
;
;
;
;// Declare your global variables here
;/*__________________________________________________________________________________________*/
;//-This function calculates value of OCR1A register to generate desired frequency, when
;// timer1 is operating at 2MHz
;unsigned int calc_OCR(unsigned int _freq)
; 0000 0090 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0091    return (unsigned int)(2000000/((long int)_freq*2));
;	_freq -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0092 }
;PCODE: $00000017 VOL: 0
;
;
;void main(void)
; 0000 0096 {
;PCODE: $00000018 VOL: 0
; 0000 0097 
; 0000 0098 // Input/Output Ports initialization
; 0000 0099 // Port A initialization
; 0000 009A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009C PORTA=0x00;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 009D DDRA=0x00;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 009E 
; 0000 009F // Port B initialization
; 0000 00A0 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 00A1 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 00A2 PORTB=0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 00A3 DDRB=0xFF;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 00A4 
; 0000 00A5 // Port C initialization
; 0000 00A6 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A7 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A8 PORTC=0b00001100;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 00A9 DDRC =0b00000000;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 00AA 
; 0000 00AB // Port D initialization
; 0000 00AC PORTD=0x00;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 00AD DDRD= 0b00100000;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 00AE 
; 0000 00AF // Timer/Counter 0 initialization
; 0000 00B0 // Clock source: System Clock
; 0000 00B1 // Clock value: Timer 0 Stopped
; 0000 00B2 // Mode: Normal top=FFh
; 0000 00B3 // OC0 output: Disconnected
; 0000 00B4 TCCR0=0x00;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 00B5 TCNT0=0x00;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 00B6 OCR0=0x00;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 00B7 
; 0000 00B8 // Clock source: System Clock
; 0000 00B9 // Clock value: 2000.000 kHz
; 0000 00BA // Mode: CTC top=OCR1A
; 0000 00BB // OC1A output: Toggle
; 0000 00BC // OC1B output: Discon.
; 0000 00BD // Noise Canceler: Off
; 0000 00BE // Input Capture on Falling Edge
; 0000 00BF // Timer 1 Overflow Interrupt: Off
; 0000 00C0 // Input Capture Interrupt: Off
; 0000 00C1 // Compare A Match Interrupt: Off
; 0000 00C2 // Compare B Match Interrupt: Off
; 0000 00C3 TCCR1A=0x40;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 00C4 TCCR1B=0x0A;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 00C5 TCNT1H=0x00;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 00C6 TCNT1L=0x00;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 00C7 ICR1H=0x00;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 00C8 ICR1L=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 00C9 OCR1AH=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 00CA OCR1AL=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 00CB OCR1BH=0x00;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 00CC OCR1BL=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 00CD 
; 0000 00CE 
; 0000 00CF // Timer/Counter 2 initialization
; 0000 00D0 // Clock source: System Clock
; 0000 00D1 // Clock value: Timer 2 Stopped
; 0000 00D2 // Mode: Normal top=FFh
; 0000 00D3 // OC2 output: Disconnected
; 0000 00D4 ASSR=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 00D5 TCCR2=0x00;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 00D6 TCNT2=0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 00D7 OCR2=0x00;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 00D8 
; 0000 00D9 // External Interrupt(s) initialization
; 0000 00DA // INT0: Off
; 0000 00DB // INT1: Off
; 0000 00DC // INT2: Off
; 0000 00DD MCUCR=0x00;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00DE MCUCSR=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 00DF 
; 0000 00E0 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E1 TIMSK=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 00E2 
; 0000 00E3 // USART initialization
; 0000 00E4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E5 // USART Receiver: Off
; 0000 00E6 // USART Transmitter: On
; 0000 00E7 // USART Mode: Asynchronous
; 0000 00E8 // USART Baud Rate: 56000
; 0000 00E9 UCSRA=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 00EA UCSRB=0x08;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00EB UCSRC=0x86;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00EC UBRRH=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00ED UBRRL=0x11;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 00EE 
; 0000 00EF // Analog Comparator initialization
; 0000 00F0 // Analog Comparator: Off
; 0000 00F1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F2 ACSR=0x80;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 00F3 SFIOR=0x00;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00F4 
; 0000 00F5 delay_ms(200);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00F6 
; 0000 00F7 while (1)
;PCODE: $00000062 VOL: 0
; 0000 00F8    {
; 0000 00F9       // Place your code here
; 0000 00FA 		PORTD.5=0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 00FB 		OCR1A=0;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00FC 
; 0000 00FD 		if(PINC.2==0)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00FE 		{
; 0000 00FF 			for(cnt=0;cnt<42;cnt++)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0100 			{
; 0000 0101 				OCR1A = calc_OCR(twinkle[cnt]);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0102 				printf("%d ",OCR1A);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0103 				delay_ms(300);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0104 				OCR1A=0;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0105 				delay_ms(100);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0106 
; 0000 0107 			}
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0108 		}
; 0000 0109 		else if(PINC.3==0)
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 010A 		{
; 0000 010B 			for(cnt=0;cnt<15;cnt++)
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 010C 			{
; 0000 010D 				OCR1A = calc_OCR(saregama[cnt]);
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 010E 				printf("%d ",OCR1A);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 010F 				delay_ms(300);
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 0110 				OCR1A=0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0111 				delay_ms(100);
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0112 
; 0000 0113 			}
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0114 
; 0000 0115 		}
; 0000 0116 
; 0000 0117 	};
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0118 }
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
