
AVRASM ver. 2.1.30  D:\mega16_kitCD\sample code\ex05_SoundGen_SerialOp\List\ss.asm Fri May 15 18:14:11 2009

D:\mega16_kitCD\sample code\ex05_SoundGen_SerialOp\List\ss.asm(1023): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.04.0a Standard
                 ;(C) Copyright 1998-2009 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega16
                 ;Program type             : Application
                 ;Clock frequency          : 16.000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 256 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _cnt=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 006f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _saregama:
00002a 0105
00002b 0126
00002c 0137
00002d 015d      	.DB  0x5,0x1,0x26,0x1,0x37,0x1,0x5D,0x1
00002e 0188
00002f 01b8
000030 01ee
000031 020b      	.DB  0x88,0x1,0xB8,0x1,0xEE,0x1,0xB,0x2
000032 0001
000033 01ee
000034 01b8
000035 0188      	.DB  0x1,0x0,0xEE,0x1,0xB8,0x1,0x88,0x1
000036 015d
000037 0137
000038 0126
000039 0105      	.DB  0x5D,0x1,0x37,0x1,0x26,0x1,0x5,0x1
                 _twinkle:
00003a 0105
00003b 0105
00003c 0188
00003d 0188      	.DB  0x5,0x1,0x5,0x1,0x88,0x1,0x88,0x1
00003e 01b8
00003f 01b8
000040 0188
000041 015d      	.DB  0xB8,0x1,0xB8,0x1,0x88,0x1,0x5D,0x1
000042 015d
000043 0149
000044 0149
000045 0126      	.DB  0x5D,0x1,0x49,0x1,0x49,0x1,0x26,0x1
000046 0126
000047 0105
000048 0188
000049 0188      	.DB  0x26,0x1,0x5,0x1,0x88,0x1,0x88,0x1
00004a 015d
00004b 015d
00004c 0149
00004d 0149      	.DB  0x5D,0x1,0x5D,0x1,0x49,0x1,0x49,0x1
00004e 0126
00004f 0188
000050 0188
000051 015d      	.DB  0x26,0x1,0x88,0x1,0x88,0x1,0x5D,0x1
000052 015d
000053 0149
000054 0149
000055 0126      	.DB  0x5D,0x1,0x49,0x1,0x49,0x1,0x26,0x1
000056 0105
000057 0105
000058 0188
000059 0188      	.DB  0x5,0x1,0x5,0x1,0x88,0x1,0x88,0x1
00005a 01b8
00005b 01b8
00005c 0188
00005d 015d      	.DB  0xB8,0x1,0xB8,0x1,0x88,0x1,0x5D,0x1
00005e 015d
00005f 0149
000060 0149
000061 0126      	.DB  0x5D,0x1,0x49,0x1,0x49,0x1,0x26,0x1
000062 0126
000063 0105      	.DB  0x26,0x1,0x5,0x1
                 _tbl10_G100:
000064 2710
000065 03e8
000066 0064
000067 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000068 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000069 1000
00006a 0100
00006b 0010
00006c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
00006d 6425
00006e 0020      	.DB  0x25,0x64,0x20,0x0
                 __RESET:
00006f 94f8      	CLI
000070 27ee      	CLR  R30
000071 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000072 e0f1      	LDI  R31,1
000073 bffb      	OUT  GICR,R31
000074 bfeb      	OUT  GICR,R30
000075 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000076 e1f8      	LDI  R31,0x18
000077 bdf1      	OUT  WDTCR,R31
000078 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000079 e08d      	LDI  R24,(14-2)+1
00007a e0a2      	LDI  R26,2
00007b 27bb      	CLR  R27
                 __CLEAR_REG:
00007c 93ed      	ST   X+,R30
00007d 958a      	DEC  R24
00007e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007f e080      	LDI  R24,LOW(0x400)
000080 e094      	LDI  R25,HIGH(0x400)
000081 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000082 93ed      	ST   X+,R30
000083 9701      	SBIW R24,1
000084 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;STACK POINTER INITIALIZATION
000085 e5ef      	LDI  R30,LOW(0x45F)
000086 bfed      	OUT  SPL,R30
000087 e0e4      	LDI  R30,HIGH(0x45F)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e6c0      	LDI  R28,LOW(0x160)
00008a e0d1      	LDI  R29,HIGH(0x160)
                 
00008b 940c 009d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type           : ATmega16
                 ;Program type        : Application
                 ;Clock frequency     : 16.000000 MHz
                 ;Memory model        : Small
                 ;External SRAM size  : 0
                 ;Data Stack size     : 256
                 ;
                 ;What does this program do ?
                 ;###########################
                 ;
                 ;- Generates sound using the CTC mode of timer 1.
                 ;- By changing the OCR1A value, we can generate square
                 ;  waves of different frequencies.
                 ;- Output is available on PD5(OC1A) pin.
                 ;- Connect this pin to on speaker using external
                 ;  wire to listen the sound.
                 ;- Press SW1 or SW2 to start melody.
                 ;- Program all prints the frequency being generated on
                 ;  serial interface.
                 ;*****************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;
                 ;
                 ;//Frequency definitions :
                 ;
                 ;//Mandra
                 ;#define n_Sa    131
                 ;#define n_kRe   139
                 ;#define n_Re    147
                 ;#define n_Ga    156
                 ;#define n_kGa   165
                 ;#define n_Ma    175
                 ;#define n_tMa   185
                 ;#define n_Pa    196
                 ;#define n_kDh   208
                 ;#define n_Dh    220
                 ;#define n_kNi   233
                 ;#define n_Ni    247
                 ;
                 ;//Madhya
                 ;#define m_Sa    261
                 ;#define m_kRe   277
                 ;#define m_Re    294
                 ;#define m_Ga    311
                 ;#define m_kGa   329
                 ;#define m_Ma    349
                 ;#define m_tMa   370
                 ;#define m_Pa    392
                 ;#define m_kDh   415
                 ;#define m_Dh    440
                 ;#define m_kNi   466
                 ;#define m_Ni    494
                 ;
                 ;//Taar
                 ;#define t_Sa    523
                 ;#define t_kRe   554
                 ;#define t_Re    587
                 ;#define t_Ga    622
                 ;#define t_kGa   659
                 ;#define t_Ma    698
                 ;#define t_tMa   740
                 ;#define t_Pa    784
                 ;#define t_kDh   831
                 ;#define t_Dh    880
                 ;#define t_kNi   932
                 ;#define t_Ni    988
                 ;
                 ;//Frequency definitions : WESTERN
                 ;
                 ;//Mandra
                 ;#define c0      131
                 ;//#define n_kRe   139
                 ;#define d0      147
                 ;#define e0      156
                 ;//#define n_kGa   165
                 ;#define f0      175
                 ;//#define n_tMa   185
                 ;#define g0      196
                 ;//#define n_kDh   208
                 ;#define a0      220
                 ;//#define n_kNi   233
                 ;#define b0      247
                 ;
                 ;
                 ;//Madhya
                 ;#define c1      261
                 ;//#define m_kRe   277
                 ;#define d1      294
                 ;#define e1      329//             311
                 ;//#define m_kGa   329
                 ;#define f1      349
                 ;//#define m_tMa   370
                 ;#define g1      392
                 ;//#define m_kDh   415
                 ;#define a1      440
                 ;//#define m_kNi   466
                 ;#define b1      494
                 ;
                 ;//Taar
                 ;#define c2      523
                 ;//#define t_kRe   554
                 ;#define d2      587
                 ;#define e2      622
                 ;//#define t_kGa   659
                 ;#define f2      698
                 ;//#define t_tMa   740
                 ;#define g2      784
                 ;//#define t_kDh   831
                 ;#define a2      880
                 ;//#define t_kNi   932
                 ;#define b2      988
                 ;
                 ;
                 ;flash unsigned int mel_1[10]={m_Sa,m_Re,m_Ga,m_Ma,m_Pa,m_Dh,m_Ni,t_Sa};
                 ;flash unsigned int bhairavi[16]={m_Sa,m_kRe,m_kGa,m_Ma,m_Pa,m_kDh,m_kNi,t_Sa,
                 ;                            t_Sa,m_kNi,m_kDh,m_Pa,m_Ma,m_kGa,m_kRe,m_Sa};
                 ;
                 ;flash unsigned int saregama[16]={m_Sa,m_Re,m_Ga,m_Ma,m_Pa,m_Dh,m_Ni,t_Sa,1,
                 ;											m_Ni,m_Dh,m_Pa,m_Ma,m_Ga,m_Re,m_Sa};
                 ;
                 ;
                 ;flash unsigned int twinkle[42]={c1,c1,g1,g1,a1,a1,g1,f1,f1,e1,e1,d1,d1,c1,g1,g1,
                 ;                          f1,f1,e1,e1,d1,g1,g1,f1,f1,e1,e1,d1,c1,c1,g1,g1,
                 ;                          a1,a1,g1,f1,f1,e1,e1,d1,d1,c1};
                 ;
                 ;unsigned char cnt;
                 ;
                 ;
                 ;
                 ;// Declare your global variables here
                 ;/*__________________________________________________________________________________________*/
                 ;//-This function calculates value of OCR1A register to generate desired frequency, when
                 ;// timer1 is operating at 2MHz
                 ;unsigned int calc_OCR(unsigned int _freq)
                 ; 0000 008E {
                 
                 	.CSEG
                 _calc_OCR:
                 ; 0000 008F    return (unsigned int)(2000000/((long int)_freq*2));
                 ;	_freq -> Y+0
00008d 81e8      	LD   R30,Y
00008e 81f9      	LDD  R31,Y+1
00008f 2766      	CLR  R22
000090 2777      	CLR  R23
000091 940e 0334 	CALL __LSLD1
                +
000093 e8a0     +LDI R26 , LOW ( 0x1E8480 )
000094 e8b4     +LDI R27 , HIGH ( 0x1E8480 )
000095 e18e     +LDI R24 , BYTE3 ( 0x1E8480 )
000096 e090     +LDI R25 , BYTE4 ( 0x1E8480 )
                 	__GETD2N 0x1E8480
000097 940e 035e 	CALL __DIVD21
000099 2766      	CLR  R22
00009a 2777      	CLR  R23
00009b 9622      	ADIW R28,2
00009c 9508      	RET
                 ; 0000 0090 }
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0094 {
                 _main:
                 ; 0000 0095 
                 ; 0000 0096 // Input/Output Ports initialization
                 ; 0000 0097 // Port A initialization
                 ; 0000 0098 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0099 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 009A PORTA=0x00;
00009d e0e0      	LDI  R30,LOW(0)
00009e bbeb      	OUT  0x1B,R30
                 ; 0000 009B DDRA=0x00;
00009f bbea      	OUT  0x1A,R30
                 ; 0000 009C 
                 ; 0000 009D // Port B initialization
                 ; 0000 009E // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 009F // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 00A0 PORTB=0x00;
0000a0 bbe8      	OUT  0x18,R30
                 ; 0000 00A1 DDRB=0xFF;
0000a1 efef      	LDI  R30,LOW(255)
0000a2 bbe7      	OUT  0x17,R30
                 ; 0000 00A2 
                 ; 0000 00A3 // Port C initialization
                 ; 0000 00A4 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00A5 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00A6 PORTC=0b00001100;
0000a3 e0ec      	LDI  R30,LOW(12)
0000a4 bbe5      	OUT  0x15,R30
                 ; 0000 00A7 DDRC =0b00000000;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bbe4      	OUT  0x14,R30
                 ; 0000 00A8 
                 ; 0000 00A9 // Port D initialization
                 ; 0000 00AA PORTD=0x00;
0000a7 bbe2      	OUT  0x12,R30
                 ; 0000 00AB DDRD= 0b00100000;
0000a8 e2e0      	LDI  R30,LOW(32)
0000a9 bbe1      	OUT  0x11,R30
                 ; 0000 00AC 
                 ; 0000 00AD // Timer/Counter 0 initialization
                 ; 0000 00AE // Clock source: System Clock
                 ; 0000 00AF // Clock value: Timer 0 Stopped
                 ; 0000 00B0 // Mode: Normal top=FFh
                 ; 0000 00B1 // OC0 output: Disconnected
                 ; 0000 00B2 TCCR0=0x00;
0000aa e0e0      	LDI  R30,LOW(0)
0000ab bfe3      	OUT  0x33,R30
                 ; 0000 00B3 TCNT0=0x00;
0000ac bfe2      	OUT  0x32,R30
                 ; 0000 00B4 OCR0=0x00;
0000ad bfec      	OUT  0x3C,R30
                 ; 0000 00B5 
                 ; 0000 00B6 // Clock source: System Clock
                 ; 0000 00B7 // Clock value: 2000.000 kHz
                 ; 0000 00B8 // Mode: CTC top=OCR1A
                 ; 0000 00B9 // OC1A output: Toggle
                 ; 0000 00BA // OC1B output: Discon.
                 ; 0000 00BB // Noise Canceler: Off
                 ; 0000 00BC // Input Capture on Falling Edge
                 ; 0000 00BD // Timer 1 Overflow Interrupt: Off
                 ; 0000 00BE // Input Capture Interrupt: Off
                 ; 0000 00BF // Compare A Match Interrupt: Off
                 ; 0000 00C0 // Compare B Match Interrupt: Off
                 ; 0000 00C1 TCCR1A=0x40;
0000ae e4e0      	LDI  R30,LOW(64)
0000af bdef      	OUT  0x2F,R30
                 ; 0000 00C2 TCCR1B=0x0A;
0000b0 e0ea      	LDI  R30,LOW(10)
0000b1 bdee      	OUT  0x2E,R30
                 ; 0000 00C3 TCNT1H=0x00;
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bded      	OUT  0x2D,R30
                 ; 0000 00C4 TCNT1L=0x00;
0000b4 bdec      	OUT  0x2C,R30
                 ; 0000 00C5 ICR1H=0x00;
0000b5 bde7      	OUT  0x27,R30
                 ; 0000 00C6 ICR1L=0x00;
0000b6 bde6      	OUT  0x26,R30
                 ; 0000 00C7 OCR1AH=0x00;
0000b7 bdeb      	OUT  0x2B,R30
                 ; 0000 00C8 OCR1AL=0x00;
0000b8 bdea      	OUT  0x2A,R30
                 ; 0000 00C9 OCR1BH=0x00;
0000b9 bde9      	OUT  0x29,R30
                 ; 0000 00CA OCR1BL=0x00;
0000ba bde8      	OUT  0x28,R30
                 ; 0000 00CB 
                 ; 0000 00CC 
                 ; 0000 00CD // Timer/Counter 2 initialization
                 ; 0000 00CE // Clock source: System Clock
                 ; 0000 00CF // Clock value: Timer 2 Stopped
                 ; 0000 00D0 // Mode: Normal top=FFh
                 ; 0000 00D1 // OC2 output: Disconnected
                 ; 0000 00D2 ASSR=0x00;
0000bb bde2      	OUT  0x22,R30
                 ; 0000 00D3 TCCR2=0x00;
0000bc bde5      	OUT  0x25,R30
                 ; 0000 00D4 TCNT2=0x00;
0000bd bde4      	OUT  0x24,R30
                 ; 0000 00D5 OCR2=0x00;
0000be bde3      	OUT  0x23,R30
                 ; 0000 00D6 
                 ; 0000 00D7 // External Interrupt(s) initialization
                 ; 0000 00D8 // INT0: Off
                 ; 0000 00D9 // INT1: Off
                 ; 0000 00DA // INT2: Off
                 ; 0000 00DB MCUCR=0x00;
0000bf bfe5      	OUT  0x35,R30
                 ; 0000 00DC MCUCSR=0x00;
0000c0 bfe4      	OUT  0x34,R30
                 ; 0000 00DD 
                 ; 0000 00DE // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00DF TIMSK=0x00;
0000c1 bfe9      	OUT  0x39,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // USART initialization
                 ; 0000 00E2 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00E3 // USART Receiver: Off
                 ; 0000 00E4 // USART Transmitter: On
                 ; 0000 00E5 // USART Mode: Asynchronous
                 ; 0000 00E6 // USART Baud Rate: 56000
                 ; 0000 00E7 UCSRA=0x00;
0000c2 b9eb      	OUT  0xB,R30
                 ; 0000 00E8 UCSRB=0x08;
0000c3 e0e8      	LDI  R30,LOW(8)
0000c4 b9ea      	OUT  0xA,R30
                 ; 0000 00E9 UCSRC=0x86;
0000c5 e8e6      	LDI  R30,LOW(134)
0000c6 bde0      	OUT  0x20,R30
                 ; 0000 00EA UBRRH=0x00;
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 bde0      	OUT  0x20,R30
                 ; 0000 00EB UBRRL=0x11;
0000c9 e1e1      	LDI  R30,LOW(17)
0000ca b9e9      	OUT  0x9,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Analog Comparator initialization
                 ; 0000 00EE // Analog Comparator: Off
                 ; 0000 00EF // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00F0 ACSR=0x80;
0000cb e8e0      	LDI  R30,LOW(128)
0000cc b9e8      	OUT  0x8,R30
                 ; 0000 00F1 SFIOR=0x00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe0      	OUT  0x30,R30
                 ; 0000 00F2 
                 ; 0000 00F3 delay_ms(200);
0000cf ece8      	LDI  R30,LOW(200)
0000d0 e0f0      	LDI  R31,HIGH(200)
0000d1 940e 02c1 	CALL SUBOPT_0x0
                 ; 0000 00F4 
                 ; 0000 00F5 while (1)
                 _0x3:
                 ; 0000 00F6    {
                 ; 0000 00F7       // Place your code here
                 ; 0000 00F8 		PORTD.5=0;
0000d3 9895      	CBI  0x12,5
                 ; 0000 00F9 		OCR1A=0;
0000d4 940e 02c5 	CALL SUBOPT_0x1
                 ; 0000 00FA 
                 ; 0000 00FB 		if(PINC.2==0)
0000d6 999a      	SBIC 0x13,2
0000d7 c012      	RJMP _0x8
                 ; 0000 00FC 		{
                 ; 0000 00FD 			for(cnt=0;cnt<42;cnt++)
0000d8 2455      	CLR  R5
                 _0xA:
0000d9 e2ea      	LDI  R30,LOW(42)
0000da 165e      	CP   R5,R30
0000db f468      	BRSH _0xB
                 ; 0000 00FE 			{
                 ; 0000 00FF 				OCR1A = calc_OCR(twinkle[cnt]);
0000dc 2de5      	MOV  R30,R5
0000dd e7a4      	LDI  R26,LOW(_twinkle*2)
0000de e0b0      	LDI  R27,HIGH(_twinkle*2)
0000df 940e 02ca 	CALL SUBOPT_0x2
                 ; 0000 0100 				printf("%d ",OCR1A);
                 ; 0000 0101 				delay_ms(300);
                 ; 0000 0102 				OCR1A=0;
0000e1 940e 02c5 	CALL SUBOPT_0x1
                 ; 0000 0103 				delay_ms(100);
0000e3 e6e4      	LDI  R30,LOW(100)
0000e4 e0f0      	LDI  R31,HIGH(100)
0000e5 940e 02c1 	CALL SUBOPT_0x0
                 ; 0000 0104 
                 ; 0000 0105 			}
0000e7 9453      	INC  R5
0000e8 cff0      	RJMP _0xA
                 _0xB:
                 ; 0000 0106 		}
                 ; 0000 0107 		else if(PINC.3==0)
0000e9 c013      	RJMP _0xC
                 _0x8:
0000ea 999b      	SBIC 0x13,3
0000eb c011      	RJMP _0xD
                 ; 0000 0108 		{
                 ; 0000 0109 			for(cnt=0;cnt<16;cnt++)
0000ec 2455      	CLR  R5
                 _0xF:
0000ed e1e0      	LDI  R30,LOW(16)
0000ee 165e      	CP   R5,R30
0000ef f468      	BRSH _0x10
                 ; 0000 010A 			{
                 ; 0000 010B 				OCR1A = calc_OCR(saregama[cnt]);
0000f0 2de5      	MOV  R30,R5
0000f1 e5a4      	LDI  R26,LOW(_saregama*2)
0000f2 e0b0      	LDI  R27,HIGH(_saregama*2)
0000f3 940e 02ca 	CALL SUBOPT_0x2
                 ; 0000 010C 				printf("%d ",OCR1A);
                 ; 0000 010D 				delay_ms(300);
                 ; 0000 010E 				OCR1A=0;
0000f5 940e 02c5 	CALL SUBOPT_0x1
                 ; 0000 010F 				delay_ms(100);
0000f7 e6e4      	LDI  R30,LOW(100)
0000f8 e0f0      	LDI  R31,HIGH(100)
0000f9 940e 02c1 	CALL SUBOPT_0x0
                 ; 0000 0110 
                 ; 0000 0111 			}
0000fb 9453      	INC  R5
0000fc cff0      	RJMP _0xF
                 _0x10:
                 ; 0000 0112 
                 ; 0000 0113 		}
                 ; 0000 0114 
                 ; 0000 0115 	};
                 _0xD:
                 _0xC:
0000fd cfd5      	RJMP _0x3
                 ; 0000 0116 }
                 _0x11:
0000fe cfff      	RJMP _0x11
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 putchar0:
0000ff 9b5d           sbis usr,udre
000100 cffe           rjmp putchar0
000101 81e8           ld   r30,y
000102 b9ec           out  udr,r30
000103 9621      	ADIW R28,1
000104 9508      	RET
                 __put_G100:
000105 931a      	ST   -Y,R17
000106 930a      	ST   -Y,R16
000107 81ac      	LDD  R26,Y+4
000108 81bd      	LDD  R27,Y+4+1
000109 940e 0376 	CALL __GETW1P
00010b 9730      	SBIW R30,0
00010c f0d9      	BREQ _0x2000010
00010d 81aa      	LDD  R26,Y+2
00010e 81bb      	LDD  R27,Y+2+1
00010f 940e 0376 	CALL __GETW1P
000111 018f      	MOVW R16,R30
000112 9730      	SBIW R30,0
000113 f049      	BREQ _0x2000012
                +
000114 3002     +CPI R16 , LOW ( 2 )
000115 e0e0     +LDI R30 , HIGH ( 2 )
000116 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000117 f078      	BRLO _0x2000013
000118 01f8      	MOVW R30,R16
000119 9731      	SBIW R30,1
00011a 018f      	MOVW R16,R30
00011b 93ed      	ST   X+,R30
00011c 93fc      	ST   X,R31
                 _0x2000012:
00011d 81ac      	LDD  R26,Y+4
00011e 81bd      	LDD  R27,Y+4+1
00011f 91ed      	LD   R30,X+
000120 91fd      	LD   R31,X+
000121 9631      	ADIW R30,1
000122 93fe      	ST   -X,R31
000123 93ee      	ST   -X,R30
000124 9731      	SBIW R30,1
000125 81ae      	LDD  R26,Y+6
000126 83a0      	STD  Z+0,R26
                 _0x2000013:
000127 c003      	RJMP _0x2000014
                 _0x2000010:
000128 81ee      	LDD  R30,Y+6
000129 93ea      	ST   -Y,R30
00012a dfd4      	RCALL _putchar
                 _0x2000014:
00012b 8119      	LDD  R17,Y+1
00012c 8108      	LDD  R16,Y+0
00012d 9627      	ADIW R28,7
00012e 9508      	RET
                 __print_G100:
00012f 9726      	SBIW R28,6
000130 940e 038a 	CALL __SAVELOCR6
000132 e010      	LDI  R17,0
                 _0x2000015:
000133 89ea      	LDD  R30,Y+18
000134 89fb      	LDD  R31,Y+18+1
000135 9631      	ADIW R30,1
000136 8bea      	STD  Y+18,R30
000137 8bfb      	STD  Y+18+1,R31
000138 9731      	SBIW R30,1
000139 91e4      	LPM  R30,Z
00013a 2f2e      	MOV  R18,R30
00013b 30e0      	CPI  R30,0
00013c f411      	BRNE PC+3
00013d 940c 0284 	JMP _0x2000017
00013f 2fe1      	MOV  R30,R17
000140 e0f0      	LDI  R31,0
000141 9730      	SBIW R30,0
000142 f439      	BRNE _0x200001B
000143 3225      	CPI  R18,37
000144 f411      	BRNE _0x200001C
000145 e011      	LDI  R17,LOW(1)
000146 c002      	RJMP _0x200001D
                 _0x200001C:
000147 940e 02e8 	CALL SUBOPT_0x3
                 _0x200001D:
000149 c139      	RJMP _0x200001A
                 _0x200001B:
00014a 30e1      	CPI  R30,LOW(0x1)
00014b e0a0      	LDI  R26,HIGH(0x1)
00014c 07fa      	CPC  R31,R26
00014d f4a9      	BRNE _0x200001E
00014e 3225      	CPI  R18,37
00014f f419      	BRNE _0x200001F
000150 940e 02e8 	CALL SUBOPT_0x3
000152 c12f      	RJMP _0x20000BC
                 _0x200001F:
000153 e012      	LDI  R17,LOW(2)
000154 e040      	LDI  R20,LOW(0)
000155 e000      	LDI  R16,LOW(0)
000156 322d      	CPI  R18,45
000157 f411      	BRNE _0x2000020
000158 e001      	LDI  R16,LOW(1)
000159 c129      	RJMP _0x200001A
                 _0x2000020:
00015a 322b      	CPI  R18,43
00015b f411      	BRNE _0x2000021
00015c e24b      	LDI  R20,LOW(43)
00015d c125      	RJMP _0x200001A
                 _0x2000021:
00015e 3220      	CPI  R18,32
00015f f411      	BRNE _0x2000022
000160 e240      	LDI  R20,LOW(32)
000161 c121      	RJMP _0x200001A
                 _0x2000022:
000162 c004      	RJMP _0x2000023
                 _0x200001E:
000163 30e2      	CPI  R30,LOW(0x2)
000164 e0a0      	LDI  R26,HIGH(0x2)
000165 07fa      	CPC  R31,R26
000166 f439      	BRNE _0x2000024
                 _0x2000023:
000167 e050      	LDI  R21,LOW(0)
000168 e013      	LDI  R17,LOW(3)
000169 3320      	CPI  R18,48
00016a f411      	BRNE _0x2000025
00016b 6800      	ORI  R16,LOW(128)
00016c c116      	RJMP _0x200001A
                 _0x2000025:
00016d c006      	RJMP _0x2000026
                 _0x2000024:
00016e 30e3      	CPI  R30,LOW(0x3)
00016f e0a0      	LDI  R26,HIGH(0x3)
000170 07fa      	CPC  R31,R26
000171 f011      	BREQ PC+3
000172 940c 0283 	JMP _0x200001A
                 _0x2000026:
000174 3320      	CPI  R18,48
000175 f010      	BRLO _0x2000029
000176 332a      	CPI  R18,58
000177 f008      	BRLO _0x200002A
                 _0x2000029:
000178 c015      	RJMP _0x2000028
                 _0x200002A:
000179 2fa5      	MOV  R26,R21
00017a e0b0      	LDI  R27,0
00017b e0ea      	LDI  R30,LOW(10)
00017c e0f0      	LDI  R31,HIGH(10)
00017d 02ea      	MULS R30,R26
00017e 01f0      	MOVW R30,R0
00017f 2f5e      	MOV  R21,R30
000180 2f65      	MOV  R22,R21
000181 2777      	CLR  R23
000182 2fa2      	MOV  R26,R18
000183 e0b0      	LDI  R27,0
000184 e3e0      	LDI  R30,LOW(48)
000185 e0f0      	LDI  R31,HIGH(48)
000186 940e 0383 	CALL __SWAPW12
000188 1bea      	SUB  R30,R26
000189 0bfb      	SBC  R31,R27
00018a 01db      	MOVW R26,R22
00018b 0fea      	ADD  R30,R26
00018c 2f5e      	MOV  R21,R30
00018d c0f5      	RJMP _0x200001A
                 _0x2000028:
00018e 940e 02f3 	CALL SUBOPT_0x4
000190 36e3      	CPI  R30,LOW(0x63)
000191 e0a0      	LDI  R26,HIGH(0x63)
000192 07fa      	CPC  R31,R26
000193 f449      	BRNE _0x200002E
000194 940e 02f6 	CALL SUBOPT_0x5
000196 89e8      	LDD  R30,Y+16
000197 89f9      	LDD  R31,Y+16+1
000198 81a4      	LDD  R26,Z+4
000199 93aa      	ST   -Y,R26
00019a 940e 02fc 	CALL SUBOPT_0x6
00019c c0e5      	RJMP _0x200002F
                 _0x200002E:
00019d 37e3      	CPI  R30,LOW(0x73)
00019e e0a0      	LDI  R26,HIGH(0x73)
00019f 07fa      	CPC  R31,R26
0001a0 f441      	BRNE _0x2000031
0001a1 940e 02f6 	CALL SUBOPT_0x5
0001a3 940e 0306 	CALL SUBOPT_0x7
0001a5 940e 02ac 	CALL _strlen
0001a7 2f1e      	MOV  R17,R30
0001a8 c00c      	RJMP _0x2000032
                 _0x2000031:
0001a9 37e0      	CPI  R30,LOW(0x70)
0001aa e0a0      	LDI  R26,HIGH(0x70)
0001ab 07fa      	CPC  R31,R26
0001ac f461      	BRNE _0x2000034
0001ad 940e 02f6 	CALL SUBOPT_0x5
0001af 940e 0306 	CALL SUBOPT_0x7
0001b1 940e 02b6 	CALL _strlenf
0001b3 2f1e      	MOV  R17,R30
0001b4 6008      	ORI  R16,LOW(8)
                 _0x2000032:
0001b5 6002      	ORI  R16,LOW(2)
0001b6 770f      	ANDI R16,LOW(127)
0001b7 e030      	LDI  R19,LOW(0)
0001b8 c03f      	RJMP _0x2000035
                 _0x2000034:
0001b9 36e4      	CPI  R30,LOW(0x64)
0001ba e0a0      	LDI  R26,HIGH(0x64)
0001bb 07fa      	CPC  R31,R26
0001bc f021      	BREQ _0x2000038
0001bd 36e9      	CPI  R30,LOW(0x69)
0001be e0a0      	LDI  R26,HIGH(0x69)
0001bf 07fa      	CPC  R31,R26
0001c0 f411      	BRNE _0x2000039
                 _0x2000038:
0001c1 6004      	ORI  R16,LOW(4)
0001c2 c004      	RJMP _0x200003A
                 _0x2000039:
0001c3 37e5      	CPI  R30,LOW(0x75)
0001c4 e0a0      	LDI  R26,HIGH(0x75)
0001c5 07fa      	CPC  R31,R26
0001c6 f431      	BRNE _0x200003B
                 _0x200003A:
0001c7 ece8      	LDI  R30,LOW(_tbl10_G100*2)
0001c8 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001c9 83ee      	STD  Y+6,R30
0001ca 83ff      	STD  Y+6+1,R31
0001cb e015      	LDI  R17,LOW(5)
0001cc c011      	RJMP _0x200003C
                 _0x200003B:
0001cd 35e8      	CPI  R30,LOW(0x58)
0001ce e0a0      	LDI  R26,HIGH(0x58)
0001cf 07fa      	CPC  R31,R26
0001d0 f411      	BRNE _0x200003E
0001d1 6008      	ORI  R16,LOW(8)
0001d2 c006      	RJMP _0x200003F
                 _0x200003E:
0001d3 37e8      	CPI  R30,LOW(0x78)
0001d4 e0a0      	LDI  R26,HIGH(0x78)
0001d5 07fa      	CPC  R31,R26
0001d6 f011      	BREQ PC+3
0001d7 940c 0282 	JMP _0x2000070
                 _0x200003F:
0001d9 ede2      	LDI  R30,LOW(_tbl16_G100*2)
0001da e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001db 83ee      	STD  Y+6,R30
0001dc 83ff      	STD  Y+6+1,R31
0001dd e014      	LDI  R17,LOW(4)
                 _0x200003C:
0001de ff02      	SBRS R16,2
0001df c014      	RJMP _0x2000041
0001e0 940e 02f6 	CALL SUBOPT_0x5
0001e2 940e 0310 	CALL SUBOPT_0x8
0001e4 85ab      	LDD  R26,Y+11
0001e5 23aa      	TST  R26
0001e6 f43a      	BRPL _0x2000042
0001e7 85ea      	LDD  R30,Y+10
0001e8 85fb      	LDD  R31,Y+10+1
0001e9 940e 0328 	CALL __ANEGW1
0001eb 87ea      	STD  Y+10,R30
0001ec 87fb      	STD  Y+10+1,R31
0001ed e24d      	LDI  R20,LOW(45)
                 _0x2000042:
0001ee 3040      	CPI  R20,0
0001ef f011      	BREQ _0x2000043
0001f0 5f1f      	SUBI R17,-LOW(1)
0001f1 c001      	RJMP _0x2000044
                 _0x2000043:
0001f2 7f0b      	ANDI R16,LOW(251)
                 _0x2000044:
0001f3 c004      	RJMP _0x2000045
                 _0x2000041:
0001f4 940e 02f6 	CALL SUBOPT_0x5
0001f6 940e 0310 	CALL SUBOPT_0x8
                 _0x2000045:
                 _0x2000035:
0001f8 fd00      	SBRC R16,0
0001f9 c011      	RJMP _0x2000046
                 _0x2000047:
0001fa 1715      	CP   R17,R21
0001fb f478      	BRSH _0x2000049
0001fc ff07      	SBRS R16,7
0001fd c008      	RJMP _0x200004A
0001fe ff02      	SBRS R16,2
0001ff c004      	RJMP _0x200004B
000200 7f0b      	ANDI R16,LOW(251)
000201 2f24      	MOV  R18,R20
000202 5011      	SUBI R17,LOW(1)
000203 c001      	RJMP _0x200004C
                 _0x200004B:
000204 e320      	LDI  R18,LOW(48)
                 _0x200004C:
000205 c001      	RJMP _0x200004D
                 _0x200004A:
000206 e220      	LDI  R18,LOW(32)
                 _0x200004D:
000207 940e 02e8 	CALL SUBOPT_0x3
000209 5051      	SUBI R21,LOW(1)
00020a cfef      	RJMP _0x2000047
                 _0x2000049:
                 _0x2000046:
00020b 2f31      	MOV  R19,R17
00020c ff01      	SBRS R16,1
00020d c01a      	RJMP _0x200004E
                 _0x200004F:
00020e 3030      	CPI  R19,0
00020f f0b9      	BREQ _0x2000051
000210 ff03      	SBRS R16,3
000211 c008      	RJMP _0x2000052
000212 81ee      	LDD  R30,Y+6
000213 81ff      	LDD  R31,Y+6+1
000214 9631      	ADIW R30,1
000215 83ee      	STD  Y+6,R30
000216 83ff      	STD  Y+6+1,R31
000217 9731      	SBIW R30,1
000218 91e4      	LPM  R30,Z
000219 c005      	RJMP _0x20000BD
                 _0x2000052:
00021a 81ae      	LDD  R26,Y+6
00021b 81bf      	LDD  R27,Y+6+1
00021c 91ed      	LD   R30,X+
00021d 83ae      	STD  Y+6,R26
00021e 83bf      	STD  Y+6+1,R27
                 _0x20000BD:
00021f 93ea      	ST   -Y,R30
000220 940e 02fc 	CALL SUBOPT_0x6
000222 3050      	CPI  R21,0
000223 f009      	BREQ _0x2000054
000224 5051      	SUBI R21,LOW(1)
                 _0x2000054:
000225 5031      	SUBI R19,LOW(1)
000226 cfe7      	RJMP _0x200004F
                 _0x2000051:
000227 c050      	RJMP _0x2000055
                 _0x200004E:
                 _0x2000057:
000228 e320      	LDI  R18,LOW(48)
000229 81ee      	LDD  R30,Y+6
00022a 81ff      	LDD  R31,Y+6+1
00022b 940e 037a 	CALL __GETW1PF
00022d 87e8      	STD  Y+8,R30
00022e 87f9      	STD  Y+8+1,R31
00022f 81ee      	LDD  R30,Y+6
000230 81ff      	LDD  R31,Y+6+1
000231 9632      	ADIW R30,2
000232 83ee      	STD  Y+6,R30
000233 83ff      	STD  Y+6+1,R31
                 _0x2000059:
000234 85e8      	LDD  R30,Y+8
000235 85f9      	LDD  R31,Y+8+1
000236 85aa      	LDD  R26,Y+10
000237 85bb      	LDD  R27,Y+10+1
000238 17ae      	CP   R26,R30
000239 07bf      	CPC  R27,R31
00023a f050      	BRLO _0x200005B
00023b 5f2f      	SUBI R18,-LOW(1)
00023c 85a8      	LDD  R26,Y+8
00023d 85b9      	LDD  R27,Y+8+1
00023e 85ea      	LDD  R30,Y+10
00023f 85fb      	LDD  R31,Y+10+1
000240 1bea      	SUB  R30,R26
000241 0bfb      	SBC  R31,R27
000242 87ea      	STD  Y+10,R30
000243 87fb      	STD  Y+10+1,R31
000244 cfef      	RJMP _0x2000059
                 _0x200005B:
000245 332a      	CPI  R18,58
000246 f050      	BRLO _0x200005C
000247 ff03      	SBRS R16,3
000248 c004      	RJMP _0x200005D
000249 940e 02f3 	CALL SUBOPT_0x4
00024b 9637      	ADIW R30,7
00024c c003      	RJMP _0x20000BE
                 _0x200005D:
00024d 940e 02f3 	CALL SUBOPT_0x4
00024f 96b7      	ADIW R30,39
                 _0x20000BE:
000250 2f2e      	MOV  R18,R30
                 _0x200005C:
000251 fd04      	SBRC R16,4
000252 c01a      	RJMP _0x2000060
000253 3321      	CPI  R18,49
000254 f420      	BRSH _0x2000062
000255 85a8      	LDD  R26,Y+8
000256 85b9      	LDD  R27,Y+8+1
000257 9711      	SBIW R26,1
000258 f409      	BRNE _0x2000061
                 _0x2000062:
000259 c009      	RJMP _0x20000BF
                 _0x2000061:
00025a 1753      	CP   R21,R19
00025b f010      	BRLO _0x2000066
00025c ff00      	SBRS R16,0
00025d c001      	RJMP _0x2000067
                 _0x2000066:
00025e c013      	RJMP _0x2000065
                 _0x2000067:
00025f e220      	LDI  R18,LOW(32)
000260 ff07      	SBRS R16,7
000261 c00b      	RJMP _0x2000068
000262 e320      	LDI  R18,LOW(48)
                 _0x20000BF:
000263 6100      	ORI  R16,LOW(16)
000264 ff02      	SBRS R16,2
000265 c007      	RJMP _0x2000069
000266 7f0b      	ANDI R16,LOW(251)
000267 934a      	ST   -Y,R20
000268 940e 02fc 	CALL SUBOPT_0x6
00026a 3050      	CPI  R21,0
00026b f009      	BREQ _0x200006A
00026c 5051      	SUBI R21,LOW(1)
                 _0x200006A:
                 _0x2000069:
                 _0x2000068:
                 _0x2000060:
00026d 940e 02e8 	CALL SUBOPT_0x3
00026f 3050      	CPI  R21,0
000270 f009      	BREQ _0x200006B
000271 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x2000065:
000272 5031      	SUBI R19,LOW(1)
000273 85a8      	LDD  R26,Y+8
000274 85b9      	LDD  R27,Y+8+1
000275 9712      	SBIW R26,2
000276 f008      	BRLO _0x2000058
000277 cfb0      	RJMP _0x2000057
                 _0x2000058:
                 _0x2000055:
000278 ff00      	SBRS R16,0
000279 c008      	RJMP _0x200006C
                 _0x200006D:
00027a 3050      	CPI  R21,0
00027b f031      	BREQ _0x200006F
00027c 5051      	SUBI R21,LOW(1)
00027d e2e0      	LDI  R30,LOW(32)
00027e 93ea      	ST   -Y,R30
00027f 940e 02fc 	CALL SUBOPT_0x6
000281 cff8      	RJMP _0x200006D
                 _0x200006F:
                 _0x200006C:
                 _0x2000070:
                 _0x200002F:
                 _0x20000BC:
000282 e010      	LDI  R17,LOW(0)
                 _0x200001A:
000283 ceaf      	RJMP _0x2000015
                 _0x2000017:
000284 940e 0391 	CALL __LOADLOCR6
000286 9664      	ADIW R28,20
000287 9508      	RET
                 _printf:
000288 92ff      	PUSH R15
000289 2ef8      	MOV  R15,R24
00028a 9722      	SBIW R28,2
00028b 931a      	ST   -Y,R17
00028c 930a      	ST   -Y,R16
00028d 01de      	MOVW R26,R28
00028e 940e 0324 	CALL __ADDW2R15
000290 018d      	MOVW R16,R26
000291 e0e0      	LDI  R30,LOW(0)
000292 83ea      	STD  Y+2,R30
000293 83eb      	STD  Y+2+1,R30
000294 01de      	MOVW R26,R28
000295 9614      	ADIW R26,4
000296 940e 0324 	CALL __ADDW2R15
000298 940e 0376 	CALL __GETW1P
00029a 93fa      	ST   -Y,R31
00029b 93ea      	ST   -Y,R30
00029c 931a      	ST   -Y,R17
00029d 930a      	ST   -Y,R16
00029e 01fe      	MOVW R30,R28
00029f 9636      	ADIW R30,6
0002a0 93fa      	ST   -Y,R31
0002a1 93ea      	ST   -Y,R30
0002a2 e0e0      	LDI  R30,LOW(0)
0002a3 e0f0      	LDI  R31,HIGH(0)
0002a4 93fa      	ST   -Y,R31
0002a5 93ea      	ST   -Y,R30
0002a6 de88      	RCALL __print_G100
0002a7 8119      	LDD  R17,Y+1
0002a8 8108      	LDD  R16,Y+0
0002a9 9624      	ADIW R28,4
0002aa 90ff      	POP  R15
0002ab 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
0002ac 91a9          ld   r26,y+
0002ad 91b9          ld   r27,y+
0002ae 27ee          clr  r30
0002af 27ff          clr  r31
                 strlen0:
0002b0 916d          ld   r22,x+
0002b1 2366          tst  r22
0002b2 f011          breq strlen1
0002b3 9631          adiw r30,1
0002b4 cffb          rjmp strlen0
                 strlen1:
0002b5 9508          ret
                 _strlenf:
0002b6 27aa          clr  r26
0002b7 27bb          clr  r27
0002b8 91e9          ld   r30,y+
0002b9 91f9          ld   r31,y+
                 strlenf0:
0002ba 9005          lpm  r0,z+
0002bb 2000          tst  r0
0002bc f011          breq strlenf1
0002bd 9611          adiw r26,1
0002be cffb          rjmp strlenf0
                 strlenf1:
0002bf 01fd          movw r30,r26
0002c0 9508          ret
                 
                 	.DSEG
                 _p_S1020024:
000160           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
0002c1 93fa      	ST   -Y,R31
0002c2 93ea      	ST   -Y,R30
0002c3 940c 0318 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 e0f0      	LDI  R31,HIGH(0)
0002c7 bdfb      	OUT  0x2A+1,R31
0002c8 bdea      	OUT  0x2A,R30
0002c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x2:
0002ca e0f0      	LDI  R31,0
0002cb 0fee      	LSL  R30
0002cc 1fff      	ROL  R31
0002cd 0fea      	ADD  R30,R26
0002ce 1ffb      	ADC  R31,R27
0002cf 940e 037a 	CALL __GETW1PF
0002d1 93fa      	ST   -Y,R31
0002d2 93ea      	ST   -Y,R30
0002d3 940e 008d 	CALL _calc_OCR
0002d5 bdfb      	OUT  0x2A+1,R31
0002d6 bdea      	OUT  0x2A,R30
                +
0002d7 edea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002d8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0002d9 93fa      	ST   -Y,R31
0002da 93ea      	ST   -Y,R30
0002db b5ea      	IN   R30,0x2A
0002dc b5fb      	IN   R31,0x2A+1
0002dd 2766      	CLR  R22
0002de 2777      	CLR  R23
0002df 940e 037e 	CALL __PUTPARD1
0002e1 e084      	LDI  R24,4
0002e2 940e 0288 	CALL _printf
0002e4 9626      	ADIW R28,6
0002e5 e2ec      	LDI  R30,LOW(300)
0002e6 e0f1      	LDI  R31,HIGH(300)
0002e7 cfd9      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x3:
0002e8 932a      	ST   -Y,R18
0002e9 85ef      	LDD  R30,Y+15
0002ea 89f8      	LDD  R31,Y+15+1
0002eb 93fa      	ST   -Y,R31
0002ec 93ea      	ST   -Y,R30
0002ed 01fe      	MOVW R30,R28
0002ee 963f      	ADIW R30,15
0002ef 93fa      	ST   -Y,R31
0002f0 93ea      	ST   -Y,R30
0002f1 940c 0105 	JMP  __put_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002f3 2fe2      	MOV  R30,R18
0002f4 e0f0      	LDI  R31,0
0002f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0002f6 89e8      	LDD  R30,Y+16
0002f7 89f9      	LDD  R31,Y+16+1
0002f8 9734      	SBIW R30,4
0002f9 8be8      	STD  Y+16,R30
0002fa 8bf9      	STD  Y+16+1,R31
0002fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x6:
0002fc 85ef      	LDD  R30,Y+15
0002fd 89f8      	LDD  R31,Y+15+1
0002fe 93fa      	ST   -Y,R31
0002ff 93ea      	ST   -Y,R30
000300 01fe      	MOVW R30,R28
000301 963f      	ADIW R30,15
000302 93fa      	ST   -Y,R31
000303 93ea      	ST   -Y,R30
000304 940c 0105 	JMP  __put_G100
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000306 89a8      	LDD  R26,Y+16
000307 89b9      	LDD  R27,Y+16+1
000308 9614      	ADIW R26,4
000309 940e 0376 	CALL __GETW1P
00030b 83ee      	STD  Y+6,R30
00030c 83ff      	STD  Y+6+1,R31
00030d 93fa      	ST   -Y,R31
00030e 93ea      	ST   -Y,R30
00030f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
000310 89a8      	LDD  R26,Y+16
000311 89b9      	LDD  R27,Y+16+1
000312 9614      	ADIW R26,4
000313 940e 0376 	CALL __GETW1P
000315 87ea      	STD  Y+10,R30
000316 87fb      	STD  Y+10+1,R31
000317 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000318 91e9      	ld   r30,y+
000319 91f9      	ld   r31,y+
00031a 9630      	adiw r30,0
00031b f039      	breq __delay_ms1
                 __delay_ms0:
                +
00031c ea80     +LDI R24 , LOW ( 0xFA0 )
00031d e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00031e 9701     +SBIW R24 , 1
00031f f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000320 95a8      	wdr
000321 9731      	sbiw r30,1
000322 f7c9      	brne __delay_ms0
                 __delay_ms1:
000323 9508      	ret
                 
                 __ADDW2R15:
000324 2400      	CLR  R0
000325 0daf      	ADD  R26,R15
000326 1db0      	ADC  R27,R0
000327 9508      	RET
                 
                 __ANEGW1:
000328 95f1      	NEG  R31
000329 95e1      	NEG  R30
00032a 40f0      	SBCI R31,0
00032b 9508      	RET
                 
                 __ANEGD1:
00032c 95f0      	COM  R31
00032d 9560      	COM  R22
00032e 9570      	COM  R23
00032f 95e1      	NEG  R30
000330 4fff      	SBCI R31,-1
000331 4f6f      	SBCI R22,-1
000332 4f7f      	SBCI R23,-1
000333 9508      	RET
                 
                 __LSLD1:
000334 0fee      	LSL  R30
000335 1fff      	ROL  R31
000336 1f66      	ROL  R22
000337 1f77      	ROL  R23
000338 9508      	RET
                 
                 __DIVD21U:
000339 933f      	PUSH R19
00033a 934f      	PUSH R20
00033b 935f      	PUSH R21
00033c 2400      	CLR  R0
00033d 2411      	CLR  R1
00033e 2744      	CLR  R20
00033f 2755      	CLR  R21
000340 e230      	LDI  R19,32
                 __DIVD21U1:
000341 0faa      	LSL  R26
000342 1fbb      	ROL  R27
000343 1f88      	ROL  R24
000344 1f99      	ROL  R25
000345 1c00      	ROL  R0
000346 1c11      	ROL  R1
000347 1f44      	ROL  R20
000348 1f55      	ROL  R21
000349 1a0e      	SUB  R0,R30
00034a 0a1f      	SBC  R1,R31
00034b 0b46      	SBC  R20,R22
00034c 0b57      	SBC  R21,R23
00034d f428      	BRCC __DIVD21U2
00034e 0e0e      	ADD  R0,R30
00034f 1e1f      	ADC  R1,R31
000350 1f46      	ADC  R20,R22
000351 1f57      	ADC  R21,R23
000352 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000353 60a1      	SBR  R26,1
                 __DIVD21U3:
000354 953a      	DEC  R19
000355 f759      	BRNE __DIVD21U1
000356 01fd      	MOVW R30,R26
000357 01bc      	MOVW R22,R24
000358 01d0      	MOVW R26,R0
000359 01ca      	MOVW R24,R20
00035a 915f      	POP  R21
00035b 914f      	POP  R20
00035c 913f      	POP  R19
00035d 9508      	RET
                 
                 __DIVD21:
00035e d004      	RCALL __CHKSIGND
00035f dfd9      	RCALL __DIVD21U
000360 f40e      	BRTC __DIVD211
000361 dfca      	RCALL __ANEGD1
                 __DIVD211:
000362 9508      	RET
                 
                 __CHKSIGND:
000363 94e8      	CLT
000364 ff77      	SBRS R23,7
000365 c002      	RJMP __CHKSD1
000366 dfc5      	RCALL __ANEGD1
000367 9468      	SET
                 __CHKSD1:
000368 ff97      	SBRS R25,7
000369 c00b      	RJMP __CHKSD2
00036a 2400      	CLR  R0
00036b 95a0      	COM  R26
00036c 95b0      	COM  R27
00036d 9580      	COM  R24
00036e 9590      	COM  R25
00036f 9611      	ADIW R26,1
000370 1d80      	ADC  R24,R0
000371 1d90      	ADC  R25,R0
000372 f800      	BLD  R0,0
000373 9403      	INC  R0
000374 fa00      	BST  R0,0
                 __CHKSD2:
000375 9508      	RET
                 
                 __GETW1P:
000376 91ed      	LD   R30,X+
000377 91fc      	LD   R31,X
000378 9711      	SBIW R26,1
000379 9508      	RET
                 
                 __GETW1PF:
00037a 9005      	LPM  R0,Z+
00037b 91f4      	LPM  R31,Z
00037c 2de0      	MOV  R30,R0
00037d 9508      	RET
                 
                 __PUTPARD1:
00037e 937a      	ST   -Y,R23
00037f 936a      	ST   -Y,R22
000380 93fa      	ST   -Y,R31
000381 93ea      	ST   -Y,R30
000382 9508      	RET
                 
                 __SWAPW12:
000383 2e1b      	MOV  R1,R27
000384 2fbf      	MOV  R27,R31
000385 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000386 2e1a      	MOV  R1,R26
000387 2fae      	MOV  R26,R30
000388 2de1      	MOV  R30,R1
000389 9508      	RET
                 
                 __SAVELOCR6:
00038a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00038b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00038c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00038d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038e 931a      	ST   -Y,R17
00038f 930a      	ST   -Y,R16
000390 9508      	RET
                 
                 __LOADLOCR6:
000391 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000392 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000393 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000394 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000395 8119      	LDD  R17,Y+1
000396 8108      	LD   R16,Y
000397 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  18 r1 :   8 r2 :   0 r3 :   0 r4 :   0 r5 :   8 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  36 r17:  22 r18:  24 r19:  12 r20:  16 r21:  24 r22:  14 r23:  11 
r24:  14 r25:   7 r26:  75 r27:  28 r28:  14 r29:   1 r30: 202 r31:  89 
x  :  12 y  : 134 z  :   7 
Registers used: 23 out of 35 (65.7%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   7 add   :   4 
adiw  :  22 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   1 brsh  :   4 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  48 
cbi   :   1 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   7 
cp    :   5 cpc   :  13 cpi   :  29 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  28 ld    :  15 ldd   :  56 ldi   : 101 
lds   :   0 lpm   :   8 lsl   :   3 lsr   :   0 mov   :  23 movw  :  16 
mul   :   0 muls  :   1 mulsu :   0 neg   :   3 nop   :   0 or    :   0 
ori   :   6 out   :  48 pop   :   4 push  :   4 rcall :   6 ret   :  26 
reti  :   0 rjmp  :  59 rol   :  11 ror   :   0 sbc   :   5 sbci  :   4 
sbi   :   0 sbic  :   2 sbis  :   1 sbiw  :  16 sbr   :   1 sbrc  :   2 
sbrs  :  12 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  50 std   :  27 sts   :   0 sub   :   3 subi  :  10 swap  :   0 
tst   :   3 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000730   1702    138   1840   16384  11.2%
[.dseg] 0x000060 0x000162      0      2      2    1024   0.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 1 warnings
