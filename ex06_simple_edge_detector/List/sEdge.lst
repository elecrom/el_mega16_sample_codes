
AVRASM ver. 2.1.17  F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm Fri Oct 10 19:50:22 2008

F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1026): warning: Register r5 already defined by the .DEF directive
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1027): warning: Register r4 already defined by the .DEF directive
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1028): warning: Register r7 already defined by the .DEF directive
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1029): warning: Register r8 already defined by the .DEF directive
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1030): warning: Register r6 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.03.4 Standard
                 ;(C) Copyright 1998-2008 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : Yes
                 ;char is unsigned       : Yes
                 ;global const stored in FLASH  : No
                 ;8 bit enums            : Yes
                 ;Enhanced core instructions    : On
                 ;Smart register allocation : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	LDI  R23,BYTE4(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+@1,R0
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adcch=R5
                 	.DEF _tmp=R4
                 	.DEF _dir=R7
                 	.DEF _dCtr=R8
                 	.DEF _TMOUT=R6
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;INTERRUPT VECTORS
000000 940c 0036 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0066 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x83:
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1059): warning: .cseg .db misalignment - padding zero byte
00002a 005a      	.DB  0x5A
                 _0x200005F:
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1061): warning: .cseg .db misalignment - padding zero byte
00002b 0001      	.DB  0x1
                 _0x2000000:
00002c 4e2d
00002d 4e41
F:\mega16_kitCD\sample code\ex06_simple_edge_detector\List\sEdge.asm(1063): warning: .cseg .db misalignment - padding zero byte
00002e 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
00002f 0001      	.DW  0x01
000030 0006      	.DW  0x06
000031 0054      	.DW  _0x83*2
                 
000032 0001      	.DW  0x01
000033 0167      	.DW  __seed_G100
000034 0056      	.DW  _0x200005F*2
                 
                 _0xFFFFFFFF:
000035 0000      	.DW  0
                 
                 __RESET:
000036 94f8      	CLI
000037 27ee      	CLR  R30
000038 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000039 e0f1      	LDI  R31,1
00003a bffb      	OUT  GICR,R31
00003b bfeb      	OUT  GICR,R30
00003c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00003d e1f8      	LDI  R31,0x18
00003e bdf1      	OUT  WDTCR,R31
00003f bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(0x400)
000047 e094      	LDI  R25,HIGH(0x400)
000048 e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(0x45F)
00005f bfed      	OUT  SPL,R30
000060 e0e4      	LDI  R30,HIGH(0x45F)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(0x160)
000063 e0d1      	LDI  R29,HIGH(0x160)
                 
000064 940c 0157 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*****************************************************
                 ;Chip type           : ATmega16
                 ;Program type        : Application
                 ;Clock frequency     : 16.000000 MHz
                 ;Memory model        : Small
                 ;External SRAM size  : 0
                 ;Data Stack size     : 256
                 ;*****************************************************/
                 ;
                 ;#define	LM_FOR	PORTD.6=0;PORTD.4=1;
                 ;#define	RM_FOR	PORTD.5=0;PORTD.7=1;
                 ;
                 ;#define	LM_REV	PORTD.6=1;PORTD.4=0;
                 ;#define	RM_REV	PORTD.5=1;PORTD.7=0;
                 ;
                 ;#define	LM_OFF	PORTD.6=0;PORTD.4=0;
                 ;#define	RM_OFF	PORTD.5=0;PORTD.7=0;
                 ;
                 ;
                 ;unsigned char sensors[7];
                 ;
                 ;//front left and front right
                 ;#define	FL	sensors[1]
                 ;#define	FR	sensors[5]
                 ;
                 ;//rear left and rear right
                 ;#define	RL	sensors[2]
                 ;#define	RR	sensors[3]
                 ;
                 ;
                 ;
                 ;unsigned char adcch;
                 ;unsigned char tmp;
                 ;unsigned char dir;
                 ;
                 ;#define	LEFT	0
                 ;#define	RIGHT	1
                 ;
                 ;
                 ;#define	THRE	100
                 ;
                 ;#define ADC_VREF_TYPE 0x60
                 ;
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include<delay.h>
                 ;#include<stdlib.h>
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0033 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
000066 93aa      	ST   -Y,R26
000067 93ba      	ST   -Y,R27
000068 93ea      	ST   -Y,R30
000069 93fa      	ST   -Y,R31
00006a b7ef      	IN   R30,SREG
00006b 93ea      	ST   -Y,R30
                 ; 0000 0034 // Place your code here
                 ; 0000 0035 TCNT0=128;
00006c e8e0      	LDI  R30,LOW(128)
00006d bfe2      	OUT  0x32,R30
                 ; 0000 0036 
                 ; 0000 0037 	//Read the result
                 ; 0000 0038 	ADCSRA|=0x10;
00006e b1e6      	IN   R30,0x6
00006f e0f0      	LDI  R31,0
000070 61e0      	ORI  R30,0x10
000071 b9e6      	OUT  0x6,R30
                 ; 0000 0039 	tmp = ADCH;
000072 b045      	IN   R4,5
                 ; 0000 003A 
                 ; 0000 003B 	//compare
                 ; 0000 003C 	if(tmp>THRE)
000073 e6e4      	LDI  R30,LOW(100)
000074 15e4      	CP   R30,R4
000075 f420      	BRSH _0x3
                 ; 0000 003D 		sensors[adcch]=1;
000076 940e 01da 	CALL SUBOPT_0x0
000078 e0a1      	LDI  R26,LOW(1)
000079 c003      	RJMP _0x7F
                 ; 0000 003E 	else
                 _0x3:
                 ; 0000 003F 		sensors[adcch]=0;
00007a 940e 01da 	CALL SUBOPT_0x0
00007c e0a0      	LDI  R26,LOW(0)
                 _0x7F:
00007d 83a0      	STD  Z+0,R26
                 ; 0000 0040 
                 ; 0000 0041 	//point to next
                 ; 0000 0042 	if(adcch>=5)
00007e e0e5      	LDI  R30,LOW(5)
00007f 165e      	CP   R5,R30
000080 f478      	BRSH _0x80
                 ; 0000 0043 		adcch=1;
                 ; 0000 0044 	else if(adcch==1)
000081 e0e1      	LDI  R30,LOW(1)
000082 15e5      	CP   R30,R5
000083 f411      	BRNE _0x7
                 ; 0000 0045 		adcch=2;
000084 e0e2      	LDI  R30,LOW(2)
000085 c00b      	RJMP _0x81
                 ; 0000 0046 	else if(adcch==2)
                 _0x7:
000086 e0e2      	LDI  R30,LOW(2)
000087 15e5      	CP   R30,R5
000088 f411      	BRNE _0x9
                 ; 0000 0047 		adcch=3;
000089 e0e3      	LDI  R30,LOW(3)
00008a c006      	RJMP _0x81
                 ; 0000 0048 	else if(adcch==3)
                 _0x9:
00008b e0e3      	LDI  R30,LOW(3)
00008c 15e5      	CP   R30,R5
00008d f411      	BRNE _0xB
                 ; 0000 0049 		adcch=5;
00008e e0e5      	LDI  R30,LOW(5)
00008f c001      	RJMP _0x81
                 ; 0000 004A 	else
                 _0xB:
                 ; 0000 004B 		adcch=1;
                 _0x80:
000090 e0e1      	LDI  R30,LOW(1)
                 _0x81:
000091 2e5e      	MOV  R5,R30
                 ; 0000 004C 
                 ; 0000 004D 	//start next conversion
                 ; 0000 004E 	ADMUX=adcch|ADC_VREF_TYPE;
000092 2da5      	MOV  R26,R5
000093 e0b0      	LDI  R27,0
000094 e6e0      	LDI  R30,LOW(96)
000095 e0f0      	LDI  R31,HIGH(96)
000096 2bea      	OR   R30,R26
000097 2bfb      	OR   R31,R27
000098 b9e7      	OUT  0x7,R30
                 ; 0000 004F 	// Start the AD conversion
                 ; 0000 0050 	ADCSRA|=0x40;
000099 b1e6      	IN   R30,0x6
00009a e0f0      	LDI  R31,0
00009b 64e0      	ORI  R30,0x40
00009c b9e6      	OUT  0x6,R30
                 ; 0000 0051 
                 ; 0000 0052 	PORTB = (FL<<1) | (FR<<2) | (RL<<5) | (RR<<6);
                +
00009d 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
00009f e0f0      	LDI  R31,0
0000a0 0fee      	LSL  R30
0000a1 1fff      	ROL  R31
0000a2 01df      	MOVW R26,R30
                +
0000a3 91e0 0165+LDS R30 , _sensors + 5
                 	__GETB1MN _sensors,5
0000a5 e0f0      	LDI  R31,0
0000a6 940e 0216 	CALL __LSLW2
0000a8 2bea      	OR   R30,R26
0000a9 2bfb      	OR   R31,R27
0000aa 01df      	MOVW R26,R30
                +
0000ab 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
0000ad e0f0      	LDI  R31,0
0000ae 0fee      	LSL  R30
0000af 1fff      	ROL  R31
0000b0 940e 0212 	CALL __LSLW4
0000b2 2bea      	OR   R30,R26
0000b3 2bfb      	OR   R31,R27
0000b4 01df      	MOVW R26,R30
                +
0000b5 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
0000b7 e0f0      	LDI  R31,0
0000b8 940e 0216 	CALL __LSLW2
0000ba 940e 0212 	CALL __LSLW4
0000bc 2bea      	OR   R30,R26
0000bd 2bfb      	OR   R31,R27
0000be bbe8      	OUT  0x18,R30
                 ; 0000 0053 
                 ; 0000 0054 }
0000bf 91e9      	LD   R30,Y+
0000c0 bfef      	OUT  SREG,R30
0000c1 91f9      	LD   R31,Y+
0000c2 91e9      	LD   R30,Y+
0000c3 91b9      	LD   R27,Y+
0000c4 91a9      	LD   R26,Y+
0000c5 9518      	RETI
                 ;
                 ;
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 005B {
                 ; 0000 005C ADMUX=adc_input|ADC_VREF_TYPE;
                 ;	adc_input -> Y+0
                 ; 0000 005D // Start the AD conversion
                 ; 0000 005E ADCSRA|=0x40;
                 ; 0000 005F // Wait for the AD conversion to complete
                 ; 0000 0060 while ((ADCSRA & 0x10)==0);
                 ; 0000 0061 ADCSRA|=0x10;
                 ; 0000 0062 return ADCH;
                 ; 0000 0063 }
                 ;
                 ;/*
                 ;// Declare your global variables here
                 ;void follow_track()
                 ;{
                 ;	if(sensors[1]==1 && sensors[2]==1)
                 ;	{
                 ;		LM_ON;
                 ;		RM_ON;
                 ;	}
                 ;	else if(sensors[1]==0 && sensors[2]==1)
                 ;	{
                 ;		LM_ON;
                 ;		RM_OFF;
                 ;		dir=LEFT;
                 ;	}
                 ;	else if(sensors[1]==1 && sensors[2]==0)
                 ;	{
                 ;		LM_OFF;
                 ;		RM_ON;
                 ;		dir=RIGHT;
                 ;	}
                 ;	else if(sensors[1]==0 && sensors[2]==0)
                 ;	{
                 ;		if(dir==LEFT)
                 ;		{
                 ;			LM_ON;
                 ;			RM_OFF;
                 ;		}
                 ;		else if(dir==RIGHT)
                 ;		{
                 ;			LM_OFF;
                 ;			RM_ON;
                 ;		}
                 ;	}
                 ;}
                 ;*/
                 ;
                 ;unsigned int dCtr;									//counter for delay
                 ;unsigned char TMOUT = 90;
                 ;
                 ;//To detect edge
                 ;void edge_detect(void)
                 ; 0000 008F {
                 _edge_detect:
                 ; 0000 0090 
                 ; 0000 0091 	//if all snesors are 1 means robo is on surface
                 ; 0000 0092 	if(FL==1 && FR==1 && RL==1 && RR==1)
                +
0000c6 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
0000c8 30e1      	CPI  R30,LOW(0x1)
0000c9 f461      	BRNE _0x11
                +
0000ca 91e0 0165+LDS R30 , _sensors + 5
                 	__GETB1MN _sensors,5
0000cc 30e1      	CPI  R30,LOW(0x1)
0000cd f441      	BRNE _0x11
                +
0000ce 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
0000d0 30e1      	CPI  R30,LOW(0x1)
0000d1 f421      	BRNE _0x11
                +
0000d2 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
0000d4 30e1      	CPI  R30,LOW(0x1)
0000d5 f009      	BREQ _0x12
                 _0x11:
0000d6 c005      	RJMP _0x10
                 _0x12:
                 ; 0000 0093 	{
                 ; 0000 0094 		RM_FOR;
0000d7 9895      	CBI  0x12,5
0000d8 9a97      	SBI  0x12,7
                 ; 0000 0095 		LM_FOR;
0000d9 9896      	CBI  0x12,6
0000da 9a94      	SBI  0x12,4
                 ; 0000 0096 	}
                 ; 0000 0097 
                 ; 0000 0098 	//if front left goes out...	>> take RTrn, while keeping RL on table.
                 ; 0000 0099 	else if(FL==0 && FR==1 && RL==1 && RR==1)
0000db c072      	RJMP _0x1B
                 _0x10:
                +
0000dc 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
0000de 30e0      	CPI  R30,0
0000df f461      	BRNE _0x1D
                +
0000e0 91e0 0165+LDS R30 , _sensors + 5
                 	__GETB1MN _sensors,5
0000e2 30e1      	CPI  R30,LOW(0x1)
0000e3 f441      	BRNE _0x1D
                +
0000e4 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
0000e6 30e1      	CPI  R30,LOW(0x1)
0000e7 f421      	BRNE _0x1D
                +
0000e8 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
0000ea 30e1      	CPI  R30,LOW(0x1)
0000eb f009      	BREQ _0x1E
                 _0x1D:
0000ec c018      	RJMP _0x1C
                 _0x1E:
                 ; 0000 009A 	{
                 ; 0000 009B 		//move back slightly
                 ; 0000 009C 		LM_REV;RM_REV;delay_ms(600);
0000ed 940e 01df 	CALL SUBOPT_0x1
                 ; 0000 009D 
                 ; 0000 009E 		//take turn
                 ; 0000 009F 		RM_REV;LM_OFF;dCtr=0;
0000ef 9a95      	SBI  0x12,5
0000f0 9897      	CBI  0x12,7
0000f1 9896      	CBI  0x12,6
0000f2 9894      	CBI  0x12,4
0000f3 2488      	CLR  R8
0000f4 2499      	CLR  R9
                 ; 0000 00A0 		while(RL==1 && RR==1 && dCtr<TMOUT)
                 _0x2F:
                +
0000f5 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
0000f7 30e1      	CPI  R30,LOW(0x1)
0000f8 f439      	BRNE _0x32
                +
0000f9 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
0000fb 30e1      	CPI  R30,LOW(0x1)
0000fc f419      	BRNE _0x32
0000fd 940e 01e9 	CALL SUBOPT_0x2
0000ff f008      	BRLO _0x33
                 _0x32:
000100 c003      	RJMP _0x31
                 _0x33:
                 ; 0000 00A1 		{
                 ; 0000 00A2 			delay_ms(10);
000101 940e 01ef 	CALL SUBOPT_0x3
                 ; 0000 00A3 			dCtr++;
                 ; 0000 00A4 		};
000103 cff1      	RJMP _0x2F
                 _0x31:
                 ; 0000 00A5 
                 ; 0000 00A6 	}
                 ; 0000 00A7 
                 ; 0000 00A8 	//if front right goes out...	>> take LTrn, while keeping RR on table.
                 ; 0000 00A9 	else if(FL==1 && FR==0 && RL==1 && RR==1)
000104 c049      	RJMP _0x34
                 _0x1C:
                +
000105 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
000107 30e1      	CPI  R30,LOW(0x1)
000108 f461      	BRNE _0x36
                +
000109 91e0 0165+LDS R30 , _sensors + 5
                 	__GETB1MN _sensors,5
00010b 30e0      	CPI  R30,0
00010c f441      	BRNE _0x36
                +
00010d 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
00010f 30e1      	CPI  R30,LOW(0x1)
000110 f421      	BRNE _0x36
                +
000111 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
000113 30e1      	CPI  R30,LOW(0x1)
000114 f009      	BREQ _0x37
                 _0x36:
000115 c018      	RJMP _0x35
                 _0x37:
                 ; 0000 00AA 	{
                 ; 0000 00AB 		//move back slightly
                 ; 0000 00AC 		LM_REV;RM_REV;delay_ms(600);
000116 940e 01df 	CALL SUBOPT_0x1
                 ; 0000 00AD 
                 ; 0000 00AE 		//take turn
                 ; 0000 00AF 		RM_OFF;LM_REV;dCtr=0;
000118 9895      	CBI  0x12,5
000119 9897      	CBI  0x12,7
00011a 9a96      	SBI  0x12,6
00011b 9894      	CBI  0x12,4
00011c 2488      	CLR  R8
00011d 2499      	CLR  R9
                 ; 0000 00B0 		while(RR==1 && RL==1 && dCtr<TMOUT)
                 _0x48:
                +
00011e 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
000120 30e1      	CPI  R30,LOW(0x1)
000121 f439      	BRNE _0x4B
                +
000122 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
000124 30e1      	CPI  R30,LOW(0x1)
000125 f419      	BRNE _0x4B
000126 940e 01e9 	CALL SUBOPT_0x2
000128 f008      	BRLO _0x4C
                 _0x4B:
000129 c003      	RJMP _0x4A
                 _0x4C:
                 ; 0000 00B1 		{
                 ; 0000 00B2 			delay_ms(10);
00012a 940e 01ef 	CALL SUBOPT_0x3
                 ; 0000 00B3 			dCtr++;
                 ; 0000 00B4 		}
00012c cff1      	RJMP _0x48
                 _0x4A:
                 ; 0000 00B5 
                 ; 0000 00B6 	}
                 ; 0000 00B7 
                 ; 0000 00B8 	//if RR and RL both out ...	>> go forward a bit
                 ; 0000 00B9 	else if(FL==1 && FR==1 && RL==0 && RR==0)
00012d c020      	RJMP _0x4D
                 _0x35:
                +
00012e 91e0 0161+LDS R30 , _sensors + 1
                 	__GETB1MN _sensors,1
000130 30e1      	CPI  R30,LOW(0x1)
000131 f461      	BRNE _0x4F
                +
000132 91e0 0165+LDS R30 , _sensors + 5
                 	__GETB1MN _sensors,5
000134 30e1      	CPI  R30,LOW(0x1)
000135 f441      	BRNE _0x4F
                +
000136 91e0 0162+LDS R30 , _sensors + 2
                 	__GETB1MN _sensors,2
000138 30e0      	CPI  R30,0
000139 f421      	BRNE _0x4F
                +
00013a 91e0 0163+LDS R30 , _sensors + 3
                 	__GETB1MN _sensors,3
00013c 30e0      	CPI  R30,0
00013d f009      	BREQ _0x50
                 _0x4F:
00013e c00f      	RJMP _0x4E
                 _0x50:
                 ; 0000 00BA 	{
                 ; 0000 00BB 		RM_FOR;LM_FOR;dCtr=50;
00013f 9895      	CBI  0x12,5
000140 9a97      	SBI  0x12,7
000141 9896      	CBI  0x12,6
000142 9a94      	SBI  0x12,4
000143 e3e2      	LDI  R30,LOW(50)
000144 e0f0      	LDI  R31,HIGH(50)
000145 014f      	MOVW R8,R30
                 ; 0000 00BC 		while(dCtr<70)
                 _0x59:
000146 e4e6      	LDI  R30,LOW(70)
000147 e0f0      	LDI  R31,HIGH(70)
000148 168e      	CP   R8,R30
000149 069f      	CPC  R9,R31
00014a f418      	BRSH _0x5B
                 ; 0000 00BD 		{
                 ; 0000 00BE 			delay_ms(10);
00014b 940e 01ef 	CALL SUBOPT_0x3
                 ; 0000 00BF 			dCtr++;
                 ; 0000 00C0 		};
00014d cff8      	RJMP _0x59
                 _0x5B:
                 ; 0000 00C1 
                 ; 0000 00C2 	}
                 ; 0000 00C3 
                 ; 0000 00C4 	if((rand() & 1)==0)
                 _0x4E:
                 _0x4D:
                 _0x34:
                 _0x1B:
00014e 940e 01c3 	CALL _rand
000150 70e1      	ANDI R30,LOW(0x1)
000151 f411      	BRNE _0x5C
                 ; 0000 00C5 		TMOUT = 80;
000152 e5e0      	LDI  R30,LOW(80)
000153 c001      	RJMP _0x82
                 ; 0000 00C6 	else
                 _0x5C:
                 ; 0000 00C7 		TMOUT = 110;
000154 e6ee      	LDI  R30,LOW(110)
                 _0x82:
000155 2e6e      	MOV  R6,R30
                 ; 0000 00C8 
                 ; 0000 00C9 }
000156 9508      	RET
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00CD {
                 _main:
                 ; 0000 00CE 
                 ; 0000 00CF 
                 ; 0000 00D0 
                 ; 0000 00D1 delay_ms(500);
000157 efe4      	LDI  R30,LOW(500)
000158 e0f1      	LDI  R31,HIGH(500)
000159 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 00D2 
                 ; 0000 00D3 
                 ; 0000 00D4 // Input/Output Ports initialization
                 ; 0000 00D5 // Port A initialization
                 ; 0000 00D6 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00D7 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00D8 PORTA=0x00;
00015b e0e0      	LDI  R30,LOW(0)
00015c bbeb      	OUT  0x1B,R30
                 ; 0000 00D9 DDRA=0x00;
00015d bbea      	OUT  0x1A,R30
                 ; 0000 00DA 
                 ; 0000 00DB // Port B initialization
                 ; 0000 00DC // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
                 ; 0000 00DD // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
                 ; 0000 00DE PORTB=0x55;
00015e e5e5      	LDI  R30,LOW(85)
00015f bbe8      	OUT  0x18,R30
                 ; 0000 00DF DDRB=0xFF;
000160 efef      	LDI  R30,LOW(255)
000161 bbe7      	OUT  0x17,R30
                 ; 0000 00E0 
                 ; 0000 00E1 // Port C initialization
                 ; 0000 00E2 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 00E3 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 00E4 PORTC=0x07;
000162 e0e7      	LDI  R30,LOW(7)
000163 bbe5      	OUT  0x15,R30
                 ; 0000 00E5 DDRC=0x00;
000164 e0e0      	LDI  R30,LOW(0)
000165 bbe4      	OUT  0x14,R30
                 ; 0000 00E6 
                 ; 0000 00E7 // Port D initialization
                 ; 0000 00E8 PORTD=0x00;
000166 bbe2      	OUT  0x12,R30
                 ; 0000 00E9 DDRD=0xFF;
000167 efef      	LDI  R30,LOW(255)
000168 bbe1      	OUT  0x11,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Timer/Counter 0 initialization
                 ; 0000 00EC // Clock source: System Clock
                 ; 0000 00ED // Clock value: 250.000 kHz
                 ; 0000 00EE // Mode: Normal top=FFh
                 ; 0000 00EF // OC0 output: Disconnected
                 ; 0000 00F0 TCCR0=0x03;
000169 e0e3      	LDI  R30,LOW(3)
00016a bfe3      	OUT  0x33,R30
                 ; 0000 00F1 TCNT0=0x00;
00016b e0e0      	LDI  R30,LOW(0)
00016c bfe2      	OUT  0x32,R30
                 ; 0000 00F2 OCR0=0x00;
00016d bfec      	OUT  0x3C,R30
                 ; 0000 00F3 
                 ; 0000 00F4 // Timer/Counter 1 initialization
                 ; 0000 00F5 // Clock source: System Clock
                 ; 0000 00F6 // Clock value: Timer 1 Stopped
                 ; 0000 00F7 // Mode: Normal top=FFFFh
                 ; 0000 00F8 // OC1A output: Discon.
                 ; 0000 00F9 // OC1B output: Discon.
                 ; 0000 00FA // Noise Canceler: Off
                 ; 0000 00FB // Input Capture on Falling Edge
                 ; 0000 00FC // Timer 1 Overflow Interrupt: Off
                 ; 0000 00FD // Input Capture Interrupt: Off
                 ; 0000 00FE // Compare A Match Interrupt: Off
                 ; 0000 00FF // Compare B Match Interrupt: Off
                 ; 0000 0100 TCCR1A=0x00;
00016e bdef      	OUT  0x2F,R30
                 ; 0000 0101 TCCR1B=0x00;
00016f bdee      	OUT  0x2E,R30
                 ; 0000 0102 TCNT1H=0x00;
000170 bded      	OUT  0x2D,R30
                 ; 0000 0103 TCNT1L=0x00;
000171 bdec      	OUT  0x2C,R30
                 ; 0000 0104 ICR1H=0x00;
000172 bde7      	OUT  0x27,R30
                 ; 0000 0105 ICR1L=0x00;
000173 bde6      	OUT  0x26,R30
                 ; 0000 0106 OCR1AH=0x00;
000174 bdeb      	OUT  0x2B,R30
                 ; 0000 0107 OCR1AL=0x00;
000175 bdea      	OUT  0x2A,R30
                 ; 0000 0108 OCR1BH=0x00;
000176 bde9      	OUT  0x29,R30
                 ; 0000 0109 OCR1BL=0x00;
000177 bde8      	OUT  0x28,R30
                 ; 0000 010A 
                 ; 0000 010B // Timer/Counter 2 initialization
                 ; 0000 010C // Clock source: System Clock
                 ; 0000 010D // Clock value: Timer 2 Stopped
                 ; 0000 010E // Mode: Normal top=FFh
                 ; 0000 010F // OC2 output: Disconnected
                 ; 0000 0110 ASSR=0x00;
000178 bde2      	OUT  0x22,R30
                 ; 0000 0111 TCCR2=0x00;
000179 bde5      	OUT  0x25,R30
                 ; 0000 0112 TCNT2=0x00;
00017a bde4      	OUT  0x24,R30
                 ; 0000 0113 OCR2=0x00;
00017b bde3      	OUT  0x23,R30
                 ; 0000 0114 
                 ; 0000 0115 // External Interrupt(s) initialization
                 ; 0000 0116 // INT0: Off
                 ; 0000 0117 // INT1: Off
                 ; 0000 0118 // INT2: Off
                 ; 0000 0119 MCUCR=0x00;
00017c bfe5      	OUT  0x35,R30
                 ; 0000 011A MCUCSR=0x00;
00017d bfe4      	OUT  0x34,R30
                 ; 0000 011B 
                 ; 0000 011C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 011D TIMSK=0x01;
00017e e0e1      	LDI  R30,LOW(1)
00017f bfe9      	OUT  0x39,R30
                 ; 0000 011E 
                 ; 0000 011F // Analog Comparator initialization
                 ; 0000 0120 // Analog Comparator: Off
                 ; 0000 0121 // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 0122 ACSR=0x80;
000180 e8e0      	LDI  R30,LOW(128)
000181 b9e8      	OUT  0x8,R30
                 ; 0000 0123 SFIOR=0x00;
000182 e0e0      	LDI  R30,LOW(0)
000183 bfe0      	OUT  0x30,R30
                 ; 0000 0124 
                 ; 0000 0125 // ADC initialization
                 ; 0000 0126 // ADC Clock frequency: 250.000 kHz
                 ; 0000 0127 // ADC Voltage Reference: AVCC pin
                 ; 0000 0128 // ADC Auto Trigger Source: None
                 ; 0000 0129 // Only the 8 most significant bits of
                 ; 0000 012A // the AD conversion result are used
                 ; 0000 012B ADMUX=ADC_VREF_TYPE;
000184 e6e0      	LDI  R30,LOW(96)
000185 b9e7      	OUT  0x7,R30
                 ; 0000 012C ADCSRA=0x86;
000186 e8e6      	LDI  R30,LOW(134)
000187 b9e6      	OUT  0x6,R30
                 ; 0000 012D 
                 ; 0000 012E 
                 ; 0000 012F adcch=0;
000188 2455      	CLR  R5
                 ; 0000 0130 
                 ; 0000 0131 // Global enable interrupts
                 ; 0000 0132 #asm("sei")
000189 9478      	sei
                 ; 0000 0133 
                 ; 0000 0134 //Process keys
                 ; 0000 0135 dCtr=0;
00018a 2488      	CLR  R8
00018b 2499      	CLR  R9
                 ; 0000 0136 while(1)
                 _0x5E:
                 ; 0000 0137 {
                 ; 0000 0138 	delay_ms(200);
00018c ece8      	LDI  R30,LOW(200)
00018d e0f0      	LDI  R31,HIGH(200)
00018e 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 0139 	dCtr++;
000190 01f4      	MOVW R30,R8
000191 9631      	ADIW R30,1
000192 014f      	MOVW R8,R30
                 ; 0000 013A 	srand(dCtr);
000193 929a      	ST   -Y,R9
000194 928a      	ST   -Y,R8
000195 940e 01bb 	CALL _srand
                 ; 0000 013B 
                 ; 0000 013C 	if(PINC.0==0)			//start
000197 9b98      	SBIS 0x13,0
                 ; 0000 013D 		break;
000198 c01f      	RJMP _0x60
                 ; 0000 013E 
                 ; 0000 013F 	if(PINC.1==0)			//motor test
000199 9999      	SBIC 0x13,1
00019a c01c      	RJMP _0x62
                 ; 0000 0140 	{
                 ; 0000 0141 		delay_ms(100);
00019b e6e4      	LDI  R30,LOW(100)
00019c e0f0      	LDI  R31,HIGH(100)
00019d 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 0142 		LM_FOR;RM_FOR;delay_ms(2000);
00019f 9896      	CBI  0x12,6
0001a0 9a94      	SBI  0x12,4
0001a1 9895      	CBI  0x12,5
0001a2 9a97      	SBI  0x12,7
0001a3 ede0      	LDI  R30,LOW(2000)
0001a4 e0f7      	LDI  R31,HIGH(2000)
0001a5 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 0143 	   LM_REV;RM_REV;delay_ms(2000);
0001a7 9a96      	SBI  0x12,6
0001a8 9894      	CBI  0x12,4
0001a9 9a95      	SBI  0x12,5
0001aa 9897      	CBI  0x12,7
0001ab ede0      	LDI  R30,LOW(2000)
0001ac e0f7      	LDI  R31,HIGH(2000)
0001ad 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 0144 		LM_OFF;RM_OFF;
0001af 9896      	CBI  0x12,6
0001b0 9894      	CBI  0x12,4
0001b1 9895      	CBI  0x12,5
0001b2 9897      	CBI  0x12,7
                 ; 0000 0145 		delay_ms(100);
0001b3 e6e4      	LDI  R30,LOW(100)
0001b4 e0f0      	LDI  R31,HIGH(100)
0001b5 940e 01f9 	CALL SUBOPT_0x4
                 ; 0000 0146 	}
                 ; 0000 0147 
                 ; 0000 0148 };
                 _0x62:
0001b7 cfd4      	RJMP _0x5E
                 _0x60:
                 ; 0000 0149 
                 ; 0000 014A 
                 ; 0000 014B 
                 ; 0000 014C 
                 ; 0000 014D while (1)
                 _0x7B:
                 ; 0000 014E       {
                 ; 0000 014F       	// Place your code here
                 ; 0000 0150 			edge_detect();
0001b8 df0d      	RCALL _edge_detect
                 ; 0000 0151 
                 ; 0000 0152       };
0001b9 cffe      	RJMP _0x7B
                 ; 0000 0153 }
                 _0x7E:
0001ba cfff      	RJMP _0x7E
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 _srand:
0001bb 81e8      	LD   R30,Y
0001bc 81f9      	LDD  R31,Y+1
0001bd 940e 021b 	CALL __CWD1
0001bf 940e 01fd 	CALL SUBOPT_0x5
0001c1 9622      	ADIW R28,2
0001c2 9508      	RET
                 _rand:
0001c3 91e0 0167 	LDS  R30,__seed_G100
0001c5 91f0 0168 	LDS  R31,__seed_G100+1
0001c7 9160 0169 	LDS  R22,__seed_G100+2
0001c9 9170 016a 	LDS  R23,__seed_G100+3
                +
0001cb e6ad     +LDI R26 , LOW ( 0x41C64E6D )
0001cc e4be     +LDI R27 , HIGH ( 0x41C64E6D )
0001cd ec86     +LDI R24 , BYTE3 ( 0x41C64E6D )
0001ce e491     +LDI R25 , BYTE4 ( 0x41C64E6D )
                 	__GETD2N 0x41C64E6D
0001cf 940e 0220 	CALL __MULD12U
                +
0001d1 59ee     +SUBI R30 , LOW ( - 30562 )
0001d2 48f8     +SBCI R31 , HIGH ( - 30562 )
0001d3 4f6f     +SBCI R22 , BYTE3 ( - 30562 )
0001d4 4f7f     +SBCI R23 , BYTE4 ( - 30562 )
                 	__ADDD1N 30562
0001d5 940e 01fd 	CALL SUBOPT_0x5
0001d7 01fb      	movw r30,r22
0001d8 77ff      	andi r31,0x7F
0001d9 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _sensors:
000160           	.BYTE 0x7
                 __seed_G100:
000167           	.BYTE 0x4
                 _p_S1030024:
00016b           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001da 2de5      	MOV  R30,R5
0001db e0f0      	LDI  R31,0
0001dc 5ae0      	SUBI R30,LOW(-_sensors)
0001dd 4ffe      	SBCI R31,HIGH(-_sensors)
0001de 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0001df 9a96      	SBI  0x12,6
0001e0 9894      	CBI  0x12,4
0001e1 9a95      	SBI  0x12,5
0001e2 9897      	CBI  0x12,7
0001e3 e5e8      	LDI  R30,LOW(600)
0001e4 e0f2      	LDI  R31,HIGH(600)
0001e5 93fa      	ST   -Y,R31
0001e6 93ea      	ST   -Y,R30
0001e7 940c 0206 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0001e9 2de6      	MOV  R30,R6
0001ea 01d4      	MOVW R26,R8
0001eb e0f0      	LDI  R31,0
0001ec 17ae      	CP   R26,R30
0001ed 07bf      	CPC  R27,R31
0001ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x3:
0001ef e0ea      	LDI  R30,LOW(10)
0001f0 e0f0      	LDI  R31,HIGH(10)
0001f1 93fa      	ST   -Y,R31
0001f2 93ea      	ST   -Y,R30
0001f3 940e 0206 	CALL _delay_ms
0001f5 01f4      	MOVW R30,R8
0001f6 9631      	ADIW R30,1
0001f7 014f      	MOVW R8,R30
0001f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0001f9 93fa      	ST   -Y,R31
0001fa 93ea      	ST   -Y,R30
0001fb 940c 0206 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0001fd 93e0 0167 	STS  __seed_G100,R30
0001ff 93f0 0168 	STS  __seed_G100+1,R31
000201 9360 0169 	STS  __seed_G100+2,R22
000203 9370 016a 	STS  __seed_G100+3,R23
000205 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000206 91e9      	ld   r30,y+
000207 91f9      	ld   r31,y+
000208 9630      	adiw r30,0
000209 f039      	breq __delay_ms1
                 __delay_ms0:
                +
00020a ea80     +LDI R24 , LOW ( 0xFA0 )
00020b e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
00020c 9701     +SBIW R24 , 1
00020d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
00020e 95a8      	wdr
00020f 9731      	sbiw r30,1
000210 f7c9      	brne __delay_ms0
                 __delay_ms1:
000211 9508      	ret
                 
                 __LSLW4:
000212 0fee      	LSL  R30
000213 1fff      	ROL  R31
                 __LSLW3:
000214 0fee      	LSL  R30
000215 1fff      	ROL  R31
                 __LSLW2:
000216 0fee      	LSL  R30
000217 1fff      	ROL  R31
000218 0fee      	LSL  R30
000219 1fff      	ROL  R31
00021a 9508      	RET
                 
                 __CWD1:
00021b 2f6f      	MOV  R22,R31
00021c 0f66      	ADD  R22,R22
00021d 0b66      	SBC  R22,R22
00021e 2f76      	MOV  R23,R22
00021f 9508      	RET
                 
                 __MULD12U:
000220 9f7a      	MUL  R23,R26
000221 2d70      	MOV  R23,R0
000222 9f6b      	MUL  R22,R27
000223 0d70      	ADD  R23,R0
000224 9ff8      	MUL  R31,R24
000225 0d70      	ADD  R23,R0
000226 9fe9      	MUL  R30,R25
000227 0d70      	ADD  R23,R0
000228 9f6a      	MUL  R22,R26
000229 2d60      	MOV  R22,R0
00022a 0d71      	ADD  R23,R1
00022b 9ffb      	MUL  R31,R27
00022c 0d60      	ADD  R22,R0
00022d 1d71      	ADC  R23,R1
00022e 9fe8      	MUL  R30,R24
00022f 0d60      	ADD  R22,R0
000230 1d71      	ADC  R23,R1
000231 2788      	CLR  R24
000232 9ffa      	MUL  R31,R26
000233 2df0      	MOV  R31,R0
000234 0d61      	ADD  R22,R1
000235 1f78      	ADC  R23,R24
000236 9feb      	MUL  R30,R27
000237 0df0      	ADD  R31,R0
000238 1d61      	ADC  R22,R1
000239 1f78      	ADC  R23,R24
00023a 9fea      	MUL  R30,R26
00023b 2de0      	MOV  R30,R0
00023c 0df1      	ADD  R31,R1
00023d 1f68      	ADC  R22,R24
00023e 1f78      	ADC  R23,R24
00023f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   2 r5 :   8 r6 :   2 r7 :   0 
r8 :  11 r9 :   5 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:  20 r23:  15 
r24:  17 r25:   5 r26:  23 r27:  14 r28:   2 r29:   1 r30: 191 r31:  55 
x  :   3 y  :  22 z  :   8 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
adc   :   7 add   :  10 adiw  :   4 and   :   0 andi  :   2 asr   :   0 
bclr  :   0 bld   :   0 brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 
break :   0 breq  :   6 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 brne  :  25 brpl  :   0 
brsh  :   3 brtc  :   0 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   0 call  :  26 cbi   :  20 cbr   :   0 clc   :   0 clh   :   0 
cli   :   1 cln   :   0 clr   :  10 cls   :   0 clt   :   0 clv   :   0 
clz   :   0 com   :   0 cp    :   7 cpc   :   2 cpi   :  20 cpse  :   0 
dec   :   1 des   :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 
icall :   0 ijmp  :   0 in    :   4 inc   :   0 jmp   :  24 ld    :   8 
ldd   :   1 ldi   :  77 lds   :  28 lpm   :   7 lsl   :   6 lsr   :   0 
mov   :  11 movw  :  13 mul   :  10 muls  :   0 mulsu :   0 neg   :   0 
nop   :   0 or    :   8 ori   :   2 out   :  46 pop   :   0 push  :   0 
rcall :   1 ret   :  11 reti  :   1 rjmp  :  23 rol   :   6 ror   :   0 
sbc   :   1 sbci  :   4 sbi   :  12 sbic  :   1 sbis  :   1 sbiw  :   5 
sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 
sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 
sleep :   0 spm   :   0 st    :  16 std   :   1 sts   :   4 sub   :   0 
subi  :   2 swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 47 out of 112 (42.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000480   1128     24   1152   16384   7.0%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
